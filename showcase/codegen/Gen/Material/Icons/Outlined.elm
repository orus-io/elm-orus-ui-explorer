module Gen.Material.Icons.Outlined exposing (abc, ac_unit, access_alarm, access_alarms, access_time, access_time_filled, accessibility, accessibility_new, accessible, accessible_forward, account_balance, account_balance_wallet, account_box, account_circle, account_tree, ad_units, adb, add, add_a_photo, add_alarm, add_alert, add_box, add_business, add_card, add_chart, add_circle, add_circle_outline, add_comment, add_home, add_home_work, add_ic_call, add_link, add_location, add_location_alt, add_moderator, add_photo_alternate, add_reaction, add_road, add_shopping_cart, add_task, add_to_drive, add_to_home_screen, add_to_photos, add_to_queue, addchart, adf_scanner, adjust, admin_panel_settings, ads_click, agriculture, air, airline_seat_flat, airline_seat_flat_angled, airline_seat_individual_suite, airline_seat_legroom_extra, airline_seat_legroom_normal, airline_seat_legroom_reduced, airline_seat_recline_extra, airline_seat_recline_normal, airline_stops, airlines, airplane_ticket, airplanemode_active, airplanemode_inactive, airplay, airport_shuttle, alarm, alarm_add, alarm_off, alarm_on, album, align_horizontal_center, align_horizontal_left, align_horizontal_right, align_vertical_bottom, align_vertical_center, align_vertical_top, all_inbox, all_inclusive, all_out, alt_route, alternate_email, analytics, anchor, android, animation, announcement, aod, apartment, api, app_blocking, app_registration, app_settings_alt, app_shortcut, approval, apps, apps_outage, architecture, archive, area_chart, arrow_back, arrow_back_ios, arrow_back_ios_new, arrow_circle_down, arrow_circle_left, arrow_circle_right, arrow_circle_up, arrow_downward, arrow_drop_down, arrow_drop_down_circle, arrow_drop_up, arrow_forward, arrow_forward_ios, arrow_left, arrow_outward, arrow_right, arrow_right_alt, arrow_upward, art_track, article, aspect_ratio, assessment, assignment, assignment_ind, assignment_late, assignment_return, assignment_returned, assignment_turned_in, assist_walker, assistant, assistant_direction, assistant_photo, assured_workload, atm, attach_email, attach_file, attach_money, attachment, attractions, attribution, audio_file, audiotrack, auto_awesome, auto_awesome_mosaic, auto_awesome_motion, auto_delete, auto_fix_high, auto_fix_normal, auto_fix_off, auto_graph, auto_mode, auto_stories, autofps_select, autorenew, av_timer, baby_changing_station, back_hand, backpack, backspace, backup, backup_table, badge, bakery_dining, balance, balcony, ballot, bar_chart, batch_prediction, bathroom, bathtub, battery_0_bar, battery_1_bar, battery_2_bar, battery_3_bar, battery_4_bar, battery_5_bar, battery_6_bar, battery_alert, battery_charging_full, battery_full, battery_saver, battery_std, battery_unknown, beach_access, bed, bedroom_baby, bedroom_child, bedroom_parent, bedtime, bedtime_off, beenhere, bento, bike_scooter, biotech, blender, blind, blinds, blinds_closed, block, bloodtype, bluetooth, bluetooth_audio, bluetooth_connected, bluetooth_disabled, bluetooth_drive, bluetooth_searching, blur_circular, blur_linear, blur_off, blur_on, bolt, book, book_online, bookmark, bookmark_add, bookmark_added, bookmark_border, bookmark_remove, bookmarks, border_all, border_bottom, border_clear, border_color, border_horizontal, border_inner, border_left, border_outer, border_right, border_style, border_top, border_vertical, boy, branding_watermark, breakfast_dining, brightness_1, brightness_2, brightness_3, brightness_4, brightness_5, brightness_6, brightness_7, brightness_auto, brightness_high, brightness_low, brightness_medium, broadcast_on_home, broadcast_on_personal, broken_image, browse_gallery, browser_not_supported, browser_updated, brunch_dining, brush, bubble_chart, bug_report, build, build_circle, bungalow, burst_mode, bus_alert, business, business_center, cabin, cable, cached, cake, calculate, calendar_month, calendar_today, calendar_view_day, calendar_view_month, calendar_view_week, call, call_end, call_made, call_merge, call_missed, call_missed_outgoing, call_received, call_split, call_to_action, camera, camera_alt, camera_enhance, camera_front, camera_indoor, camera_outdoor, camera_rear, camera_roll, cameraswitch, campaign, cancel, cancel_presentation, cancel_schedule_send, candlestick_chart, car_crash, car_rental, car_repair, card_giftcard, card_membership, card_travel, carpenter, cases, casino, cast, cast_connected, cast_for_education, castle, catching_pokemon, category, celebration, cell_tower, cell_wifi, center_focus_strong, center_focus_weak, chair, chair_alt, chalet, change_circle, change_history, charging_station, chat, chat_bubble, chat_bubble_outline, check, check_box, check_box_outline_blank, check_circle, check_circle_outline, checklist, checklist_rtl, checkroom, chevron_left, chevron_right, child_care, child_friendly, chrome_reader_mode, church, circle, circle_notifications, class, clean_hands, cleaning_services, clear, clear_all, close, close_fullscreen, closed_caption, closed_caption_disabled, closed_caption_off, cloud, cloud_circle, cloud_done, cloud_download, cloud_off, cloud_queue, cloud_sync, cloud_upload, co2, co_present, code, code_off, coffee, coffee_maker, collections, collections_bookmark, color_lens, colorize, comment, comment_bank, comments_disabled, commit, commute, compare, compare_arrows, compass_calibration, compost, compress, computer, confirmation_number, connect_without_contact, connected_tv, connecting_airports, construction, contact_emergency, contact_mail, contact_page, contact_phone, contact_support, contactless, contacts, content_copy, content_cut, content_paste, content_paste_go, content_paste_off, content_paste_search, contrast, control_camera, control_point, control_point_duplicate, cookie, copy_all, copyright, coronavirus, corporate_fare, cottage, countertops, create, create_new_folder, credit_card, credit_card_off, credit_score, crib, crisis_alert, crop, crop_16_9, crop_3_2, crop_5_4, crop_7_5, crop_din, crop_free, crop_landscape, crop_original, crop_portrait, crop_rotate, crop_square, cruelty_free, css, currency_bitcoin, currency_exchange, currency_franc, currency_lira, currency_pound, currency_ruble, currency_rupee, currency_yen, currency_yuan, curtains, curtains_closed, cyclone, dangerous, dark_mode, dashboard, dashboard_customize, data_array, data_exploration, data_object, data_saver_off, data_saver_on, data_thresholding, data_usage, dataset, dataset_linked, date_range, deblur, deck, dehaze, delete, delete_forever, delete_outline, delete_sweep, delivery_dining, density_large, density_medium, density_small, departure_board, description, deselect, design_services, desk, desktop_access_disabled, desktop_mac, desktop_windows, details, developer_board, developer_board_off, developer_mode, device_hub, device_thermostat, device_unknown, devices, devices_fold, devices_other, dialer_sip, dialpad, diamond, difference, dining, dinner_dining, directions, directions_bike, directions_boat, directions_boat_filled, directions_bus, directions_bus_filled, directions_car, directions_car_filled, directions_off, directions_railway, directions_railway_filled, directions_run, directions_subway, directions_subway_filled, directions_transit, directions_transit_filled, directions_walk, dirty_lens, disabled_by_default, disabled_visible, disc_full, discount, display_settings, diversity_1, diversity_2, diversity_3, dns, do_disturb, do_disturb_alt, do_disturb_off, do_disturb_on, do_not_disturb, do_not_disturb_alt, do_not_disturb_off, do_not_disturb_on, do_not_disturb_on_total_silence, do_not_step, do_not_touch, dock, document_scanner, domain, domain_add, domain_disabled, domain_verification, done, done_all, done_outline, donut_large, donut_small, door_back, door_front, door_sliding, doorbell, double_arrow, downhill_skiing, download, download_done, download_for_offline, downloading, drafts, drag_handle, drag_indicator, draw, drive_eta, drive_file_move, drive_file_move_rtl, drive_file_rename_outline, drive_folder_upload, dry, dry_cleaning, duo, dvr, dynamic_feed, dynamic_form, e_mobiledata, earbuds, earbuds_battery, east, edgesensor_high, edgesensor_low, edit, edit_attributes, edit_calendar, edit_location, edit_location_alt, edit_note, edit_notifications, edit_off, edit_road, egg, egg_alt, eight_k, eight_k_plus, eight_mp, eighteen_mp, eighteen_up_rating, eject, elderly, elderly_woman, electric_bike, electric_bolt, electric_car, electric_meter, electric_moped, electric_rickshaw, electric_scooter, electrical_services, elevator, eleven_mp, email, emergency, emergency_recording, emergency_share, emoji_emotions, emoji_events, emoji_food_beverage, emoji_nature, emoji_objects, emoji_people, emoji_symbols, emoji_transportation, energy_savings_leaf, engineering, enhanced_encryption, equalizer, error, error_outline, escalator, escalator_warning, euro, euro_symbol, ev_station, event, event_available, event_busy, event_note, event_repeat, event_seat, exit_to_app, expand, expand_circle_down, expand_less, expand_more, explicit, explore, explore_off, exposure, exposure_neg_1, exposure_neg_2, exposure_plus_1, exposure_plus_2, exposure_zero, extension, extension_off, face, face_2, face_3, face_4, face_5, face_6, face_retouching_natural, face_retouching_off, fact_check, factory, family_restroom, fast_forward, fast_rewind, fastfood, favorite, favorite_border, fax, featured_play_list, featured_video, feed, feedback, female, fence, festival, fiber_dvr, fiber_manual_record, fiber_new, fiber_pin, fiber_smart_record, fifteen_mp, file_copy, file_download, file_download_done, file_download_off, file_open, file_present, file_upload, filter, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9, filter_9_plus, filter_alt, filter_alt_off, filter_b_and_w, filter_center_focus, filter_drama, filter_frames, filter_hdr, filter_list, filter_list_off, filter_none, filter_tilt_shift, filter_vintage, find_in_page, find_replace, fingerprint, fire_extinguisher, fire_hydrant_alt, fire_truck, fireplace, first_page, fit_screen, fitbit, fitness_center, five_g, five_k, five_k_plus, five_mp, flag, flag_circle, flaky, flare, flash_auto, flash_off, flash_on, flashlight_off, flashlight_on, flatware, flight, flight_class, flight_land, flight_takeoff, flip, flip_camera_android, flip_camera_ios, flip_to_back, flip_to_front, flood, fluorescent, flutter_dash, fmd_bad, fmd_good, folder, folder_copy, folder_delete, folder_off, folder_open, folder_shared, folder_special, folder_zip, follow_the_signs, font_download, font_download_off, food_bank, forest, fork_left, fork_right, format_align_center, format_align_justify, format_align_left, format_align_right, format_bold, format_clear, format_color_fill, format_color_reset, format_color_text, format_indent_decrease, format_indent_increase, format_italic, format_line_spacing, format_list_bulleted, format_list_numbered, format_list_numbered_rtl, format_overline, format_paint, format_quote, format_shapes, format_size, format_strikethrough, format_textdirection_l_to_r, format_textdirection_r_to_l, format_underlined, fort, forum, forward, forward_10, forward_30, forward_5, forward_to_inbox, foundation, four_g_mobiledata, four_g_plus_mobiledata, four_k, four_k_plus, four_mp, fourteen_mp, free_breakfast, free_cancellation, front_hand, fullscreen, fullscreen_exit, functions, g_mobiledata, g_translate, gamepad, games, garage, gas_meter, gavel, generating_tokens, gesture, get_app, gif, gif_box, girl, gite, golf_course, gpp_bad, gpp_good, gpp_maybe, gps_fixed, gps_not_fixed, gps_off, grade, gradient, grading, grain, graphic_eq, grass, grid_3x3, grid_4x4, grid_goldenratio, grid_off, grid_on, grid_view, group, group_add, group_off, group_remove, group_work, groups, groups_2, groups_3, h_mobiledata, h_plus_mobiledata, hail, handshake, handyman, hardware, hd, hdr_auto, hdr_auto_select, hdr_enhanced_select, hdr_off, hdr_off_select, hdr_on, hdr_on_select, hdr_plus, hdr_strong, hdr_weak, headphones, headphones_battery, headset, headset_mic, headset_off, healing, health_and_safety, hearing, hearing_disabled, heart_broken, heat_pump, height, help, help_center, help_outline, hevc, hexagon, hide_image, hide_source, high_quality, highlight, highlight_alt, highlight_off, hiking, history, history_edu, history_toggle_off, hive, hls, hls_off, holiday_village, home, home_max, home_mini, home_repair_service, home_work, horizontal_distribute, horizontal_rule, horizontal_split, hot_tub, hotel, hotel_class, hourglass_bottom, hourglass_disabled, hourglass_empty, hourglass_full, hourglass_top, house, house_siding, houseboat, how_to_reg, how_to_vote, html, http, https, hub, hvac, ice_skating, icecream, image, image_aspect_ratio, image_not_supported, image_search, imagesearch_roller, import_contacts, import_export, important_devices, inbox, incomplete_circle, indeterminate_check_box, info, input, insert_chart, insert_chart_outlined, insert_comment, insert_drive_file, insert_emoticon, insert_invitation, insert_link, insert_page_break, insert_photo, insights, install_desktop, install_mobile, integration_instructions, interests, interpreter_mode, inventory, inventory_2, invert_colors, invert_colors_off, ios_share, iron, iso, javascript, join_full, join_inner, join_left, join_right, kayaking, kebab_dining, key, key_off, keyboard, keyboard_alt, keyboard_arrow_down, keyboard_arrow_left, keyboard_arrow_right, keyboard_arrow_up, keyboard_backspace, keyboard_capslock, keyboard_command_key, keyboard_control_key, keyboard_double_arrow_down, keyboard_double_arrow_left, keyboard_double_arrow_right, keyboard_double_arrow_up, keyboard_hide, keyboard_option_key, keyboard_return, keyboard_tab, keyboard_voice, king_bed, kitchen, kitesurfing, label, label_important, label_off, lan, landscape, landslide, language, laptop, laptop_chromebook, laptop_mac, laptop_windows, last_page, launch, layers, layers_clear, leaderboard, leak_add, leak_remove, legend_toggle, lens, lens_blur, library_add, library_add_check, library_books, library_music, light, light_mode, lightbulb, lightbulb_circle, line_axis, line_style, line_weight, linear_scale, link, link_off, linked_camera, liquor, list, list_alt, live_help, live_tv, living, local_activity, local_airport, local_atm, local_bar, local_cafe, local_car_wash, local_convenience_store, local_dining, local_drink, local_fire_department, local_florist, local_gas_station, local_grocery_store, local_hospital, local_hotel, local_laundry_service, local_library, local_mall, local_movies, local_offer, local_parking, local_pharmacy, local_phone, local_pizza, local_play, local_police, local_post_office, local_printshop, local_see, local_shipping, local_taxi, location_city, location_disabled, location_off, location_on, location_searching, lock, lock_clock, lock_open, lock_person, lock_reset, login, logo_dev, logout, looks, looks_3, looks_4, looks_5, looks_6, looks_one, looks_two, loop, loupe, low_priority, loyalty, lte_mobiledata, lte_plus_mobiledata, luggage, lunch_dining, lyrics, macro_off, mail, mail_lock, mail_outline, male, man, man_2, man_3, man_4, manage_accounts, manage_history, manage_search, map, maps_home_work, maps_ugc, margin, mark_as_unread, mark_chat_read, mark_chat_unread, mark_email_read, mark_email_unread, mark_unread_chat_alt, markunread, markunread_mailbox, masks, maximize, media_bluetooth_off, media_bluetooth_on, mediation, medical_information, medical_services, medication, medication_liquid, meeting_room, memory, menu, menu_book, menu_open, merge, merge_type, message, mic, mic_external_off, mic_external_on, mic_none, mic_off, microwave, military_tech, minimize, minor_crash, miscellaneous_services, missed_video_call, mms, mobile_friendly, mobile_off, mobile_screen_share, mobiledata_off, mode, mode_comment, mode_edit, mode_edit_outline, mode_fan_off, mode_night, mode_of_travel, mode_standby, model_training, moduleName_, monetization_on, money, money_off, money_off_csred, monitor, monitor_heart, monitor_weight, monochrome_photos, mood, mood_bad, moped, more, more_horiz, more_time, more_vert, mosque, motion_photos_auto, motion_photos_off, motion_photos_on, motion_photos_pause, motion_photos_paused, mouse, move_down, move_to_inbox, move_up, movie, movie_creation, movie_filter, moving, mp, multiline_chart, multiple_stop, museum, music_note, music_off, music_video, my_location, nat, nature, nature_people, navigate_before, navigate_next, navigation, near_me, near_me_disabled, nearby_error, nearby_off, nest_cam_wired_stand, network_cell, network_check, network_locked, network_ping, network_wifi, network_wifi_1_bar, network_wifi_2_bar, network_wifi_3_bar, new_label, new_releases, newspaper, next_plan, next_week, nfc, night_shelter, nightlife, nightlight, nightlight_round, nights_stay, nine_k, nine_k_plus, nine_mp, nineteen_mp, no_accounts, no_adult_content, no_backpack, no_cell, no_crash, no_drinks, no_encryption, no_encryption_gmailerrorred, no_flash, no_food, no_luggage, no_meals, no_meeting_room, no_photography, no_sim, no_stroller, no_transfer, noise_aware, noise_control_off, nordic_walking, north, north_east, north_west, not_accessible, not_interested, not_listed_location, not_started, note, note_add, note_alt, notes, notification_add, notification_important, notifications, notifications_active, notifications_none, notifications_off, notifications_paused, numbers, offline_bolt, offline_pin, offline_share, oil_barrel, on_device_training, ondemand_video, one_k, one_k_plus, one_two_three, one_x_mobiledata, online_prediction, opacity, open_in_browser, open_in_full, open_in_new, open_in_new_off, open_with, other_houses, outbound, outbox, outdoor_grill, outlet, outlined_flag, output, padding, pages, pageview, paid, palette, pan_tool, pan_tool_alt, panorama, panorama_fish_eye, panorama_horizontal, panorama_horizontal_select, panorama_photosphere, panorama_photosphere_select, panorama_vertical, panorama_vertical_select, panorama_wide_angle, panorama_wide_angle_select, paragliding, park, party_mode, password, pattern, pause, pause_circle, pause_circle_filled, pause_circle_outline, pause_presentation, payment, payments, pedal_bike, pending, pending_actions, pentagon, people, people_alt, people_outline, percent, perm_camera_mic, perm_contact_calendar, perm_data_setting, perm_device_information, perm_identity, perm_media, perm_phone_msg, perm_scan_wifi, person, person_2, person_3, person_4, person_add, person_add_alt, person_add_alt_1, person_add_disabled, person_off, person_outline, person_pin, person_pin_circle, person_remove, person_remove_alt_1, person_search, personal_injury, personal_video, pest_control, pest_control_rodent, pets, phishing, phone, phone_android, phone_bluetooth_speaker, phone_callback, phone_disabled, phone_enabled, phone_forwarded, phone_iphone, phone_locked, phone_missed, phone_paused, phonelink, phonelink_erase, phonelink_lock, phonelink_off, phonelink_ring, phonelink_setup, photo, photo_album, photo_camera, photo_camera_back, photo_camera_front, photo_filter, photo_library, photo_size_select_actual, photo_size_select_large, photo_size_select_small, php, piano, piano_off, picture_as_pdf, picture_in_picture, picture_in_picture_alt, pie_chart, pie_chart_outline, pin, pin_drop, pin_end, pin_invoke, pinch, pivot_table_chart, pix, place, plagiarism, play_arrow, play_circle, play_circle_filled, play_circle_outline, play_disabled, play_for_work, play_lesson, playlist_add, playlist_add_check, playlist_add_check_circle, playlist_add_circle, playlist_play, playlist_remove, plumbing, plus_one, podcasts, point_of_sale, policy, poll, polyline, polymer, pool, portable_wifi_off, portrait, post_add, power, power_input, power_off, power_settings_new, precision_manufacturing, pregnant_woman, present_to_all, preview, price_change, price_check, print, print_disabled, priority_high, privacy_tip, private_connectivity, production_quantity_limits, propane, propane_tank, psychology, psychology_alt, public, public_off, publish, published_with_changes, punch_clock, push_pin, qr_code, qr_code_2, qr_code_scanner, query_builder, query_stats, question_answer, question_mark, queue, queue_music, queue_play_next, quickreply, quiz, r_mobiledata, radar, radio, radio_button_checked, radio_button_unchecked, railway_alert, ramen_dining, ramp_left, ramp_right, rate_review, raw_off, raw_on, read_more, real_estate_agent, receipt, receipt_long, recent_actors, recommend, record_voice_over, rectangle, recycling, redeem, redo, reduce_capacity, refresh, remember_me, remove, remove_circle, remove_circle_outline, remove_done, remove_from_queue, remove_moderator, remove_red_eye, remove_road, remove_shopping_cart, reorder, repartition, repeat, repeat_on, repeat_one, repeat_one_on, replay, replay_10, replay_30, replay_5, replay_circle_filled, reply, reply_all, report, report_gmailerrorred, report_off, report_problem, request_page, request_quote, reset_tv, restart_alt, restaurant, restaurant_menu, restore, restore_from_trash, restore_page, reviews, rice_bowl, ring_volume, rocket, rocket_launch, roller_shades, roller_shades_closed, roller_skating, roofing, room, room_preferences, room_service, rotate_90_degrees_ccw, rotate_90_degrees_cw, rotate_left, rotate_right, roundabout_left, roundabout_right, rounded_corner, route, router, rowing, rss_feed, rsvp, rtt, rule, rule_folder, run_circle, running_with_errors, rv_hookup, safety_check, safety_divider, sailing, sanitizer, satellite, satellite_alt, save, save_alt, save_as, saved_search, savings, scale, scanner, scatter_plot, schedule, schedule_send, schema, school, science, score, scoreboard, screen_lock_landscape, screen_lock_portrait, screen_lock_rotation, screen_rotation, screen_rotation_alt, screen_search_desktop, screen_share, screenshot, screenshot_monitor, scuba_diving, sd, sd_card, sd_card_alert, sd_storage, search, search_off, security, security_update, security_update_good, security_update_warning, segment, select_all, self_improvement, sell, send, send_and_archive, send_time_extension, send_to_mobile, sensor_door, sensor_occupied, sensor_window, sensors, sensors_off, sentiment_dissatisfied, sentiment_neutral, sentiment_satisfied, sentiment_satisfied_alt, sentiment_very_dissatisfied, sentiment_very_satisfied, set_meal, settings, settings_accessibility, settings_applications, settings_backup_restore, settings_bluetooth, settings_brightness, settings_cell, settings_ethernet, settings_input_antenna, settings_input_component, settings_input_composite, settings_input_hdmi, settings_input_svideo, settings_overscan, settings_phone, settings_power, settings_remote, settings_suggest, settings_system_daydream, settings_voice, seven_k, seven_k_plus, seven_mp, seventeen_mp, severe_cold, shape_line, share, share_location, shield, shield_moon, shop, shop_2, shop_two, shopping_bag, shopping_basket, shopping_cart, shopping_cart_checkout, short_text, shortcut, show_chart, shower, shuffle, shuffle_on, shutter_speed, sick, sign_language, signal_cellular_0_bar, signal_cellular_4_bar, signal_cellular_alt, signal_cellular_alt_1_bar, signal_cellular_alt_2_bar, signal_cellular_connected_no_internet_0_bar, signal_cellular_connected_no_internet_4_bar, signal_cellular_no_sim, signal_cellular_nodata, signal_cellular_null, signal_cellular_off, signal_wifi_0_bar, signal_wifi_4_bar, signal_wifi_4_bar_lock, signal_wifi_bad, signal_wifi_connected_no_internet_4, signal_wifi_off, signal_wifi_statusbar_4_bar, signal_wifi_statusbar_connected_no_internet_4, signal_wifi_statusbar_null, signpost, sim_card, sim_card_alert, sim_card_download, single_bed, sip, six_ft_apart, six_k, six_k_plus, six_mp, sixteen_mp, sixty_fps, sixty_fps_select, skateboarding, skip_next, skip_previous, sledding, slideshow, slow_motion_video, smart_button, smart_display, smart_screen, smart_toy, smartphone, smoke_free, smoking_rooms, sms, sms_failed, snippet_folder, snooze, snowboarding, snowmobile, snowshoeing, soap, social_distance, solar_power, sort, sort_by_alpha, sos, soup_kitchen, source, south, south_america, south_east, south_west, spa, space_bar, space_dashboard, spatial_audio, spatial_audio_off, spatial_tracking, speaker, speaker_group, speaker_notes, speaker_notes_off, speaker_phone, speed, spellcheck, splitscreen, spoke, sports, sports_bar, sports_baseball, sports_basketball, sports_cricket, sports_esports, sports_football, sports_golf, sports_gymnastics, sports_handball, sports_hockey, sports_kabaddi, sports_martial_arts, sports_mma, sports_motorsports, sports_rugby, sports_score, sports_soccer, sports_tennis, sports_volleyball, square, square_foot, ssid_chart, stacked_bar_chart, stacked_line_chart, stadium, stairs, star, star_border, star_border_purple500, star_half, star_outline, star_purple500, star_rate, stars, start, stay_current_landscape, stay_current_portrait, stay_primary_landscape, stay_primary_portrait, sticky_note_2, stop, stop_circle, stop_screen_share, storage, store, store_mall_directory, storefront, storm, straight, straighten, stream, streetview, strikethrough_s, stroller, style, subdirectory_arrow_left, subdirectory_arrow_right, subject, subscript, subscriptions, subtitles, subtitles_off, subway, summarize, superscript, supervised_user_circle, supervisor_account, support, support_agent, surfing, surround_sound, swap_calls, swap_horiz, swap_horizontal_circle, swap_vert, swap_vertical_circle, swipe, swipe_down, swipe_down_alt, swipe_left, swipe_left_alt, swipe_right, swipe_right_alt, swipe_up, swipe_up_alt, swipe_vertical, switch_access_shortcut, switch_access_shortcut_add, switch_account, switch_camera, switch_left, switch_right, switch_video, synagogue, sync, sync_alt, sync_disabled, sync_lock, sync_problem, system_security_update, system_security_update_good, system_security_update_warning, system_update, system_update_alt, tab, tab_unselected, table_bar, table_chart, table_restaurant, table_rows, table_view, tablet, tablet_android, tablet_mac, tag, tag_faces, takeout_dining, tap_and_play, tapas, task, task_alt, taxi_alert, temple_buddhist, temple_hindu, ten_k, ten_mp, terminal, terrain, text_decrease, text_fields, text_format, text_increase, text_rotate_up, text_rotate_vertical, text_rotation_angledown, text_rotation_angleup, text_rotation_down, text_rotation_none, text_snippet, textsms, texture, theater_comedy, theaters, thermostat, thermostat_auto, thirteen_mp, thirty_fps, thirty_fps_select, three_d_rotation, three_g_mobiledata, three_k, three_k_plus, three_mp, three_p, three_sixty, thumb_down, thumb_down_alt, thumb_down_off_alt, thumb_up, thumb_up_alt, thumb_up_off_alt, thumbs_up_down, thunderstorm, time_to_leave, timelapse, timeline, timer, timer_10, timer_10_select, timer_3, timer_3_select, timer_off, tips_and_updates, tire_repair, title, toc, today, toggle_off, toggle_on, token, toll, tonality, topic, tornado, touch_app, tour, toys, track_changes, traffic, train, tram, transcribe, transfer_within_a_station, transform, transgender, transit_enterexit, translate, travel_explore, trending_down, trending_flat, trending_up, trip_origin, troubleshoot, try, tsunami, tty, tune, tungsten, turn_left, turn_right, turn_sharp_left, turn_sharp_right, turn_slight_left, turn_slight_right, turned_in, turned_in_not, tv, tv_off, twelve_mp, twenty_four_mp, twenty_mp, twenty_one_mp, twenty_three_mp, twenty_two_mp, two_k, two_k_plus, two_mp, two_wheeler, type_specimen, u_turn_left, u_turn_right, umbrella, unarchive, undo, unfold_less, unfold_less_double, unfold_more, unfold_more_double, unpublished, unsubscribe, upcoming, update, update_disabled, upgrade, upload, upload_file, usb, usb_off, vaccines, values_, vape_free, vaping_rooms, verified, verified_user, vertical_align_bottom, vertical_align_center, vertical_align_top, vertical_distribute, vertical_shades, vertical_shades_closed, vertical_split, vibration, video_call, video_camera_back, video_camera_front, video_chat, video_file, video_label, video_library, video_settings, video_stable, videocam, videocam_off, videogame_asset, videogame_asset_off, view_agenda, view_array, view_carousel, view_column, view_comfy, view_comfy_alt, view_compact, view_compact_alt, view_cozy, view_day, view_headline, view_in_ar, view_kanban, view_list, view_module, view_quilt, view_sidebar, view_stream, view_timeline, view_week, vignette, villa, visibility, visibility_off, voice_chat, voice_over_off, voicemail, volcano, volume_down, volume_mute, volume_off, volume_up, volunteer_activism, vpn_key, vpn_key_off, vpn_lock, vrpano, wallet, wallpaper, warehouse, warning, warning_amber, wash, watch, watch_later, watch_off, water, water_damage, water_drop, waterfall_chart, waves, waving_hand, wb_auto, wb_cloudy, wb_incandescent, wb_iridescent, wb_shade, wb_sunny, wb_twilight, wc, web, web_asset, web_asset_off, web_stories, webhook, weekend, west, whatshot, wheelchair_pickup, where_to_vote, widgets, width_full, width_normal, width_wide, wifi, wifi_1_bar, wifi_2_bar, wifi_calling, wifi_calling_3, wifi_channel, wifi_find, wifi_lock, wifi_off, wifi_password, wifi_protected_setup, wifi_tethering, wifi_tethering_error, wifi_tethering_off, wind_power, window, wine_bar, woman, woman_2, work, work_history, work_off, work_outline, workspace_premium, workspaces, wrap_text, wrong_location, wysiwyg, yard, youtube_searched_for, zoom_in, zoom_in_map, zoom_out, zoom_out_map)

{-| 
@docs moduleName_, one_two_three, three_d_rotation, abc, accessibility, accessibility_new, accessible, accessible_forward, account_balance, account_balance_wallet, account_box, account_circle, add_card, add_home, add_shopping_cart, add_task, add_to_drive, addchart, admin_panel_settings, ads_click, alarm, alarm_add, alarm_off, alarm_on, all_inbox, all_out, analytics, anchor, android, announcement, api, app_blocking, app_shortcut, arrow_circle_down, arrow_circle_left, arrow_circle_right, arrow_circle_up, arrow_outward, arrow_right_alt, article, aspect_ratio, assessment, assignment, assignment_ind, assignment_late, assignment_return, assignment_returned, assignment_turned_in, assured_workload, autorenew, backup, backup_table, balance, batch_prediction, book, book_online, bookmark, bookmark_add, bookmark_added, bookmark_border, bookmark_remove, bookmarks, browse_gallery, bug_report, build, build_circle, cached, calendar_month, calendar_today, calendar_view_day, calendar_view_month, calendar_view_week, camera_enhance, cancel_schedule_send, card_giftcard, card_membership, card_travel, change_history, check_circle, check_circle_outline, chrome_reader_mode, circle_notifications, class, close_fullscreen, code, code_off, comment_bank, commit, commute, compare_arrows, compress, contact_page, contact_support, contactless, copyright, credit_card, credit_card_off, css, currency_exchange, dangerous, dashboard, dashboard_customize, data_exploration, data_thresholding, date_range, delete, delete_forever, delete_outline, density_large, density_medium, density_small, description, disabled_by_default, disabled_visible, display_settings, dns, done, done_all, done_outline, donut_large, donut_small, drag_indicator, dynamic_form, edit_calendar, edit_off, eject, euro_symbol, event, event_repeat, event_seat, exit_to_app, expand, explore, explore_off, extension, extension_off, face, fact_check, favorite, favorite_border, fax, feedback, file_present, filter_alt, filter_alt_off, find_in_page, find_replace, fingerprint, fit_screen, flaky, flight_land, flight_takeoff, flip_to_back, flip_to_front, flutter_dash, free_cancellation, g_translate, gavel, generating_tokens, get_app, gif, gif_box, grade, grading, group_work, help, help_center, help_outline, hide_source, highlight_alt, highlight_off, history, history_toggle_off, hls, hls_off, home, horizontal_split, hotel_class, hourglass_disabled, hourglass_empty, hourglass_full, html, http, https, important_devices, info, input, install_desktop, install_mobile, integration_instructions, invert_colors, javascript, join_full, join_inner, join_left, join_right, label, label_important, label_off, language, launch, leaderboard, lightbulb, lightbulb_circle, line_style, line_weight, list, lock, lock_clock, lock_open, lock_person, lock_reset, login, logout, loyalty, manage_accounts, manage_history, mark_as_unread, markunread_mailbox, maximize, mediation, minimize, model_training, network_ping, new_label, next_plan, nightlight_round, no_accounts, noise_aware, noise_control_off, not_accessible, not_started, note_add, offline_bolt, offline_pin, on_device_training, online_prediction, opacity, open_in_browser, open_in_full, open_in_new, open_in_new_off, open_with, outbound, outbox, outlet, output, pageview, paid, pan_tool, pan_tool_alt, payment, pending, pending_actions, percent, perm_camera_mic, perm_contact_calendar, perm_data_setting, perm_device_information, perm_identity, perm_media, perm_phone_msg, perm_scan_wifi, pets, php, picture_in_picture, picture_in_picture_alt, pin_end, pin_invoke, pinch, plagiarism, play_for_work, polymer, power_settings_new, pregnant_woman, preview, print, privacy_tip, private_connectivity, production_quantity_limits, published_with_changes, query_builder, question_answer, question_mark, quickreply, receipt, record_voice_over, redeem, remove_done, remove_shopping_cart, reorder, repartition, report_problem, request_page, restore, restore_from_trash, restore_page, rocket, rocket_launch, room, rounded_corner, rowing, rule, satellite_alt, saved_search, savings, schedule, schedule_send, search, search_off, segment, send_and_archive, sensors, sensors_off, settings, settings_accessibility, settings_applications, settings_backup_restore, settings_bluetooth, settings_brightness, settings_cell, settings_ethernet, settings_input_antenna, settings_input_component, settings_input_composite, settings_input_hdmi, settings_input_svideo, settings_overscan, settings_phone, settings_power, settings_remote, settings_voice, shop, shop_2, shop_two, shopping_bag, shopping_basket, shopping_cart, shopping_cart_checkout, smart_button, source, space_dashboard, spatial_audio, spatial_audio_off, spatial_tracking, speaker_notes, speaker_notes_off, spellcheck, star_rate, stars, sticky_note_2, store, subject, subtitles_off, supervised_user_circle, supervisor_account, support, swap_horiz, swap_horizontal_circle, swap_vert, swap_vertical_circle, swipe, swipe_down, swipe_down_alt, swipe_left, swipe_left_alt, swipe_right, swipe_right_alt, swipe_up, swipe_up_alt, swipe_vertical, switch_access_shortcut, switch_access_shortcut_add, sync_alt, system_update_alt, tab, tab_unselected, table_view, task_alt, terminal, text_rotate_up, text_rotate_vertical, text_rotation_angledown, text_rotation_angleup, text_rotation_down, text_rotation_none, theaters, thumb_down, thumb_down_off_alt, thumb_up, thumb_up_off_alt, thumbs_up_down, timeline, tips_and_updates, toc, today, token, toll, touch_app, tour, track_changes, transcribe, translate, trending_down, trending_flat, trending_up, troubleshoot, try, turned_in, turned_in_not, unfold_less_double, unfold_more_double, unpublished, update, update_disabled, upgrade, verified, verified_user, vertical_split, view_agenda, view_array, view_carousel, view_column, view_comfy_alt, view_compact_alt, view_cozy, view_day, view_headline, view_in_ar, view_kanban, view_list, view_module, view_quilt, view_sidebar, view_stream, view_timeline, view_week, visibility, visibility_off, voice_over_off, watch_later, webhook, width_full, width_normal, width_wide, wifi_protected_setup, work, work_history, work_off, work_outline, wysiwyg, youtube_searched_for, zoom_in, zoom_out, add_alert, auto_delete, error, error_outline, notification_important, warning, warning_amber, ten_k, one_k, one_k_plus, two_k, two_k_plus, three_k, three_k_plus, four_k, four_k_plus, five_g, five_k, five_k_plus, six_k, six_k_plus, seven_k, seven_k_plus, eight_k, eight_k_plus, nine_k, nine_k_plus, add_to_queue, airplay, album, art_track, audio_file, av_timer, branding_watermark, call_to_action, closed_caption, closed_caption_disabled, closed_caption_off, control_camera, equalizer, explicit, fast_forward, fast_rewind, featured_play_list, featured_video, fiber_dvr, fiber_manual_record, fiber_new, fiber_pin, fiber_smart_record, forward_10, forward_30, forward_5, games, hd, hearing, hearing_disabled, high_quality, interpreter_mode, library_add, library_add_check, library_books, library_music, loop, lyrics, mic, mic_none, mic_off, missed_video_call, movie, music_video, new_releases, not_interested, note, pause, pause_circle, pause_circle_filled, pause_circle_outline, play_arrow, play_circle, play_circle_filled, play_circle_outline, play_disabled, playlist_add, playlist_add_check, playlist_add_check_circle, playlist_add_circle, playlist_play, playlist_remove, queue, queue_music, queue_play_next, radio, recent_actors, remove_from_queue, repeat, repeat_on, repeat_one, repeat_one_on, replay, replay_10, replay_30, replay_5, replay_circle_filled, sd, shuffle, shuffle_on, skip_next, skip_previous, slow_motion_video, snooze, sort_by_alpha, speed, stop, stop_circle, subscriptions, subtitles, surround_sound, video_call, video_file, video_label, video_library, video_settings, videocam, videocam_off, volume_down, volume_mute, volume_off, volume_up, web, web_asset, web_asset_off, three_p, add_ic_call, alternate_email, app_registration, business, call, call_end, call_made, call_merge, call_missed, call_missed_outgoing, call_received, call_split, cancel_presentation, cell_tower, cell_wifi, chat, chat_bubble, chat_bubble_outline, clear_all, co_present, comment, comments_disabled, contact_emergency, contact_mail, contact_phone, contacts, desktop_access_disabled, dialer_sip, dialpad, document_scanner, domain_disabled, domain_verification, duo, email, forum, forward_to_inbox, hourglass_bottom, hourglass_top, hub, import_contacts, import_export, invert_colors_off, key, key_off, list_alt, live_help, location_off, location_on, mail_lock, mail_outline, mark_chat_read, mark_chat_unread, mark_email_read, mark_email_unread, mark_unread_chat_alt, message, mobile_screen_share, more_time, nat, no_sim, pause_presentation, person_add_disabled, person_search, phone, phone_disabled, phone_enabled, phonelink_erase, phonelink_lock, phonelink_ring, phonelink_setup, portable_wifi_off, present_to_all, print_disabled, qr_code, qr_code_2, qr_code_scanner, read_more, ring_volume, rss_feed, rtt, screen_share, send_time_extension, sentiment_satisfied_alt, sip, speaker_phone, spoke, stay_current_landscape, stay_current_portrait, stay_primary_landscape, stay_primary_portrait, stop_screen_share, swap_calls, textsms, unsubscribe, voicemail, vpn_key, vpn_key_off, wifi_calling, add, add_box, add_circle, add_circle_outline, add_link, archive, attribution, backspace, ballot, biotech, block, bolt, calculate, change_circle, clear, content_copy, content_cut, content_paste, content_paste_go, content_paste_off, content_paste_search, copy_all, create, delete_sweep, deselect, drafts, dynamic_feed, file_copy, filter_list, filter_list_off, flag, flag_circle, font_download, font_download_off, forward, gesture, how_to_reg, how_to_vote, inbox, insights, inventory, inventory_2, link, link_off, low_priority, mail, markunread, move_to_inbox, next_week, outlined_flag, policy, push_pin, redo, remove, remove_circle, remove_circle_outline, reply, reply_all, report, report_gmailerrorred, report_off, save, save_alt, save_as, select_all, send, shield, sort, square_foot, stacked_bar_chart, stream, tag, text_format, unarchive, undo, upcoming, waves, web_stories, weekend, where_to_vote, one_x_mobiledata, thirty_fps, three_g_mobiledata, four_g_mobiledata, four_g_plus_mobiledata, sixty_fps, access_alarm, access_alarms, access_time, access_time_filled, ad_units, add_alarm, add_to_home_screen, air, airplane_ticket, airplanemode_active, airplanemode_inactive, aod, battery_0_bar, battery_1_bar, battery_2_bar, battery_3_bar, battery_4_bar, battery_5_bar, battery_6_bar, battery_alert, battery_charging_full, battery_full, battery_saver, battery_std, battery_unknown, bloodtype, bluetooth, bluetooth_connected, bluetooth_disabled, bluetooth_drive, bluetooth_searching, brightness_auto, brightness_high, brightness_low, brightness_medium, cable, cameraswitch, credit_score, dark_mode, data_saver_off, data_saver_on, data_usage, dataset, dataset_linked, developer_mode, device_thermostat, devices, devices_fold, discount, do_not_disturb_on_total_silence, dvr, e_mobiledata, edgesensor_high, edgesensor_low, flashlight_off, flashlight_on, fluorescent, fmd_bad, fmd_good, g_mobiledata, gpp_bad, gpp_good, gpp_maybe, gps_fixed, gps_not_fixed, gps_off, graphic_eq, grid_3x3, grid_4x4, grid_goldenratio, h_mobiledata, h_plus_mobiledata, hdr_auto, hdr_auto_select, hdr_off_select, hdr_on_select, lan, lens_blur, light_mode, location_disabled, location_searching, lte_mobiledata, lte_plus_mobiledata, macro_off, media_bluetooth_off, media_bluetooth_on, medication, medication_liquid, mobile_friendly, mobile_off, mobiledata_off, mode_night, mode_standby, monitor_heart, monitor_weight, nearby_error, nearby_off, network_cell, network_wifi, network_wifi_1_bar, network_wifi_2_bar, network_wifi_3_bar, nfc, nightlight, note_alt, password, pattern, phishing, pin, play_lesson, price_change, price_check, punch_clock, quiz, r_mobiledata, radar, remember_me, reset_tv, restart_alt, reviews, rsvp, screen_lock_landscape, screen_lock_portrait, screen_lock_rotation, screen_rotation, screen_search_desktop, screenshot, screenshot_monitor, sd_storage, security_update, security_update_good, security_update_warning, sell, send_to_mobile, settings_suggest, settings_system_daydream, share_location, shortcut, signal_cellular_0_bar, signal_cellular_4_bar, signal_cellular_alt, signal_cellular_alt_1_bar, signal_cellular_alt_2_bar, signal_cellular_connected_no_internet_0_bar, signal_cellular_connected_no_internet_4_bar, signal_cellular_no_sim, signal_cellular_nodata, signal_cellular_null, signal_cellular_off, signal_wifi_0_bar, signal_wifi_4_bar, signal_wifi_4_bar_lock, signal_wifi_bad, signal_wifi_connected_no_internet_4, signal_wifi_off, signal_wifi_statusbar_4_bar, signal_wifi_statusbar_connected_no_internet_4, signal_wifi_statusbar_null, sim_card_download, splitscreen, sports_score, ssid_chart, storage, storm, summarize, system_security_update, system_security_update_good, system_security_update_warning, task, thermostat, timer_10_select, timer_3_select, tungsten, usb, usb_off, wallpaper, water, widgets, wifi_1_bar, wifi_2_bar, wifi_calling_3, wifi_channel, wifi_find, wifi_lock, wifi_password, wifi_tethering, wifi_tethering_error, wifi_tethering_off, add_chart, add_comment, align_horizontal_center, align_horizontal_left, align_horizontal_right, align_vertical_bottom, align_vertical_center, align_vertical_top, area_chart, attach_file, attach_money, auto_graph, bar_chart, border_all, border_bottom, border_clear, border_color, border_horizontal, border_inner, border_left, border_outer, border_right, border_style, border_top, border_vertical, bubble_chart, candlestick_chart, checklist, checklist_rtl, data_array, data_object, drag_handle, draw, edit_note, format_align_center, format_align_justify, format_align_left, format_align_right, format_bold, format_clear, format_color_fill, format_color_reset, format_color_text, format_indent_decrease, format_indent_increase, format_italic, format_line_spacing, format_list_bulleted, format_list_numbered, format_list_numbered_rtl, format_paint, format_quote, format_shapes, format_size, format_strikethrough, format_textdirection_l_to_r, format_textdirection_r_to_l, format_underlined, functions, height, hexagon, highlight, horizontal_distribute, horizontal_rule, insert_chart, insert_chart_outlined, insert_comment, insert_drive_file, insert_emoticon, insert_invitation, insert_link, insert_page_break, insert_photo, line_axis, linear_scale, margin, merge_type, mode, mode_comment, mode_edit, mode_edit_outline, monetization_on, money_off, money_off_csred, move_down, move_up, multiline_chart, notes, numbers, padding, pentagon, pie_chart, pie_chart_outline, polyline, post_add, publish, query_stats, rectangle, scatter_plot, schema, score, shape_line, short_text, show_chart, space_bar, square, stacked_line_chart, strikethrough_s, subscript, superscript, table_chart, table_rows, text_decrease, text_fields, text_increase, title, type_specimen, vertical_align_bottom, vertical_align_center, vertical_align_top, vertical_distribute, wrap_text, approval, attach_email, attachment, cloud, cloud_circle, cloud_done, cloud_download, cloud_off, cloud_queue, cloud_sync, cloud_upload, create_new_folder, difference, download, download_done, download_for_offline, downloading, drive_file_move, drive_file_move_rtl, drive_file_rename_outline, drive_folder_upload, file_download, file_download_done, file_download_off, file_open, file_upload, folder, folder_copy, folder_delete, folder_off, folder_open, folder_shared, folder_zip, format_overline, grid_view, newspaper, request_quote, rule_folder, snippet_folder, text_snippet, topic, upload, upload_file, workspaces, adf_scanner, browser_not_supported, browser_updated, cast, cast_connected, cast_for_education, computer, connected_tv, desktop_mac, desktop_windows, developer_board, developer_board_off, device_hub, device_unknown, devices_other, dock, earbuds, earbuds_battery, gamepad, headphones, headphones_battery, headset, headset_mic, headset_off, home_max, home_mini, keyboard, keyboard_alt, keyboard_arrow_down, keyboard_arrow_left, keyboard_arrow_right, keyboard_arrow_up, keyboard_backspace, keyboard_capslock, keyboard_command_key, keyboard_control_key, keyboard_double_arrow_down, keyboard_double_arrow_left, keyboard_double_arrow_right, keyboard_double_arrow_up, keyboard_hide, keyboard_option_key, keyboard_return, keyboard_tab, keyboard_voice, laptop, laptop_chromebook, laptop_mac, laptop_windows, memory, monitor, mouse, phone_android, phone_iphone, phonelink, phonelink_off, point_of_sale, power_input, router, scanner, security, sim_card, smart_display, smart_screen, smart_toy, smartphone, speaker, speaker_group, start, tablet, tablet_android, tablet_mac, toys, tv, videogame_asset, videogame_asset_off, watch, watch_off, auto_mode, blinds, blinds_closed, broadcast_on_home, broadcast_on_personal, curtains, curtains_closed, electric_bolt, electric_meter, energy_savings_leaf, gas_meter, heat_pump, mode_fan_off, nest_cam_wired_stand, oil_barrel, propane, propane_tank, roller_shades, roller_shades_closed, sensor_door, sensor_occupied, sensor_window, shield_moon, solar_power, vertical_shades, vertical_shades_closed, wind_power, ten_mp, eleven_mp, twelve_mp, thirteen_mp, fourteen_mp, fifteen_mp, sixteen_mp, seventeen_mp, eighteen_mp, nineteen_mp, twenty_mp, twenty_one_mp, twenty_two_mp, twenty_three_mp, twenty_four_mp, two_mp, thirty_fps_select, three_mp, four_mp, five_mp, sixty_fps_select, six_mp, seven_mp, eight_mp, nine_mp, add_a_photo, add_photo_alternate, add_to_photos, adjust, animation, assistant, assistant_photo, audiotrack, auto_awesome, auto_awesome_mosaic, auto_awesome_motion, auto_fix_high, auto_fix_normal, auto_fix_off, auto_stories, autofps_select, bedtime, bedtime_off, blur_circular, blur_linear, blur_off, blur_on, brightness_1, brightness_2, brightness_3, brightness_4, brightness_5, brightness_6, brightness_7, broken_image, brush, burst_mode, camera, camera_alt, camera_front, camera_rear, camera_roll, cases, center_focus_strong, center_focus_weak, circle, collections, collections_bookmark, color_lens, colorize, compare, contrast, control_point, control_point_duplicate, crop, crop_16_9, crop_3_2, crop_5_4, crop_7_5, crop_din, crop_free, crop_landscape, crop_original, crop_portrait, crop_rotate, crop_square, currency_bitcoin, currency_franc, currency_lira, currency_pound, currency_ruble, currency_rupee, currency_yen, currency_yuan, deblur, dehaze, details, dirty_lens, edit, euro, exposure, exposure_neg_1, exposure_neg_2, exposure_plus_1, exposure_plus_2, exposure_zero, face_retouching_natural, face_retouching_off, filter, filter_1, filter_2, filter_3, filter_4, filter_5, filter_6, filter_7, filter_8, filter_9, filter_9_plus, filter_b_and_w, filter_center_focus, filter_drama, filter_frames, filter_hdr, filter_none, filter_tilt_shift, filter_vintage, flare, flash_auto, flash_off, flash_on, flip, flip_camera_android, flip_camera_ios, gradient, grain, grid_off, grid_on, hdr_enhanced_select, hdr_off, hdr_on, hdr_plus, hdr_strong, hdr_weak, healing, hevc, hide_image, image, image_aspect_ratio, image_not_supported, image_search, incomplete_circle, iso, landscape, leak_add, leak_remove, lens, linked_camera, logo_dev, looks, looks_3, looks_4, looks_5, looks_6, looks_one, looks_two, loupe, mic_external_off, mic_external_on, monochrome_photos, motion_photos_auto, motion_photos_off, motion_photos_on, motion_photos_pause, motion_photos_paused, movie_creation, movie_filter, mp, music_note, music_off, nature, nature_people, navigate_before, navigate_next, palette, panorama, panorama_fish_eye, panorama_horizontal, panorama_horizontal_select, panorama_photosphere, panorama_photosphere_select, panorama_vertical, panorama_vertical_select, panorama_wide_angle, panorama_wide_angle_select, photo, photo_album, photo_camera, photo_camera_back, photo_camera_front, photo_filter, photo_library, photo_size_select_actual, photo_size_select_large, photo_size_select_small, picture_as_pdf, portrait, raw_off, raw_on, receipt_long, remove_red_eye, rotate_90_degrees_ccw, rotate_90_degrees_cw, rotate_left, rotate_right, shutter_speed, slideshow, straighten, style, switch_camera, switch_video, tag_faces, texture, thermostat_auto, timelapse, timer, timer_10, timer_3, timer_off, tonality, transform, tune, video_camera_back, video_camera_front, video_stable, view_comfy, view_compact, vignette, vrpano, wb_auto, wb_cloudy, wb_incandescent, wb_iridescent, wb_shade, wb_sunny, wb_twilight, three_sixty, add_business, add_location, add_location_alt, add_road, agriculture, airline_stops, airlines, alt_route, atm, attractions, badge, bakery_dining, beenhere, bike_scooter, breakfast_dining, brunch_dining, bus_alert, car_crash, car_rental, car_repair, castle, category, celebration, church, cleaning_services, compass_calibration, connecting_airports, crisis_alert, delivery_dining, departure_board, design_services, diamond, dinner_dining, directions, directions_bike, directions_boat, directions_boat_filled, directions_bus, directions_bus_filled, directions_car, directions_car_filled, directions_railway, directions_railway_filled, directions_run, directions_subway, directions_subway_filled, directions_transit, directions_transit_filled, directions_walk, dry_cleaning, edit_attributes, edit_location, edit_location_alt, edit_road, egg, egg_alt, electric_bike, electric_car, electric_moped, electric_rickshaw, electric_scooter, electrical_services, emergency, emergency_recording, emergency_share, ev_station, factory, fastfood, festival, fire_hydrant_alt, fire_truck, flight, flight_class, forest, fork_left, fork_right, fort, hail, handyman, hardware, home_repair_service, hotel, hvac, icecream, kebab_dining, layers, layers_clear, liquor, local_activity, local_airport, local_atm, local_bar, local_cafe, local_car_wash, local_convenience_store, local_dining, local_drink, local_fire_department, local_florist, local_gas_station, local_grocery_store, local_hospital, local_hotel, local_laundry_service, local_library, local_mall, local_movies, local_offer, local_parking, local_pharmacy, local_phone, local_pizza, local_play, local_police, local_post_office, local_printshop, local_see, local_shipping, local_taxi, lunch_dining, map, maps_ugc, medical_information, medical_services, menu_book, merge, minor_crash, miscellaneous_services, mode_of_travel, money, moped, mosque, moving, multiple_stop, museum, my_location, navigation, near_me, near_me_disabled, nightlife, no_crash, no_meals, no_transfer, not_listed_location, park, pedal_bike, person_pin, person_pin_circle, pest_control, pest_control_rodent, pin_drop, place, plumbing, railway_alert, ramen_dining, ramp_left, ramp_right, rate_review, remove_road, restaurant, restaurant_menu, roundabout_left, roundabout_right, route, run_circle, safety_check, sailing, satellite, screen_rotation_alt, set_meal, signpost, snowmobile, sos, soup_kitchen, stadium, store_mall_directory, straight, streetview, subway, synagogue, takeout_dining, taxi_alert, temple_buddhist, temple_hindu, terrain, theater_comedy, tire_repair, traffic, train, tram, transfer_within_a_station, transit_enterexit, trip_origin, turn_left, turn_right, turn_sharp_left, turn_sharp_right, turn_slight_left, turn_slight_right, two_wheeler, u_turn_left, u_turn_right, volunteer_activism, warehouse, wine_bar, wrong_location, zoom_in_map, zoom_out_map, add_home_work, app_settings_alt, apps, apps_outage, arrow_back, arrow_back_ios, arrow_back_ios_new, arrow_downward, arrow_drop_down, arrow_drop_down_circle, arrow_drop_up, arrow_forward, arrow_forward_ios, arrow_left, arrow_right, arrow_upward, assistant_direction, campaign, cancel, check, chevron_left, chevron_right, close, double_arrow, east, expand_circle_down, expand_less, expand_more, first_page, fullscreen, fullscreen_exit, home_work, last_page, legend_toggle, maps_home_work, menu, menu_open, more_horiz, more_vert, north, north_east, north_west, offline_share, payments, pivot_table_chart, refresh, south, south_east, south_west, subdirectory_arrow_left, subdirectory_arrow_right, switch_left, switch_right, unfold_less, unfold_more, waterfall_chart, west, account_tree, adb, airline_seat_flat, airline_seat_flat_angled, airline_seat_individual_suite, airline_seat_legroom_extra, airline_seat_legroom_normal, airline_seat_legroom_reduced, airline_seat_recline_extra, airline_seat_recline_normal, bluetooth_audio, confirmation_number, directions_off, disc_full, do_disturb, do_disturb_alt, do_disturb_off, do_disturb_on, do_not_disturb, do_not_disturb_alt, do_not_disturb_off, do_not_disturb_on, drive_eta, enhanced_encryption, event_available, event_busy, event_note, folder_special, imagesearch_roller, live_tv, mms, more, network_check, network_locked, no_encryption, no_encryption_gmailerrorred, ondemand_video, personal_video, phone_bluetooth_speaker, phone_callback, phone_forwarded, phone_locked, phone_missed, phone_paused, power, power_off, priority_high, running_with_errors, sd_card, sd_card_alert, sim_card_alert, sms, sms_failed, support_agent, sync, sync_disabled, sync_lock, sync_problem, system_update, tap_and_play, time_to_leave, tv_off, vibration, video_chat, voice_chat, vpn_lock, wc, wifi, wifi_off, ac_unit, airport_shuttle, all_inclusive, apartment, baby_changing_station, backpack, balcony, bathtub, beach_access, bento, bungalow, business_center, cabin, carpenter, casino, chalet, charging_station, checkroom, child_care, child_friendly, corporate_fare, cottage, countertops, crib, desk, do_not_step, do_not_touch, dry, elevator, escalator, escalator_warning, family_restroom, fence, fire_extinguisher, fitness_center, food_bank, foundation, free_breakfast, gite, golf_course, grass, holiday_village, hot_tub, house, house_siding, houseboat, iron, kitchen, meeting_room, microwave, night_shelter, no_backpack, no_cell, no_drinks, no_flash, no_food, no_meeting_room, no_photography, no_stroller, other_houses, pool, rice_bowl, roofing, room_preferences, room_service, rv_hookup, smoke_free, smoking_rooms, soap, spa, sports_bar, stairs, storefront, stroller, tapas, tty, umbrella, vape_free, vaping_rooms, villa, wash, water_damage, wheelchair_pickup, bathroom, bed, bedroom_baby, bedroom_child, bedroom_parent, blender, camera_indoor, camera_outdoor, chair, chair_alt, coffee, coffee_maker, dining, door_back, door_front, door_sliding, doorbell, feed, flatware, garage, light, living, manage_search, podcasts, shower, table_bar, table_restaurant, window, yard, eighteen_up_rating, six_ft_apart, add_moderator, add_reaction, architecture, assist_walker, back_hand, blind, boy, cake, catching_pokemon, clean_hands, co2, compost, connect_without_contact, construction, cookie, coronavirus, cruelty_free, cyclone, deck, diversity_1, diversity_2, diversity_3, domain, domain_add, downhill_skiing, edit_notifications, elderly, elderly_woman, emoji_emotions, emoji_events, emoji_food_beverage, emoji_nature, emoji_objects, emoji_people, emoji_symbols, emoji_transportation, engineering, face_2, face_3, face_4, face_5, face_6, female, fireplace, fitbit, flood, follow_the_signs, front_hand, girl, group, group_add, group_off, group_remove, groups, groups_2, groups_3, handshake, health_and_safety, heart_broken, hiking, history_edu, hive, ice_skating, interests, ios_share, kayaking, king_bed, kitesurfing, landslide, location_city, luggage, male, man, man_2, man_3, man_4, masks, military_tech, mood, mood_bad, nights_stay, no_adult_content, no_luggage, nordic_walking, notification_add, notifications, notifications_active, notifications_none, notifications_off, notifications_paused, outdoor_grill, pages, paragliding, party_mode, people, people_alt, people_outline, person, person_2, person_3, person_4, person_add, person_add_alt, person_add_alt_1, person_off, person_outline, person_remove, person_remove_alt_1, personal_injury, piano, piano_off, pix, plus_one, poll, precision_manufacturing, psychology, psychology_alt, public, public_off, real_estate_agent, recommend, recycling, reduce_capacity, remove_moderator, roller_skating, safety_divider, sanitizer, scale, school, science, scoreboard, scuba_diving, self_improvement, sentiment_dissatisfied, sentiment_neutral, sentiment_satisfied, sentiment_very_dissatisfied, sentiment_very_satisfied, severe_cold, share, sick, sign_language, single_bed, skateboarding, sledding, snowboarding, snowshoeing, social_distance, south_america, sports, sports_baseball, sports_basketball, sports_cricket, sports_esports, sports_football, sports_golf, sports_gymnastics, sports_handball, sports_hockey, sports_kabaddi, sports_martial_arts, sports_mma, sports_motorsports, sports_rugby, sports_soccer, sports_tennis, sports_volleyball, surfing, switch_account, thumb_down_alt, thumb_up_alt, thunderstorm, tornado, transgender, travel_explore, tsunami, vaccines, volcano, wallet, water_drop, waving_hand, whatshot, woman, woman_2, workspace_premium, check_box, check_box_outline_blank, indeterminate_check_box, radio_button_checked, radio_button_unchecked, star, star_border, star_border_purple500, star_half, star_outline, star_purple500, toggle_off, toggle_on, values_
-}


import Elm
import Elm.Annotation as Type


{-| The name of this module. -}
moduleName_ : List String
moduleName_ =
    [ "Material", "Icons", "Outlined" ]


{-| one_two_three: Material.Icons.Types.Icon msg -}
one_two_three : Elm.Expression
one_two_three =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "one_two_three"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_d_rotation: Material.Icons.Types.Icon msg -}
three_d_rotation : Elm.Expression
three_d_rotation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_d_rotation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| abc: Material.Icons.Types.Icon msg -}
abc : Elm.Expression
abc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "abc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| accessibility: Material.Icons.Types.Icon msg -}
accessibility : Elm.Expression
accessibility =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "accessibility"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| accessibility_new: Material.Icons.Types.Icon msg -}
accessibility_new : Elm.Expression
accessibility_new =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "accessibility_new"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| accessible: Material.Icons.Types.Icon msg -}
accessible : Elm.Expression
accessible =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "accessible"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| accessible_forward: Material.Icons.Types.Icon msg -}
accessible_forward : Elm.Expression
accessible_forward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "accessible_forward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| account_balance: Material.Icons.Types.Icon msg -}
account_balance : Elm.Expression
account_balance =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "account_balance"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| account_balance_wallet: Material.Icons.Types.Icon msg -}
account_balance_wallet : Elm.Expression
account_balance_wallet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "account_balance_wallet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| account_box: Material.Icons.Types.Icon msg -}
account_box : Elm.Expression
account_box =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "account_box"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| account_circle: Material.Icons.Types.Icon msg -}
account_circle : Elm.Expression
account_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "account_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_card: Material.Icons.Types.Icon msg -}
add_card : Elm.Expression
add_card =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_card"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_home: Material.Icons.Types.Icon msg -}
add_home : Elm.Expression
add_home =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_home"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_shopping_cart: Material.Icons.Types.Icon msg -}
add_shopping_cart : Elm.Expression
add_shopping_cart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_shopping_cart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_task: Material.Icons.Types.Icon msg -}
add_task : Elm.Expression
add_task =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_task"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_to_drive: Material.Icons.Types.Icon msg -}
add_to_drive : Elm.Expression
add_to_drive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_to_drive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| addchart: Material.Icons.Types.Icon msg -}
addchart : Elm.Expression
addchart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "addchart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| admin_panel_settings: Material.Icons.Types.Icon msg -}
admin_panel_settings : Elm.Expression
admin_panel_settings =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "admin_panel_settings"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ads_click: Material.Icons.Types.Icon msg -}
ads_click : Elm.Expression
ads_click =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ads_click"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alarm: Material.Icons.Types.Icon msg -}
alarm : Elm.Expression
alarm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alarm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alarm_add: Material.Icons.Types.Icon msg -}
alarm_add : Elm.Expression
alarm_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alarm_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alarm_off: Material.Icons.Types.Icon msg -}
alarm_off : Elm.Expression
alarm_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alarm_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alarm_on: Material.Icons.Types.Icon msg -}
alarm_on : Elm.Expression
alarm_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alarm_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| all_inbox: Material.Icons.Types.Icon msg -}
all_inbox : Elm.Expression
all_inbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "all_inbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| all_out: Material.Icons.Types.Icon msg -}
all_out : Elm.Expression
all_out =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "all_out"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| analytics: Material.Icons.Types.Icon msg -}
analytics : Elm.Expression
analytics =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "analytics"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| anchor: Material.Icons.Types.Icon msg -}
anchor : Elm.Expression
anchor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "anchor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| android: Material.Icons.Types.Icon msg -}
android : Elm.Expression
android =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "android"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| announcement: Material.Icons.Types.Icon msg -}
announcement : Elm.Expression
announcement =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "announcement"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| api: Material.Icons.Types.Icon msg -}
api : Elm.Expression
api =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "api"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| app_blocking: Material.Icons.Types.Icon msg -}
app_blocking : Elm.Expression
app_blocking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "app_blocking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| app_shortcut: Material.Icons.Types.Icon msg -}
app_shortcut : Elm.Expression
app_shortcut =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "app_shortcut"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_circle_down: Material.Icons.Types.Icon msg -}
arrow_circle_down : Elm.Expression
arrow_circle_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_circle_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_circle_left: Material.Icons.Types.Icon msg -}
arrow_circle_left : Elm.Expression
arrow_circle_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_circle_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_circle_right: Material.Icons.Types.Icon msg -}
arrow_circle_right : Elm.Expression
arrow_circle_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_circle_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_circle_up: Material.Icons.Types.Icon msg -}
arrow_circle_up : Elm.Expression
arrow_circle_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_circle_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_outward: Material.Icons.Types.Icon msg -}
arrow_outward : Elm.Expression
arrow_outward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_outward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_right_alt: Material.Icons.Types.Icon msg -}
arrow_right_alt : Elm.Expression
arrow_right_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_right_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| article: Material.Icons.Types.Icon msg -}
article : Elm.Expression
article =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "article"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| aspect_ratio: Material.Icons.Types.Icon msg -}
aspect_ratio : Elm.Expression
aspect_ratio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "aspect_ratio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assessment: Material.Icons.Types.Icon msg -}
assessment : Elm.Expression
assessment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assessment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment: Material.Icons.Types.Icon msg -}
assignment : Elm.Expression
assignment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment_ind: Material.Icons.Types.Icon msg -}
assignment_ind : Elm.Expression
assignment_ind =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment_ind"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment_late: Material.Icons.Types.Icon msg -}
assignment_late : Elm.Expression
assignment_late =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment_late"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment_return: Material.Icons.Types.Icon msg -}
assignment_return : Elm.Expression
assignment_return =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment_return"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment_returned: Material.Icons.Types.Icon msg -}
assignment_returned : Elm.Expression
assignment_returned =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment_returned"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assignment_turned_in: Material.Icons.Types.Icon msg -}
assignment_turned_in : Elm.Expression
assignment_turned_in =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assignment_turned_in"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assured_workload: Material.Icons.Types.Icon msg -}
assured_workload : Elm.Expression
assured_workload =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assured_workload"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| autorenew: Material.Icons.Types.Icon msg -}
autorenew : Elm.Expression
autorenew =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "autorenew"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| backup: Material.Icons.Types.Icon msg -}
backup : Elm.Expression
backup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "backup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| backup_table: Material.Icons.Types.Icon msg -}
backup_table : Elm.Expression
backup_table =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "backup_table"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| balance: Material.Icons.Types.Icon msg -}
balance : Elm.Expression
balance =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "balance"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| batch_prediction: Material.Icons.Types.Icon msg -}
batch_prediction : Elm.Expression
batch_prediction =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "batch_prediction"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| book: Material.Icons.Types.Icon msg -}
book : Elm.Expression
book =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "book"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| book_online: Material.Icons.Types.Icon msg -}
book_online : Elm.Expression
book_online =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "book_online"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmark: Material.Icons.Types.Icon msg -}
bookmark : Elm.Expression
bookmark =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmark"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmark_add: Material.Icons.Types.Icon msg -}
bookmark_add : Elm.Expression
bookmark_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmark_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmark_added: Material.Icons.Types.Icon msg -}
bookmark_added : Elm.Expression
bookmark_added =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmark_added"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmark_border: Material.Icons.Types.Icon msg -}
bookmark_border : Elm.Expression
bookmark_border =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmark_border"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmark_remove: Material.Icons.Types.Icon msg -}
bookmark_remove : Elm.Expression
bookmark_remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmark_remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bookmarks: Material.Icons.Types.Icon msg -}
bookmarks : Elm.Expression
bookmarks =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bookmarks"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| browse_gallery: Material.Icons.Types.Icon msg -}
browse_gallery : Elm.Expression
browse_gallery =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "browse_gallery"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bug_report: Material.Icons.Types.Icon msg -}
bug_report : Elm.Expression
bug_report =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bug_report"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| build: Material.Icons.Types.Icon msg -}
build : Elm.Expression
build =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "build"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| build_circle: Material.Icons.Types.Icon msg -}
build_circle : Elm.Expression
build_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "build_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cached: Material.Icons.Types.Icon msg -}
cached : Elm.Expression
cached =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cached"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calendar_month: Material.Icons.Types.Icon msg -}
calendar_month : Elm.Expression
calendar_month =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calendar_month"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calendar_today: Material.Icons.Types.Icon msg -}
calendar_today : Elm.Expression
calendar_today =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calendar_today"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calendar_view_day: Material.Icons.Types.Icon msg -}
calendar_view_day : Elm.Expression
calendar_view_day =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calendar_view_day"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calendar_view_month: Material.Icons.Types.Icon msg -}
calendar_view_month : Elm.Expression
calendar_view_month =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calendar_view_month"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calendar_view_week: Material.Icons.Types.Icon msg -}
calendar_view_week : Elm.Expression
calendar_view_week =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calendar_view_week"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_enhance: Material.Icons.Types.Icon msg -}
camera_enhance : Elm.Expression
camera_enhance =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_enhance"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cancel_schedule_send: Material.Icons.Types.Icon msg -}
cancel_schedule_send : Elm.Expression
cancel_schedule_send =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cancel_schedule_send"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| card_giftcard: Material.Icons.Types.Icon msg -}
card_giftcard : Elm.Expression
card_giftcard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "card_giftcard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| card_membership: Material.Icons.Types.Icon msg -}
card_membership : Elm.Expression
card_membership =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "card_membership"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| card_travel: Material.Icons.Types.Icon msg -}
card_travel : Elm.Expression
card_travel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "card_travel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| change_history: Material.Icons.Types.Icon msg -}
change_history : Elm.Expression
change_history =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "change_history"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| check_circle: Material.Icons.Types.Icon msg -}
check_circle : Elm.Expression
check_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "check_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| check_circle_outline: Material.Icons.Types.Icon msg -}
check_circle_outline : Elm.Expression
check_circle_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "check_circle_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chrome_reader_mode: Material.Icons.Types.Icon msg -}
chrome_reader_mode : Elm.Expression
chrome_reader_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chrome_reader_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| circle_notifications: Material.Icons.Types.Icon msg -}
circle_notifications : Elm.Expression
circle_notifications =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "circle_notifications"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| class: Material.Icons.Types.Icon msg -}
class : Elm.Expression
class =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "class"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| close_fullscreen: Material.Icons.Types.Icon msg -}
close_fullscreen : Elm.Expression
close_fullscreen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "close_fullscreen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| code: Material.Icons.Types.Icon msg -}
code : Elm.Expression
code =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "code"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| code_off: Material.Icons.Types.Icon msg -}
code_off : Elm.Expression
code_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "code_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| comment_bank: Material.Icons.Types.Icon msg -}
comment_bank : Elm.Expression
comment_bank =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "comment_bank"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| commit: Material.Icons.Types.Icon msg -}
commit : Elm.Expression
commit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "commit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| commute: Material.Icons.Types.Icon msg -}
commute : Elm.Expression
commute =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "commute"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| compare_arrows: Material.Icons.Types.Icon msg -}
compare_arrows : Elm.Expression
compare_arrows =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "compare_arrows"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| compress: Material.Icons.Types.Icon msg -}
compress : Elm.Expression
compress =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "compress"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contact_page: Material.Icons.Types.Icon msg -}
contact_page : Elm.Expression
contact_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contact_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contact_support: Material.Icons.Types.Icon msg -}
contact_support : Elm.Expression
contact_support =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contact_support"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contactless: Material.Icons.Types.Icon msg -}
contactless : Elm.Expression
contactless =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contactless"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| copyright: Material.Icons.Types.Icon msg -}
copyright : Elm.Expression
copyright =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "copyright"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| credit_card: Material.Icons.Types.Icon msg -}
credit_card : Elm.Expression
credit_card =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "credit_card"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| credit_card_off: Material.Icons.Types.Icon msg -}
credit_card_off : Elm.Expression
credit_card_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "credit_card_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| css: Material.Icons.Types.Icon msg -}
css : Elm.Expression
css =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "css"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_exchange: Material.Icons.Types.Icon msg -}
currency_exchange : Elm.Expression
currency_exchange =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_exchange"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dangerous: Material.Icons.Types.Icon msg -}
dangerous : Elm.Expression
dangerous =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dangerous"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dashboard: Material.Icons.Types.Icon msg -}
dashboard : Elm.Expression
dashboard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dashboard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dashboard_customize: Material.Icons.Types.Icon msg -}
dashboard_customize : Elm.Expression
dashboard_customize =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dashboard_customize"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_exploration: Material.Icons.Types.Icon msg -}
data_exploration : Elm.Expression
data_exploration =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_exploration"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_thresholding: Material.Icons.Types.Icon msg -}
data_thresholding : Elm.Expression
data_thresholding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_thresholding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| date_range: Material.Icons.Types.Icon msg -}
date_range : Elm.Expression
date_range =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "date_range"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| delete: Material.Icons.Types.Icon msg -}
delete : Elm.Expression
delete =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "delete"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| delete_forever: Material.Icons.Types.Icon msg -}
delete_forever : Elm.Expression
delete_forever =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "delete_forever"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| delete_outline: Material.Icons.Types.Icon msg -}
delete_outline : Elm.Expression
delete_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "delete_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| density_large: Material.Icons.Types.Icon msg -}
density_large : Elm.Expression
density_large =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "density_large"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| density_medium: Material.Icons.Types.Icon msg -}
density_medium : Elm.Expression
density_medium =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "density_medium"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| density_small: Material.Icons.Types.Icon msg -}
density_small : Elm.Expression
density_small =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "density_small"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| description: Material.Icons.Types.Icon msg -}
description : Elm.Expression
description =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "description"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| disabled_by_default: Material.Icons.Types.Icon msg -}
disabled_by_default : Elm.Expression
disabled_by_default =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "disabled_by_default"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| disabled_visible: Material.Icons.Types.Icon msg -}
disabled_visible : Elm.Expression
disabled_visible =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "disabled_visible"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| display_settings: Material.Icons.Types.Icon msg -}
display_settings : Elm.Expression
display_settings =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "display_settings"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dns: Material.Icons.Types.Icon msg -}
dns : Elm.Expression
dns =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dns"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| done: Material.Icons.Types.Icon msg -}
done : Elm.Expression
done =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "done"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| done_all: Material.Icons.Types.Icon msg -}
done_all : Elm.Expression
done_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "done_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| done_outline: Material.Icons.Types.Icon msg -}
done_outline : Elm.Expression
done_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "done_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| donut_large: Material.Icons.Types.Icon msg -}
donut_large : Elm.Expression
donut_large =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "donut_large"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| donut_small: Material.Icons.Types.Icon msg -}
donut_small : Elm.Expression
donut_small =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "donut_small"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drag_indicator: Material.Icons.Types.Icon msg -}
drag_indicator : Elm.Expression
drag_indicator =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drag_indicator"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dynamic_form: Material.Icons.Types.Icon msg -}
dynamic_form : Elm.Expression
dynamic_form =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dynamic_form"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_calendar: Material.Icons.Types.Icon msg -}
edit_calendar : Elm.Expression
edit_calendar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_calendar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_off: Material.Icons.Types.Icon msg -}
edit_off : Elm.Expression
edit_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eject: Material.Icons.Types.Icon msg -}
eject : Elm.Expression
eject =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eject"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| euro_symbol: Material.Icons.Types.Icon msg -}
euro_symbol : Elm.Expression
euro_symbol =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "euro_symbol"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event: Material.Icons.Types.Icon msg -}
event : Elm.Expression
event =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event_repeat: Material.Icons.Types.Icon msg -}
event_repeat : Elm.Expression
event_repeat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event_repeat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event_seat: Material.Icons.Types.Icon msg -}
event_seat : Elm.Expression
event_seat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event_seat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exit_to_app: Material.Icons.Types.Icon msg -}
exit_to_app : Elm.Expression
exit_to_app =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exit_to_app"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| expand: Material.Icons.Types.Icon msg -}
expand : Elm.Expression
expand =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "expand"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| explore: Material.Icons.Types.Icon msg -}
explore : Elm.Expression
explore =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "explore"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| explore_off: Material.Icons.Types.Icon msg -}
explore_off : Elm.Expression
explore_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "explore_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| extension: Material.Icons.Types.Icon msg -}
extension : Elm.Expression
extension =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "extension"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| extension_off: Material.Icons.Types.Icon msg -}
extension_off : Elm.Expression
extension_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "extension_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face: Material.Icons.Types.Icon msg -}
face : Elm.Expression
face =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fact_check: Material.Icons.Types.Icon msg -}
fact_check : Elm.Expression
fact_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fact_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| favorite: Material.Icons.Types.Icon msg -}
favorite : Elm.Expression
favorite =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "favorite"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| favorite_border: Material.Icons.Types.Icon msg -}
favorite_border : Elm.Expression
favorite_border =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "favorite_border"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fax: Material.Icons.Types.Icon msg -}
fax : Elm.Expression
fax =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fax"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| feedback: Material.Icons.Types.Icon msg -}
feedback : Elm.Expression
feedback =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "feedback"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_present: Material.Icons.Types.Icon msg -}
file_present : Elm.Expression
file_present =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_present"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_alt: Material.Icons.Types.Icon msg -}
filter_alt : Elm.Expression
filter_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_alt_off: Material.Icons.Types.Icon msg -}
filter_alt_off : Elm.Expression
filter_alt_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_alt_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| find_in_page: Material.Icons.Types.Icon msg -}
find_in_page : Elm.Expression
find_in_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "find_in_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| find_replace: Material.Icons.Types.Icon msg -}
find_replace : Elm.Expression
find_replace =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "find_replace"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fingerprint: Material.Icons.Types.Icon msg -}
fingerprint : Elm.Expression
fingerprint =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fingerprint"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fit_screen: Material.Icons.Types.Icon msg -}
fit_screen : Elm.Expression
fit_screen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fit_screen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flaky: Material.Icons.Types.Icon msg -}
flaky : Elm.Expression
flaky =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flaky"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flight_land: Material.Icons.Types.Icon msg -}
flight_land : Elm.Expression
flight_land =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flight_land"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flight_takeoff: Material.Icons.Types.Icon msg -}
flight_takeoff : Elm.Expression
flight_takeoff =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flight_takeoff"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flip_to_back: Material.Icons.Types.Icon msg -}
flip_to_back : Elm.Expression
flip_to_back =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flip_to_back"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flip_to_front: Material.Icons.Types.Icon msg -}
flip_to_front : Elm.Expression
flip_to_front =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flip_to_front"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flutter_dash: Material.Icons.Types.Icon msg -}
flutter_dash : Elm.Expression
flutter_dash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flutter_dash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| free_cancellation: Material.Icons.Types.Icon msg -}
free_cancellation : Elm.Expression
free_cancellation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "free_cancellation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| g_translate: Material.Icons.Types.Icon msg -}
g_translate : Elm.Expression
g_translate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "g_translate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gavel: Material.Icons.Types.Icon msg -}
gavel : Elm.Expression
gavel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gavel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| generating_tokens: Material.Icons.Types.Icon msg -}
generating_tokens : Elm.Expression
generating_tokens =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "generating_tokens"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| get_app: Material.Icons.Types.Icon msg -}
get_app : Elm.Expression
get_app =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "get_app"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gif: Material.Icons.Types.Icon msg -}
gif : Elm.Expression
gif =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gif"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gif_box: Material.Icons.Types.Icon msg -}
gif_box : Elm.Expression
gif_box =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gif_box"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grade: Material.Icons.Types.Icon msg -}
grade : Elm.Expression
grade =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grade"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grading: Material.Icons.Types.Icon msg -}
grading : Elm.Expression
grading =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grading"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| group_work: Material.Icons.Types.Icon msg -}
group_work : Elm.Expression
group_work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "group_work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| help: Material.Icons.Types.Icon msg -}
help : Elm.Expression
help =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "help"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| help_center: Material.Icons.Types.Icon msg -}
help_center : Elm.Expression
help_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "help_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| help_outline: Material.Icons.Types.Icon msg -}
help_outline : Elm.Expression
help_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "help_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hide_source: Material.Icons.Types.Icon msg -}
hide_source : Elm.Expression
hide_source =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hide_source"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| highlight_alt: Material.Icons.Types.Icon msg -}
highlight_alt : Elm.Expression
highlight_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "highlight_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| highlight_off: Material.Icons.Types.Icon msg -}
highlight_off : Elm.Expression
highlight_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "highlight_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| history: Material.Icons.Types.Icon msg -}
history : Elm.Expression
history =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "history"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| history_toggle_off: Material.Icons.Types.Icon msg -}
history_toggle_off : Elm.Expression
history_toggle_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "history_toggle_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hls: Material.Icons.Types.Icon msg -}
hls : Elm.Expression
hls =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hls"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hls_off: Material.Icons.Types.Icon msg -}
hls_off : Elm.Expression
hls_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hls_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| home: Material.Icons.Types.Icon msg -}
home : Elm.Expression
home =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "home"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| horizontal_split: Material.Icons.Types.Icon msg -}
horizontal_split : Elm.Expression
horizontal_split =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "horizontal_split"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hotel_class: Material.Icons.Types.Icon msg -}
hotel_class : Elm.Expression
hotel_class =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hotel_class"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hourglass_disabled: Material.Icons.Types.Icon msg -}
hourglass_disabled : Elm.Expression
hourglass_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hourglass_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hourglass_empty: Material.Icons.Types.Icon msg -}
hourglass_empty : Elm.Expression
hourglass_empty =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hourglass_empty"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hourglass_full: Material.Icons.Types.Icon msg -}
hourglass_full : Elm.Expression
hourglass_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hourglass_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| html: Material.Icons.Types.Icon msg -}
html : Elm.Expression
html =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "html"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| http: Material.Icons.Types.Icon msg -}
http : Elm.Expression
http =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "http"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| https: Material.Icons.Types.Icon msg -}
https : Elm.Expression
https =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "https"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| important_devices: Material.Icons.Types.Icon msg -}
important_devices : Elm.Expression
important_devices =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "important_devices"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| info: Material.Icons.Types.Icon msg -}
info : Elm.Expression
info =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "info"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| input: Material.Icons.Types.Icon msg -}
input : Elm.Expression
input =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "input"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| install_desktop: Material.Icons.Types.Icon msg -}
install_desktop : Elm.Expression
install_desktop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "install_desktop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| install_mobile: Material.Icons.Types.Icon msg -}
install_mobile : Elm.Expression
install_mobile =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "install_mobile"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| integration_instructions: Material.Icons.Types.Icon msg -}
integration_instructions : Elm.Expression
integration_instructions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "integration_instructions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| invert_colors: Material.Icons.Types.Icon msg -}
invert_colors : Elm.Expression
invert_colors =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "invert_colors"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| javascript: Material.Icons.Types.Icon msg -}
javascript : Elm.Expression
javascript =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "javascript"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| join_full: Material.Icons.Types.Icon msg -}
join_full : Elm.Expression
join_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "join_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| join_inner: Material.Icons.Types.Icon msg -}
join_inner : Elm.Expression
join_inner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "join_inner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| join_left: Material.Icons.Types.Icon msg -}
join_left : Elm.Expression
join_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "join_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| join_right: Material.Icons.Types.Icon msg -}
join_right : Elm.Expression
join_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "join_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| label: Material.Icons.Types.Icon msg -}
label : Elm.Expression
label =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "label"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| label_important: Material.Icons.Types.Icon msg -}
label_important : Elm.Expression
label_important =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "label_important"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| label_off: Material.Icons.Types.Icon msg -}
label_off : Elm.Expression
label_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "label_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| language: Material.Icons.Types.Icon msg -}
language : Elm.Expression
language =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "language"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| launch: Material.Icons.Types.Icon msg -}
launch : Elm.Expression
launch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "launch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| leaderboard: Material.Icons.Types.Icon msg -}
leaderboard : Elm.Expression
leaderboard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "leaderboard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lightbulb: Material.Icons.Types.Icon msg -}
lightbulb : Elm.Expression
lightbulb =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lightbulb"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lightbulb_circle: Material.Icons.Types.Icon msg -}
lightbulb_circle : Elm.Expression
lightbulb_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lightbulb_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| line_style: Material.Icons.Types.Icon msg -}
line_style : Elm.Expression
line_style =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "line_style"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| line_weight: Material.Icons.Types.Icon msg -}
line_weight : Elm.Expression
line_weight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "line_weight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| list: Material.Icons.Types.Icon msg -}
list : Elm.Expression
list =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "list"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lock: Material.Icons.Types.Icon msg -}
lock : Elm.Expression
lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lock_clock: Material.Icons.Types.Icon msg -}
lock_clock : Elm.Expression
lock_clock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lock_clock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lock_open: Material.Icons.Types.Icon msg -}
lock_open : Elm.Expression
lock_open =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lock_open"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lock_person: Material.Icons.Types.Icon msg -}
lock_person : Elm.Expression
lock_person =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lock_person"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lock_reset: Material.Icons.Types.Icon msg -}
lock_reset : Elm.Expression
lock_reset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lock_reset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| login: Material.Icons.Types.Icon msg -}
login : Elm.Expression
login =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "login"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| logout: Material.Icons.Types.Icon msg -}
logout : Elm.Expression
logout =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "logout"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| loyalty: Material.Icons.Types.Icon msg -}
loyalty : Elm.Expression
loyalty =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "loyalty"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| manage_accounts: Material.Icons.Types.Icon msg -}
manage_accounts : Elm.Expression
manage_accounts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "manage_accounts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| manage_history: Material.Icons.Types.Icon msg -}
manage_history : Elm.Expression
manage_history =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "manage_history"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_as_unread: Material.Icons.Types.Icon msg -}
mark_as_unread : Elm.Expression
mark_as_unread =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_as_unread"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| markunread_mailbox: Material.Icons.Types.Icon msg -}
markunread_mailbox : Elm.Expression
markunread_mailbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "markunread_mailbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| maximize: Material.Icons.Types.Icon msg -}
maximize : Elm.Expression
maximize =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "maximize"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mediation: Material.Icons.Types.Icon msg -}
mediation : Elm.Expression
mediation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mediation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| minimize: Material.Icons.Types.Icon msg -}
minimize : Elm.Expression
minimize =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "minimize"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| model_training: Material.Icons.Types.Icon msg -}
model_training : Elm.Expression
model_training =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "model_training"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_ping: Material.Icons.Types.Icon msg -}
network_ping : Elm.Expression
network_ping =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_ping"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| new_label: Material.Icons.Types.Icon msg -}
new_label : Elm.Expression
new_label =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "new_label"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| next_plan: Material.Icons.Types.Icon msg -}
next_plan : Elm.Expression
next_plan =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "next_plan"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nightlight_round: Material.Icons.Types.Icon msg -}
nightlight_round : Elm.Expression
nightlight_round =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nightlight_round"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_accounts: Material.Icons.Types.Icon msg -}
no_accounts : Elm.Expression
no_accounts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_accounts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| noise_aware: Material.Icons.Types.Icon msg -}
noise_aware : Elm.Expression
noise_aware =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "noise_aware"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| noise_control_off: Material.Icons.Types.Icon msg -}
noise_control_off : Elm.Expression
noise_control_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "noise_control_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| not_accessible: Material.Icons.Types.Icon msg -}
not_accessible : Elm.Expression
not_accessible =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "not_accessible"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| not_started: Material.Icons.Types.Icon msg -}
not_started : Elm.Expression
not_started =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "not_started"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| note_add: Material.Icons.Types.Icon msg -}
note_add : Elm.Expression
note_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "note_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| offline_bolt: Material.Icons.Types.Icon msg -}
offline_bolt : Elm.Expression
offline_bolt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "offline_bolt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| offline_pin: Material.Icons.Types.Icon msg -}
offline_pin : Elm.Expression
offline_pin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "offline_pin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| on_device_training: Material.Icons.Types.Icon msg -}
on_device_training : Elm.Expression
on_device_training =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "on_device_training"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| online_prediction: Material.Icons.Types.Icon msg -}
online_prediction : Elm.Expression
online_prediction =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "online_prediction"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| opacity: Material.Icons.Types.Icon msg -}
opacity : Elm.Expression
opacity =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "opacity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| open_in_browser: Material.Icons.Types.Icon msg -}
open_in_browser : Elm.Expression
open_in_browser =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "open_in_browser"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| open_in_full: Material.Icons.Types.Icon msg -}
open_in_full : Elm.Expression
open_in_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "open_in_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| open_in_new: Material.Icons.Types.Icon msg -}
open_in_new : Elm.Expression
open_in_new =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "open_in_new"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| open_in_new_off: Material.Icons.Types.Icon msg -}
open_in_new_off : Elm.Expression
open_in_new_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "open_in_new_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| open_with: Material.Icons.Types.Icon msg -}
open_with : Elm.Expression
open_with =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "open_with"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| outbound: Material.Icons.Types.Icon msg -}
outbound : Elm.Expression
outbound =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "outbound"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| outbox: Material.Icons.Types.Icon msg -}
outbox : Elm.Expression
outbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "outbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| outlet: Material.Icons.Types.Icon msg -}
outlet : Elm.Expression
outlet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "outlet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| output: Material.Icons.Types.Icon msg -}
output : Elm.Expression
output =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "output"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pageview: Material.Icons.Types.Icon msg -}
pageview : Elm.Expression
pageview =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pageview"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| paid: Material.Icons.Types.Icon msg -}
paid : Elm.Expression
paid =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "paid"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pan_tool: Material.Icons.Types.Icon msg -}
pan_tool : Elm.Expression
pan_tool =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pan_tool"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pan_tool_alt: Material.Icons.Types.Icon msg -}
pan_tool_alt : Elm.Expression
pan_tool_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pan_tool_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| payment: Material.Icons.Types.Icon msg -}
payment : Elm.Expression
payment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "payment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pending: Material.Icons.Types.Icon msg -}
pending : Elm.Expression
pending =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pending"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pending_actions: Material.Icons.Types.Icon msg -}
pending_actions : Elm.Expression
pending_actions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pending_actions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| percent: Material.Icons.Types.Icon msg -}
percent : Elm.Expression
percent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "percent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_camera_mic: Material.Icons.Types.Icon msg -}
perm_camera_mic : Elm.Expression
perm_camera_mic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_camera_mic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_contact_calendar: Material.Icons.Types.Icon msg -}
perm_contact_calendar : Elm.Expression
perm_contact_calendar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_contact_calendar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_data_setting: Material.Icons.Types.Icon msg -}
perm_data_setting : Elm.Expression
perm_data_setting =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_data_setting"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_device_information: Material.Icons.Types.Icon msg -}
perm_device_information : Elm.Expression
perm_device_information =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_device_information"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_identity: Material.Icons.Types.Icon msg -}
perm_identity : Elm.Expression
perm_identity =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_identity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_media: Material.Icons.Types.Icon msg -}
perm_media : Elm.Expression
perm_media =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_media"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_phone_msg: Material.Icons.Types.Icon msg -}
perm_phone_msg : Elm.Expression
perm_phone_msg =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_phone_msg"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| perm_scan_wifi: Material.Icons.Types.Icon msg -}
perm_scan_wifi : Elm.Expression
perm_scan_wifi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "perm_scan_wifi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pets: Material.Icons.Types.Icon msg -}
pets : Elm.Expression
pets =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pets"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| php: Material.Icons.Types.Icon msg -}
php : Elm.Expression
php =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "php"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| picture_in_picture: Material.Icons.Types.Icon msg -}
picture_in_picture : Elm.Expression
picture_in_picture =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "picture_in_picture"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| picture_in_picture_alt: Material.Icons.Types.Icon msg -}
picture_in_picture_alt : Elm.Expression
picture_in_picture_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "picture_in_picture_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pin_end: Material.Icons.Types.Icon msg -}
pin_end : Elm.Expression
pin_end =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pin_end"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pin_invoke: Material.Icons.Types.Icon msg -}
pin_invoke : Elm.Expression
pin_invoke =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pin_invoke"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pinch: Material.Icons.Types.Icon msg -}
pinch : Elm.Expression
pinch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pinch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| plagiarism: Material.Icons.Types.Icon msg -}
plagiarism : Elm.Expression
plagiarism =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "plagiarism"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_for_work: Material.Icons.Types.Icon msg -}
play_for_work : Elm.Expression
play_for_work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_for_work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| polymer: Material.Icons.Types.Icon msg -}
polymer : Elm.Expression
polymer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "polymer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| power_settings_new: Material.Icons.Types.Icon msg -}
power_settings_new : Elm.Expression
power_settings_new =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "power_settings_new"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pregnant_woman: Material.Icons.Types.Icon msg -}
pregnant_woman : Elm.Expression
pregnant_woman =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pregnant_woman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| preview: Material.Icons.Types.Icon msg -}
preview : Elm.Expression
preview =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "preview"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| print: Material.Icons.Types.Icon msg -}
print : Elm.Expression
print =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "print"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| privacy_tip: Material.Icons.Types.Icon msg -}
privacy_tip : Elm.Expression
privacy_tip =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "privacy_tip"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| private_connectivity: Material.Icons.Types.Icon msg -}
private_connectivity : Elm.Expression
private_connectivity =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "private_connectivity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| production_quantity_limits: Material.Icons.Types.Icon msg -}
production_quantity_limits : Elm.Expression
production_quantity_limits =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "production_quantity_limits"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| published_with_changes: Material.Icons.Types.Icon msg -}
published_with_changes : Elm.Expression
published_with_changes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "published_with_changes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| query_builder: Material.Icons.Types.Icon msg -}
query_builder : Elm.Expression
query_builder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "query_builder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| question_answer: Material.Icons.Types.Icon msg -}
question_answer : Elm.Expression
question_answer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "question_answer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| question_mark: Material.Icons.Types.Icon msg -}
question_mark : Elm.Expression
question_mark =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "question_mark"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| quickreply: Material.Icons.Types.Icon msg -}
quickreply : Elm.Expression
quickreply =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "quickreply"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| receipt: Material.Icons.Types.Icon msg -}
receipt : Elm.Expression
receipt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "receipt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| record_voice_over: Material.Icons.Types.Icon msg -}
record_voice_over : Elm.Expression
record_voice_over =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "record_voice_over"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| redeem: Material.Icons.Types.Icon msg -}
redeem : Elm.Expression
redeem =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "redeem"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_done: Material.Icons.Types.Icon msg -}
remove_done : Elm.Expression
remove_done =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_done"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_shopping_cart: Material.Icons.Types.Icon msg -}
remove_shopping_cart : Elm.Expression
remove_shopping_cart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_shopping_cart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reorder: Material.Icons.Types.Icon msg -}
reorder : Elm.Expression
reorder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reorder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| repartition: Material.Icons.Types.Icon msg -}
repartition : Elm.Expression
repartition =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "repartition"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| report_problem: Material.Icons.Types.Icon msg -}
report_problem : Elm.Expression
report_problem =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "report_problem"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| request_page: Material.Icons.Types.Icon msg -}
request_page : Elm.Expression
request_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "request_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restore: Material.Icons.Types.Icon msg -}
restore : Elm.Expression
restore =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restore"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restore_from_trash: Material.Icons.Types.Icon msg -}
restore_from_trash : Elm.Expression
restore_from_trash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restore_from_trash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restore_page: Material.Icons.Types.Icon msg -}
restore_page : Elm.Expression
restore_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restore_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rocket: Material.Icons.Types.Icon msg -}
rocket : Elm.Expression
rocket =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rocket"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rocket_launch: Material.Icons.Types.Icon msg -}
rocket_launch : Elm.Expression
rocket_launch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rocket_launch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| room: Material.Icons.Types.Icon msg -}
room : Elm.Expression
room =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "room"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rounded_corner: Material.Icons.Types.Icon msg -}
rounded_corner : Elm.Expression
rounded_corner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rounded_corner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rowing: Material.Icons.Types.Icon msg -}
rowing : Elm.Expression
rowing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rowing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rule: Material.Icons.Types.Icon msg -}
rule : Elm.Expression
rule =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rule"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| satellite_alt: Material.Icons.Types.Icon msg -}
satellite_alt : Elm.Expression
satellite_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "satellite_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| saved_search: Material.Icons.Types.Icon msg -}
saved_search : Elm.Expression
saved_search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "saved_search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| savings: Material.Icons.Types.Icon msg -}
savings : Elm.Expression
savings =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "savings"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| schedule: Material.Icons.Types.Icon msg -}
schedule : Elm.Expression
schedule =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "schedule"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| schedule_send: Material.Icons.Types.Icon msg -}
schedule_send : Elm.Expression
schedule_send =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "schedule_send"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| search: Material.Icons.Types.Icon msg -}
search : Elm.Expression
search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| search_off: Material.Icons.Types.Icon msg -}
search_off : Elm.Expression
search_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "search_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| segment: Material.Icons.Types.Icon msg -}
segment : Elm.Expression
segment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "segment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| send_and_archive: Material.Icons.Types.Icon msg -}
send_and_archive : Elm.Expression
send_and_archive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "send_and_archive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sensors: Material.Icons.Types.Icon msg -}
sensors : Elm.Expression
sensors =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sensors"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sensors_off: Material.Icons.Types.Icon msg -}
sensors_off : Elm.Expression
sensors_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sensors_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings: Material.Icons.Types.Icon msg -}
settings : Elm.Expression
settings =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_accessibility: Material.Icons.Types.Icon msg -}
settings_accessibility : Elm.Expression
settings_accessibility =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_accessibility"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_applications: Material.Icons.Types.Icon msg -}
settings_applications : Elm.Expression
settings_applications =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_applications"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_backup_restore: Material.Icons.Types.Icon msg -}
settings_backup_restore : Elm.Expression
settings_backup_restore =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_backup_restore"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_bluetooth: Material.Icons.Types.Icon msg -}
settings_bluetooth : Elm.Expression
settings_bluetooth =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_bluetooth"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_brightness: Material.Icons.Types.Icon msg -}
settings_brightness : Elm.Expression
settings_brightness =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_brightness"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_cell: Material.Icons.Types.Icon msg -}
settings_cell : Elm.Expression
settings_cell =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_cell"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_ethernet: Material.Icons.Types.Icon msg -}
settings_ethernet : Elm.Expression
settings_ethernet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_ethernet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_input_antenna: Material.Icons.Types.Icon msg -}
settings_input_antenna : Elm.Expression
settings_input_antenna =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_input_antenna"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_input_component: Material.Icons.Types.Icon msg -}
settings_input_component : Elm.Expression
settings_input_component =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_input_component"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_input_composite: Material.Icons.Types.Icon msg -}
settings_input_composite : Elm.Expression
settings_input_composite =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_input_composite"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_input_hdmi: Material.Icons.Types.Icon msg -}
settings_input_hdmi : Elm.Expression
settings_input_hdmi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_input_hdmi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_input_svideo: Material.Icons.Types.Icon msg -}
settings_input_svideo : Elm.Expression
settings_input_svideo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_input_svideo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_overscan: Material.Icons.Types.Icon msg -}
settings_overscan : Elm.Expression
settings_overscan =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_overscan"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_phone: Material.Icons.Types.Icon msg -}
settings_phone : Elm.Expression
settings_phone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_phone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_power: Material.Icons.Types.Icon msg -}
settings_power : Elm.Expression
settings_power =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_power"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_remote: Material.Icons.Types.Icon msg -}
settings_remote : Elm.Expression
settings_remote =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_remote"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_voice: Material.Icons.Types.Icon msg -}
settings_voice : Elm.Expression
settings_voice =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_voice"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shop: Material.Icons.Types.Icon msg -}
shop : Elm.Expression
shop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shop_2: Material.Icons.Types.Icon msg -}
shop_2 : Elm.Expression
shop_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shop_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shop_two: Material.Icons.Types.Icon msg -}
shop_two : Elm.Expression
shop_two =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shop_two"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shopping_bag: Material.Icons.Types.Icon msg -}
shopping_bag : Elm.Expression
shopping_bag =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shopping_bag"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shopping_basket: Material.Icons.Types.Icon msg -}
shopping_basket : Elm.Expression
shopping_basket =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shopping_basket"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shopping_cart: Material.Icons.Types.Icon msg -}
shopping_cart : Elm.Expression
shopping_cart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shopping_cart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shopping_cart_checkout: Material.Icons.Types.Icon msg -}
shopping_cart_checkout : Elm.Expression
shopping_cart_checkout =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shopping_cart_checkout"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smart_button: Material.Icons.Types.Icon msg -}
smart_button : Elm.Expression
smart_button =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smart_button"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| source: Material.Icons.Types.Icon msg -}
source : Elm.Expression
source =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "source"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| space_dashboard: Material.Icons.Types.Icon msg -}
space_dashboard : Elm.Expression
space_dashboard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "space_dashboard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spatial_audio: Material.Icons.Types.Icon msg -}
spatial_audio : Elm.Expression
spatial_audio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spatial_audio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spatial_audio_off: Material.Icons.Types.Icon msg -}
spatial_audio_off : Elm.Expression
spatial_audio_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spatial_audio_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spatial_tracking: Material.Icons.Types.Icon msg -}
spatial_tracking : Elm.Expression
spatial_tracking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spatial_tracking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speaker_notes: Material.Icons.Types.Icon msg -}
speaker_notes : Elm.Expression
speaker_notes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speaker_notes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speaker_notes_off: Material.Icons.Types.Icon msg -}
speaker_notes_off : Elm.Expression
speaker_notes_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speaker_notes_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spellcheck: Material.Icons.Types.Icon msg -}
spellcheck : Elm.Expression
spellcheck =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spellcheck"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_rate: Material.Icons.Types.Icon msg -}
star_rate : Elm.Expression
star_rate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_rate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stars: Material.Icons.Types.Icon msg -}
stars : Elm.Expression
stars =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stars"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sticky_note_2: Material.Icons.Types.Icon msg -}
sticky_note_2 : Elm.Expression
sticky_note_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sticky_note_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| store: Material.Icons.Types.Icon msg -}
store : Elm.Expression
store =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "store"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subject: Material.Icons.Types.Icon msg -}
subject : Elm.Expression
subject =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subject"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subtitles_off: Material.Icons.Types.Icon msg -}
subtitles_off : Elm.Expression
subtitles_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subtitles_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| supervised_user_circle: Material.Icons.Types.Icon msg -}
supervised_user_circle : Elm.Expression
supervised_user_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "supervised_user_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| supervisor_account: Material.Icons.Types.Icon msg -}
supervisor_account : Elm.Expression
supervisor_account =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "supervisor_account"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| support: Material.Icons.Types.Icon msg -}
support : Elm.Expression
support =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "support"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swap_horiz: Material.Icons.Types.Icon msg -}
swap_horiz : Elm.Expression
swap_horiz =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swap_horiz"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swap_horizontal_circle: Material.Icons.Types.Icon msg -}
swap_horizontal_circle : Elm.Expression
swap_horizontal_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swap_horizontal_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swap_vert: Material.Icons.Types.Icon msg -}
swap_vert : Elm.Expression
swap_vert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swap_vert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swap_vertical_circle: Material.Icons.Types.Icon msg -}
swap_vertical_circle : Elm.Expression
swap_vertical_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swap_vertical_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe: Material.Icons.Types.Icon msg -}
swipe : Elm.Expression
swipe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_down: Material.Icons.Types.Icon msg -}
swipe_down : Elm.Expression
swipe_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_down_alt: Material.Icons.Types.Icon msg -}
swipe_down_alt : Elm.Expression
swipe_down_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_down_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_left: Material.Icons.Types.Icon msg -}
swipe_left : Elm.Expression
swipe_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_left_alt: Material.Icons.Types.Icon msg -}
swipe_left_alt : Elm.Expression
swipe_left_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_left_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_right: Material.Icons.Types.Icon msg -}
swipe_right : Elm.Expression
swipe_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_right_alt: Material.Icons.Types.Icon msg -}
swipe_right_alt : Elm.Expression
swipe_right_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_right_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_up: Material.Icons.Types.Icon msg -}
swipe_up : Elm.Expression
swipe_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_up_alt: Material.Icons.Types.Icon msg -}
swipe_up_alt : Elm.Expression
swipe_up_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_up_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swipe_vertical: Material.Icons.Types.Icon msg -}
swipe_vertical : Elm.Expression
swipe_vertical =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swipe_vertical"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_access_shortcut: Material.Icons.Types.Icon msg -}
switch_access_shortcut : Elm.Expression
switch_access_shortcut =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_access_shortcut"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_access_shortcut_add: Material.Icons.Types.Icon msg -}
switch_access_shortcut_add : Elm.Expression
switch_access_shortcut_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_access_shortcut_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sync_alt: Material.Icons.Types.Icon msg -}
sync_alt : Elm.Expression
sync_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sync_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| system_update_alt: Material.Icons.Types.Icon msg -}
system_update_alt : Elm.Expression
system_update_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "system_update_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tab: Material.Icons.Types.Icon msg -}
tab : Elm.Expression
tab =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tab"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tab_unselected: Material.Icons.Types.Icon msg -}
tab_unselected : Elm.Expression
tab_unselected =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tab_unselected"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| table_view: Material.Icons.Types.Icon msg -}
table_view : Elm.Expression
table_view =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "table_view"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| task_alt: Material.Icons.Types.Icon msg -}
task_alt : Elm.Expression
task_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "task_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| terminal: Material.Icons.Types.Icon msg -}
terminal : Elm.Expression
terminal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "terminal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotate_up: Material.Icons.Types.Icon msg -}
text_rotate_up : Elm.Expression
text_rotate_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotate_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotate_vertical: Material.Icons.Types.Icon msg -}
text_rotate_vertical : Elm.Expression
text_rotate_vertical =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotate_vertical"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotation_angledown: Material.Icons.Types.Icon msg -}
text_rotation_angledown : Elm.Expression
text_rotation_angledown =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotation_angledown"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotation_angleup: Material.Icons.Types.Icon msg -}
text_rotation_angleup : Elm.Expression
text_rotation_angleup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotation_angleup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotation_down: Material.Icons.Types.Icon msg -}
text_rotation_down : Elm.Expression
text_rotation_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotation_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_rotation_none: Material.Icons.Types.Icon msg -}
text_rotation_none : Elm.Expression
text_rotation_none =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_rotation_none"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| theaters: Material.Icons.Types.Icon msg -}
theaters : Elm.Expression
theaters =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "theaters"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_down: Material.Icons.Types.Icon msg -}
thumb_down : Elm.Expression
thumb_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_down_off_alt: Material.Icons.Types.Icon msg -}
thumb_down_off_alt : Elm.Expression
thumb_down_off_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_down_off_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_up: Material.Icons.Types.Icon msg -}
thumb_up : Elm.Expression
thumb_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_up_off_alt: Material.Icons.Types.Icon msg -}
thumb_up_off_alt : Elm.Expression
thumb_up_off_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_up_off_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumbs_up_down: Material.Icons.Types.Icon msg -}
thumbs_up_down : Elm.Expression
thumbs_up_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumbs_up_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timeline: Material.Icons.Types.Icon msg -}
timeline : Elm.Expression
timeline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timeline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tips_and_updates: Material.Icons.Types.Icon msg -}
tips_and_updates : Elm.Expression
tips_and_updates =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tips_and_updates"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| toc: Material.Icons.Types.Icon msg -}
toc : Elm.Expression
toc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "toc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| today: Material.Icons.Types.Icon msg -}
today : Elm.Expression
today =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "today"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| token: Material.Icons.Types.Icon msg -}
token : Elm.Expression
token =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "token"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| toll: Material.Icons.Types.Icon msg -}
toll : Elm.Expression
toll =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "toll"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| touch_app: Material.Icons.Types.Icon msg -}
touch_app : Elm.Expression
touch_app =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "touch_app"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tour: Material.Icons.Types.Icon msg -}
tour : Elm.Expression
tour =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tour"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| track_changes: Material.Icons.Types.Icon msg -}
track_changes : Elm.Expression
track_changes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "track_changes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| transcribe: Material.Icons.Types.Icon msg -}
transcribe : Elm.Expression
transcribe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "transcribe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| translate: Material.Icons.Types.Icon msg -}
translate : Elm.Expression
translate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "translate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| trending_down: Material.Icons.Types.Icon msg -}
trending_down : Elm.Expression
trending_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "trending_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| trending_flat: Material.Icons.Types.Icon msg -}
trending_flat : Elm.Expression
trending_flat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "trending_flat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| trending_up: Material.Icons.Types.Icon msg -}
trending_up : Elm.Expression
trending_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "trending_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| troubleshoot: Material.Icons.Types.Icon msg -}
troubleshoot : Elm.Expression
troubleshoot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "troubleshoot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| try: Material.Icons.Types.Icon msg -}
try : Elm.Expression
try =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "try"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turned_in: Material.Icons.Types.Icon msg -}
turned_in : Elm.Expression
turned_in =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turned_in"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turned_in_not: Material.Icons.Types.Icon msg -}
turned_in_not : Elm.Expression
turned_in_not =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turned_in_not"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unfold_less_double: Material.Icons.Types.Icon msg -}
unfold_less_double : Elm.Expression
unfold_less_double =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unfold_less_double"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unfold_more_double: Material.Icons.Types.Icon msg -}
unfold_more_double : Elm.Expression
unfold_more_double =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unfold_more_double"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unpublished: Material.Icons.Types.Icon msg -}
unpublished : Elm.Expression
unpublished =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unpublished"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| update: Material.Icons.Types.Icon msg -}
update : Elm.Expression
update =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "update"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| update_disabled: Material.Icons.Types.Icon msg -}
update_disabled : Elm.Expression
update_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "update_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| upgrade: Material.Icons.Types.Icon msg -}
upgrade : Elm.Expression
upgrade =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "upgrade"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| verified: Material.Icons.Types.Icon msg -}
verified : Elm.Expression
verified =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "verified"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| verified_user: Material.Icons.Types.Icon msg -}
verified_user : Elm.Expression
verified_user =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "verified_user"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_split: Material.Icons.Types.Icon msg -}
vertical_split : Elm.Expression
vertical_split =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_split"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_agenda: Material.Icons.Types.Icon msg -}
view_agenda : Elm.Expression
view_agenda =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_agenda"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_array: Material.Icons.Types.Icon msg -}
view_array : Elm.Expression
view_array =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_array"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_carousel: Material.Icons.Types.Icon msg -}
view_carousel : Elm.Expression
view_carousel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_carousel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_column: Material.Icons.Types.Icon msg -}
view_column : Elm.Expression
view_column =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_column"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_comfy_alt: Material.Icons.Types.Icon msg -}
view_comfy_alt : Elm.Expression
view_comfy_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_comfy_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_compact_alt: Material.Icons.Types.Icon msg -}
view_compact_alt : Elm.Expression
view_compact_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_compact_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_cozy: Material.Icons.Types.Icon msg -}
view_cozy : Elm.Expression
view_cozy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_cozy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_day: Material.Icons.Types.Icon msg -}
view_day : Elm.Expression
view_day =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_day"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_headline: Material.Icons.Types.Icon msg -}
view_headline : Elm.Expression
view_headline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_headline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_in_ar: Material.Icons.Types.Icon msg -}
view_in_ar : Elm.Expression
view_in_ar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_in_ar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_kanban: Material.Icons.Types.Icon msg -}
view_kanban : Elm.Expression
view_kanban =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_kanban"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_list: Material.Icons.Types.Icon msg -}
view_list : Elm.Expression
view_list =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_list"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_module: Material.Icons.Types.Icon msg -}
view_module : Elm.Expression
view_module =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_module"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_quilt: Material.Icons.Types.Icon msg -}
view_quilt : Elm.Expression
view_quilt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_quilt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_sidebar: Material.Icons.Types.Icon msg -}
view_sidebar : Elm.Expression
view_sidebar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_sidebar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_stream: Material.Icons.Types.Icon msg -}
view_stream : Elm.Expression
view_stream =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_stream"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_timeline: Material.Icons.Types.Icon msg -}
view_timeline : Elm.Expression
view_timeline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_timeline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_week: Material.Icons.Types.Icon msg -}
view_week : Elm.Expression
view_week =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_week"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| visibility: Material.Icons.Types.Icon msg -}
visibility : Elm.Expression
visibility =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "visibility"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| visibility_off: Material.Icons.Types.Icon msg -}
visibility_off : Elm.Expression
visibility_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "visibility_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| voice_over_off: Material.Icons.Types.Icon msg -}
voice_over_off : Elm.Expression
voice_over_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "voice_over_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| watch_later: Material.Icons.Types.Icon msg -}
watch_later : Elm.Expression
watch_later =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "watch_later"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| webhook: Material.Icons.Types.Icon msg -}
webhook : Elm.Expression
webhook =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "webhook"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| width_full: Material.Icons.Types.Icon msg -}
width_full : Elm.Expression
width_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "width_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| width_normal: Material.Icons.Types.Icon msg -}
width_normal : Elm.Expression
width_normal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "width_normal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| width_wide: Material.Icons.Types.Icon msg -}
width_wide : Elm.Expression
width_wide =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "width_wide"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_protected_setup: Material.Icons.Types.Icon msg -}
wifi_protected_setup : Elm.Expression
wifi_protected_setup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_protected_setup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| work: Material.Icons.Types.Icon msg -}
work : Elm.Expression
work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| work_history: Material.Icons.Types.Icon msg -}
work_history : Elm.Expression
work_history =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "work_history"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| work_off: Material.Icons.Types.Icon msg -}
work_off : Elm.Expression
work_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "work_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| work_outline: Material.Icons.Types.Icon msg -}
work_outline : Elm.Expression
work_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "work_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wysiwyg: Material.Icons.Types.Icon msg -}
wysiwyg : Elm.Expression
wysiwyg =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wysiwyg"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| youtube_searched_for: Material.Icons.Types.Icon msg -}
youtube_searched_for : Elm.Expression
youtube_searched_for =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "youtube_searched_for"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| zoom_in: Material.Icons.Types.Icon msg -}
zoom_in : Elm.Expression
zoom_in =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "zoom_in"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| zoom_out: Material.Icons.Types.Icon msg -}
zoom_out : Elm.Expression
zoom_out =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "zoom_out"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_alert: Material.Icons.Types.Icon msg -}
add_alert : Elm.Expression
add_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_delete: Material.Icons.Types.Icon msg -}
auto_delete : Elm.Expression
auto_delete =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_delete"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| error: Material.Icons.Types.Icon msg -}
error : Elm.Expression
error =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "error"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| error_outline: Material.Icons.Types.Icon msg -}
error_outline : Elm.Expression
error_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "error_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notification_important: Material.Icons.Types.Icon msg -}
notification_important : Elm.Expression
notification_important =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notification_important"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| warning: Material.Icons.Types.Icon msg -}
warning : Elm.Expression
warning =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "warning"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| warning_amber: Material.Icons.Types.Icon msg -}
warning_amber : Elm.Expression
warning_amber =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "warning_amber"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ten_k: Material.Icons.Types.Icon msg -}
ten_k : Elm.Expression
ten_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ten_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| one_k: Material.Icons.Types.Icon msg -}
one_k : Elm.Expression
one_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "one_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| one_k_plus: Material.Icons.Types.Icon msg -}
one_k_plus : Elm.Expression
one_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "one_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| two_k: Material.Icons.Types.Icon msg -}
two_k : Elm.Expression
two_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "two_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| two_k_plus: Material.Icons.Types.Icon msg -}
two_k_plus : Elm.Expression
two_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "two_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_k: Material.Icons.Types.Icon msg -}
three_k : Elm.Expression
three_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_k_plus: Material.Icons.Types.Icon msg -}
three_k_plus : Elm.Expression
three_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| four_k: Material.Icons.Types.Icon msg -}
four_k : Elm.Expression
four_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "four_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| four_k_plus: Material.Icons.Types.Icon msg -}
four_k_plus : Elm.Expression
four_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "four_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| five_g: Material.Icons.Types.Icon msg -}
five_g : Elm.Expression
five_g =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "five_g"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| five_k: Material.Icons.Types.Icon msg -}
five_k : Elm.Expression
five_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "five_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| five_k_plus: Material.Icons.Types.Icon msg -}
five_k_plus : Elm.Expression
five_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "five_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| six_k: Material.Icons.Types.Icon msg -}
six_k : Elm.Expression
six_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "six_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| six_k_plus: Material.Icons.Types.Icon msg -}
six_k_plus : Elm.Expression
six_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "six_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| seven_k: Material.Icons.Types.Icon msg -}
seven_k : Elm.Expression
seven_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "seven_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| seven_k_plus: Material.Icons.Types.Icon msg -}
seven_k_plus : Elm.Expression
seven_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "seven_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eight_k: Material.Icons.Types.Icon msg -}
eight_k : Elm.Expression
eight_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eight_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eight_k_plus: Material.Icons.Types.Icon msg -}
eight_k_plus : Elm.Expression
eight_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eight_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nine_k: Material.Icons.Types.Icon msg -}
nine_k : Elm.Expression
nine_k =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nine_k"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nine_k_plus: Material.Icons.Types.Icon msg -}
nine_k_plus : Elm.Expression
nine_k_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nine_k_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_to_queue: Material.Icons.Types.Icon msg -}
add_to_queue : Elm.Expression
add_to_queue =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_to_queue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airplay: Material.Icons.Types.Icon msg -}
airplay : Elm.Expression
airplay =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airplay"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| album: Material.Icons.Types.Icon msg -}
album : Elm.Expression
album =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "album"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| art_track: Material.Icons.Types.Icon msg -}
art_track : Elm.Expression
art_track =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "art_track"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| audio_file: Material.Icons.Types.Icon msg -}
audio_file : Elm.Expression
audio_file =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "audio_file"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| av_timer: Material.Icons.Types.Icon msg -}
av_timer : Elm.Expression
av_timer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "av_timer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| branding_watermark: Material.Icons.Types.Icon msg -}
branding_watermark : Elm.Expression
branding_watermark =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "branding_watermark"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_to_action: Material.Icons.Types.Icon msg -}
call_to_action : Elm.Expression
call_to_action =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_to_action"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| closed_caption: Material.Icons.Types.Icon msg -}
closed_caption : Elm.Expression
closed_caption =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "closed_caption"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| closed_caption_disabled: Material.Icons.Types.Icon msg -}
closed_caption_disabled : Elm.Expression
closed_caption_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "closed_caption_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| closed_caption_off: Material.Icons.Types.Icon msg -}
closed_caption_off : Elm.Expression
closed_caption_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "closed_caption_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| control_camera: Material.Icons.Types.Icon msg -}
control_camera : Elm.Expression
control_camera =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "control_camera"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| equalizer: Material.Icons.Types.Icon msg -}
equalizer : Elm.Expression
equalizer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "equalizer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| explicit: Material.Icons.Types.Icon msg -}
explicit : Elm.Expression
explicit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "explicit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fast_forward: Material.Icons.Types.Icon msg -}
fast_forward : Elm.Expression
fast_forward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fast_forward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fast_rewind: Material.Icons.Types.Icon msg -}
fast_rewind : Elm.Expression
fast_rewind =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fast_rewind"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| featured_play_list: Material.Icons.Types.Icon msg -}
featured_play_list : Elm.Expression
featured_play_list =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "featured_play_list"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| featured_video: Material.Icons.Types.Icon msg -}
featured_video : Elm.Expression
featured_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "featured_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fiber_dvr: Material.Icons.Types.Icon msg -}
fiber_dvr : Elm.Expression
fiber_dvr =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fiber_dvr"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fiber_manual_record: Material.Icons.Types.Icon msg -}
fiber_manual_record : Elm.Expression
fiber_manual_record =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fiber_manual_record"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fiber_new: Material.Icons.Types.Icon msg -}
fiber_new : Elm.Expression
fiber_new =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fiber_new"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fiber_pin: Material.Icons.Types.Icon msg -}
fiber_pin : Elm.Expression
fiber_pin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fiber_pin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fiber_smart_record: Material.Icons.Types.Icon msg -}
fiber_smart_record : Elm.Expression
fiber_smart_record =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fiber_smart_record"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forward_10: Material.Icons.Types.Icon msg -}
forward_10 : Elm.Expression
forward_10 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forward_10"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forward_30: Material.Icons.Types.Icon msg -}
forward_30 : Elm.Expression
forward_30 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forward_30"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forward_5: Material.Icons.Types.Icon msg -}
forward_5 : Elm.Expression
forward_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forward_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| games: Material.Icons.Types.Icon msg -}
games : Elm.Expression
games =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "games"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hd: Material.Icons.Types.Icon msg -}
hd : Elm.Expression
hd =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hd"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hearing: Material.Icons.Types.Icon msg -}
hearing : Elm.Expression
hearing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hearing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hearing_disabled: Material.Icons.Types.Icon msg -}
hearing_disabled : Elm.Expression
hearing_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hearing_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| high_quality: Material.Icons.Types.Icon msg -}
high_quality : Elm.Expression
high_quality =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "high_quality"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| interpreter_mode: Material.Icons.Types.Icon msg -}
interpreter_mode : Elm.Expression
interpreter_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "interpreter_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| library_add: Material.Icons.Types.Icon msg -}
library_add : Elm.Expression
library_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "library_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| library_add_check: Material.Icons.Types.Icon msg -}
library_add_check : Elm.Expression
library_add_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "library_add_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| library_books: Material.Icons.Types.Icon msg -}
library_books : Elm.Expression
library_books =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "library_books"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| library_music: Material.Icons.Types.Icon msg -}
library_music : Elm.Expression
library_music =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "library_music"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| loop: Material.Icons.Types.Icon msg -}
loop : Elm.Expression
loop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "loop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lyrics: Material.Icons.Types.Icon msg -}
lyrics : Elm.Expression
lyrics =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lyrics"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mic: Material.Icons.Types.Icon msg -}
mic : Elm.Expression
mic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mic_none: Material.Icons.Types.Icon msg -}
mic_none : Elm.Expression
mic_none =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mic_none"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mic_off: Material.Icons.Types.Icon msg -}
mic_off : Elm.Expression
mic_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mic_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| missed_video_call: Material.Icons.Types.Icon msg -}
missed_video_call : Elm.Expression
missed_video_call =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "missed_video_call"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| movie: Material.Icons.Types.Icon msg -}
movie : Elm.Expression
movie =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "movie"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| music_video: Material.Icons.Types.Icon msg -}
music_video : Elm.Expression
music_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "music_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| new_releases: Material.Icons.Types.Icon msg -}
new_releases : Elm.Expression
new_releases =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "new_releases"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| not_interested: Material.Icons.Types.Icon msg -}
not_interested : Elm.Expression
not_interested =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "not_interested"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| note: Material.Icons.Types.Icon msg -}
note : Elm.Expression
note =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "note"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pause: Material.Icons.Types.Icon msg -}
pause : Elm.Expression
pause =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pause"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pause_circle: Material.Icons.Types.Icon msg -}
pause_circle : Elm.Expression
pause_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pause_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pause_circle_filled: Material.Icons.Types.Icon msg -}
pause_circle_filled : Elm.Expression
pause_circle_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pause_circle_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pause_circle_outline: Material.Icons.Types.Icon msg -}
pause_circle_outline : Elm.Expression
pause_circle_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pause_circle_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_arrow: Material.Icons.Types.Icon msg -}
play_arrow : Elm.Expression
play_arrow =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_arrow"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_circle: Material.Icons.Types.Icon msg -}
play_circle : Elm.Expression
play_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_circle_filled: Material.Icons.Types.Icon msg -}
play_circle_filled : Elm.Expression
play_circle_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_circle_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_circle_outline: Material.Icons.Types.Icon msg -}
play_circle_outline : Elm.Expression
play_circle_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_circle_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_disabled: Material.Icons.Types.Icon msg -}
play_disabled : Elm.Expression
play_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_add: Material.Icons.Types.Icon msg -}
playlist_add : Elm.Expression
playlist_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_add_check: Material.Icons.Types.Icon msg -}
playlist_add_check : Elm.Expression
playlist_add_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_add_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_add_check_circle: Material.Icons.Types.Icon msg -}
playlist_add_check_circle : Elm.Expression
playlist_add_check_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_add_check_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_add_circle: Material.Icons.Types.Icon msg -}
playlist_add_circle : Elm.Expression
playlist_add_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_add_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_play: Material.Icons.Types.Icon msg -}
playlist_play : Elm.Expression
playlist_play =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_play"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| playlist_remove: Material.Icons.Types.Icon msg -}
playlist_remove : Elm.Expression
playlist_remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "playlist_remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| queue: Material.Icons.Types.Icon msg -}
queue : Elm.Expression
queue =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "queue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| queue_music: Material.Icons.Types.Icon msg -}
queue_music : Elm.Expression
queue_music =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "queue_music"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| queue_play_next: Material.Icons.Types.Icon msg -}
queue_play_next : Elm.Expression
queue_play_next =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "queue_play_next"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| radio: Material.Icons.Types.Icon msg -}
radio : Elm.Expression
radio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "radio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| recent_actors: Material.Icons.Types.Icon msg -}
recent_actors : Elm.Expression
recent_actors =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "recent_actors"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_from_queue: Material.Icons.Types.Icon msg -}
remove_from_queue : Elm.Expression
remove_from_queue =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_from_queue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| repeat: Material.Icons.Types.Icon msg -}
repeat : Elm.Expression
repeat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "repeat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| repeat_on: Material.Icons.Types.Icon msg -}
repeat_on : Elm.Expression
repeat_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "repeat_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| repeat_one: Material.Icons.Types.Icon msg -}
repeat_one : Elm.Expression
repeat_one =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "repeat_one"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| repeat_one_on: Material.Icons.Types.Icon msg -}
repeat_one_on : Elm.Expression
repeat_one_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "repeat_one_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| replay: Material.Icons.Types.Icon msg -}
replay : Elm.Expression
replay =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "replay"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| replay_10: Material.Icons.Types.Icon msg -}
replay_10 : Elm.Expression
replay_10 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "replay_10"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| replay_30: Material.Icons.Types.Icon msg -}
replay_30 : Elm.Expression
replay_30 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "replay_30"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| replay_5: Material.Icons.Types.Icon msg -}
replay_5 : Elm.Expression
replay_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "replay_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| replay_circle_filled: Material.Icons.Types.Icon msg -}
replay_circle_filled : Elm.Expression
replay_circle_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "replay_circle_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sd: Material.Icons.Types.Icon msg -}
sd : Elm.Expression
sd =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sd"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shuffle: Material.Icons.Types.Icon msg -}
shuffle : Elm.Expression
shuffle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shuffle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shuffle_on: Material.Icons.Types.Icon msg -}
shuffle_on : Elm.Expression
shuffle_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shuffle_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| skip_next: Material.Icons.Types.Icon msg -}
skip_next : Elm.Expression
skip_next =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "skip_next"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| skip_previous: Material.Icons.Types.Icon msg -}
skip_previous : Elm.Expression
skip_previous =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "skip_previous"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| slow_motion_video: Material.Icons.Types.Icon msg -}
slow_motion_video : Elm.Expression
slow_motion_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "slow_motion_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| snooze: Material.Icons.Types.Icon msg -}
snooze : Elm.Expression
snooze =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "snooze"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sort_by_alpha: Material.Icons.Types.Icon msg -}
sort_by_alpha : Elm.Expression
sort_by_alpha =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sort_by_alpha"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speed: Material.Icons.Types.Icon msg -}
speed : Elm.Expression
speed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stop: Material.Icons.Types.Icon msg -}
stop : Elm.Expression
stop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stop_circle: Material.Icons.Types.Icon msg -}
stop_circle : Elm.Expression
stop_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stop_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subscriptions: Material.Icons.Types.Icon msg -}
subscriptions : Elm.Expression
subscriptions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subscriptions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subtitles: Material.Icons.Types.Icon msg -}
subtitles : Elm.Expression
subtitles =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subtitles"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| surround_sound: Material.Icons.Types.Icon msg -}
surround_sound : Elm.Expression
surround_sound =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "surround_sound"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_call: Material.Icons.Types.Icon msg -}
video_call : Elm.Expression
video_call =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_call"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_file: Material.Icons.Types.Icon msg -}
video_file : Elm.Expression
video_file =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_file"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_label: Material.Icons.Types.Icon msg -}
video_label : Elm.Expression
video_label =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_label"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_library: Material.Icons.Types.Icon msg -}
video_library : Elm.Expression
video_library =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_library"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_settings: Material.Icons.Types.Icon msg -}
video_settings : Elm.Expression
video_settings =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_settings"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| videocam: Material.Icons.Types.Icon msg -}
videocam : Elm.Expression
videocam =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "videocam"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| videocam_off: Material.Icons.Types.Icon msg -}
videocam_off : Elm.Expression
videocam_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "videocam_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volume_down: Material.Icons.Types.Icon msg -}
volume_down : Elm.Expression
volume_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volume_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volume_mute: Material.Icons.Types.Icon msg -}
volume_mute : Elm.Expression
volume_mute =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volume_mute"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volume_off: Material.Icons.Types.Icon msg -}
volume_off : Elm.Expression
volume_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volume_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volume_up: Material.Icons.Types.Icon msg -}
volume_up : Elm.Expression
volume_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volume_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| web: Material.Icons.Types.Icon msg -}
web : Elm.Expression
web =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "web"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| web_asset: Material.Icons.Types.Icon msg -}
web_asset : Elm.Expression
web_asset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "web_asset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| web_asset_off: Material.Icons.Types.Icon msg -}
web_asset_off : Elm.Expression
web_asset_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "web_asset_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_p: Material.Icons.Types.Icon msg -}
three_p : Elm.Expression
three_p =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_p"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_ic_call: Material.Icons.Types.Icon msg -}
add_ic_call : Elm.Expression
add_ic_call =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_ic_call"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alternate_email: Material.Icons.Types.Icon msg -}
alternate_email : Elm.Expression
alternate_email =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alternate_email"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| app_registration: Material.Icons.Types.Icon msg -}
app_registration : Elm.Expression
app_registration =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "app_registration"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| business: Material.Icons.Types.Icon msg -}
business : Elm.Expression
business =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "business"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call: Material.Icons.Types.Icon msg -}
call : Elm.Expression
call =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_end: Material.Icons.Types.Icon msg -}
call_end : Elm.Expression
call_end =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_end"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_made: Material.Icons.Types.Icon msg -}
call_made : Elm.Expression
call_made =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_made"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_merge: Material.Icons.Types.Icon msg -}
call_merge : Elm.Expression
call_merge =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_merge"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_missed: Material.Icons.Types.Icon msg -}
call_missed : Elm.Expression
call_missed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_missed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_missed_outgoing: Material.Icons.Types.Icon msg -}
call_missed_outgoing : Elm.Expression
call_missed_outgoing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_missed_outgoing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_received: Material.Icons.Types.Icon msg -}
call_received : Elm.Expression
call_received =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_received"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| call_split: Material.Icons.Types.Icon msg -}
call_split : Elm.Expression
call_split =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "call_split"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cancel_presentation: Material.Icons.Types.Icon msg -}
cancel_presentation : Elm.Expression
cancel_presentation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cancel_presentation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cell_tower: Material.Icons.Types.Icon msg -}
cell_tower : Elm.Expression
cell_tower =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cell_tower"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cell_wifi: Material.Icons.Types.Icon msg -}
cell_wifi : Elm.Expression
cell_wifi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cell_wifi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chat: Material.Icons.Types.Icon msg -}
chat : Elm.Expression
chat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chat_bubble: Material.Icons.Types.Icon msg -}
chat_bubble : Elm.Expression
chat_bubble =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chat_bubble"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chat_bubble_outline: Material.Icons.Types.Icon msg -}
chat_bubble_outline : Elm.Expression
chat_bubble_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chat_bubble_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| clear_all: Material.Icons.Types.Icon msg -}
clear_all : Elm.Expression
clear_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "clear_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| co_present: Material.Icons.Types.Icon msg -}
co_present : Elm.Expression
co_present =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "co_present"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| comment: Material.Icons.Types.Icon msg -}
comment : Elm.Expression
comment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "comment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| comments_disabled: Material.Icons.Types.Icon msg -}
comments_disabled : Elm.Expression
comments_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "comments_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contact_emergency: Material.Icons.Types.Icon msg -}
contact_emergency : Elm.Expression
contact_emergency =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contact_emergency"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contact_mail: Material.Icons.Types.Icon msg -}
contact_mail : Elm.Expression
contact_mail =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contact_mail"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contact_phone: Material.Icons.Types.Icon msg -}
contact_phone : Elm.Expression
contact_phone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contact_phone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contacts: Material.Icons.Types.Icon msg -}
contacts : Elm.Expression
contacts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contacts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| desktop_access_disabled: Material.Icons.Types.Icon msg -}
desktop_access_disabled : Elm.Expression
desktop_access_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "desktop_access_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dialer_sip: Material.Icons.Types.Icon msg -}
dialer_sip : Elm.Expression
dialer_sip =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dialer_sip"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dialpad: Material.Icons.Types.Icon msg -}
dialpad : Elm.Expression
dialpad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dialpad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| document_scanner: Material.Icons.Types.Icon msg -}
document_scanner : Elm.Expression
document_scanner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "document_scanner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| domain_disabled: Material.Icons.Types.Icon msg -}
domain_disabled : Elm.Expression
domain_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "domain_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| domain_verification: Material.Icons.Types.Icon msg -}
domain_verification : Elm.Expression
domain_verification =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "domain_verification"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| duo: Material.Icons.Types.Icon msg -}
duo : Elm.Expression
duo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "duo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| email: Material.Icons.Types.Icon msg -}
email : Elm.Expression
email =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "email"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forum: Material.Icons.Types.Icon msg -}
forum : Elm.Expression
forum =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forum"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forward_to_inbox: Material.Icons.Types.Icon msg -}
forward_to_inbox : Elm.Expression
forward_to_inbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forward_to_inbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hourglass_bottom: Material.Icons.Types.Icon msg -}
hourglass_bottom : Elm.Expression
hourglass_bottom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hourglass_bottom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hourglass_top: Material.Icons.Types.Icon msg -}
hourglass_top : Elm.Expression
hourglass_top =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hourglass_top"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hub: Material.Icons.Types.Icon msg -}
hub : Elm.Expression
hub =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hub"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| import_contacts: Material.Icons.Types.Icon msg -}
import_contacts : Elm.Expression
import_contacts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "import_contacts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| import_export: Material.Icons.Types.Icon msg -}
import_export : Elm.Expression
import_export =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "import_export"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| invert_colors_off: Material.Icons.Types.Icon msg -}
invert_colors_off : Elm.Expression
invert_colors_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "invert_colors_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| key: Material.Icons.Types.Icon msg -}
key : Elm.Expression
key =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "key"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| key_off: Material.Icons.Types.Icon msg -}
key_off : Elm.Expression
key_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "key_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| list_alt: Material.Icons.Types.Icon msg -}
list_alt : Elm.Expression
list_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "list_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| live_help: Material.Icons.Types.Icon msg -}
live_help : Elm.Expression
live_help =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "live_help"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| location_off: Material.Icons.Types.Icon msg -}
location_off : Elm.Expression
location_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "location_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| location_on: Material.Icons.Types.Icon msg -}
location_on : Elm.Expression
location_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "location_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mail_lock: Material.Icons.Types.Icon msg -}
mail_lock : Elm.Expression
mail_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mail_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mail_outline: Material.Icons.Types.Icon msg -}
mail_outline : Elm.Expression
mail_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mail_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_chat_read: Material.Icons.Types.Icon msg -}
mark_chat_read : Elm.Expression
mark_chat_read =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_chat_read"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_chat_unread: Material.Icons.Types.Icon msg -}
mark_chat_unread : Elm.Expression
mark_chat_unread =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_chat_unread"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_email_read: Material.Icons.Types.Icon msg -}
mark_email_read : Elm.Expression
mark_email_read =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_email_read"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_email_unread: Material.Icons.Types.Icon msg -}
mark_email_unread : Elm.Expression
mark_email_unread =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_email_unread"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mark_unread_chat_alt: Material.Icons.Types.Icon msg -}
mark_unread_chat_alt : Elm.Expression
mark_unread_chat_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mark_unread_chat_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| message: Material.Icons.Types.Icon msg -}
message : Elm.Expression
message =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "message"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mobile_screen_share: Material.Icons.Types.Icon msg -}
mobile_screen_share : Elm.Expression
mobile_screen_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mobile_screen_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| more_time: Material.Icons.Types.Icon msg -}
more_time : Elm.Expression
more_time =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "more_time"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nat: Material.Icons.Types.Icon msg -}
nat : Elm.Expression
nat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_sim: Material.Icons.Types.Icon msg -}
no_sim : Elm.Expression
no_sim =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_sim"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pause_presentation: Material.Icons.Types.Icon msg -}
pause_presentation : Elm.Expression
pause_presentation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pause_presentation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_add_disabled: Material.Icons.Types.Icon msg -}
person_add_disabled : Elm.Expression
person_add_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_add_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_search: Material.Icons.Types.Icon msg -}
person_search : Elm.Expression
person_search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone: Material.Icons.Types.Icon msg -}
phone : Elm.Expression
phone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_disabled: Material.Icons.Types.Icon msg -}
phone_disabled : Elm.Expression
phone_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_enabled: Material.Icons.Types.Icon msg -}
phone_enabled : Elm.Expression
phone_enabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_enabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink_erase: Material.Icons.Types.Icon msg -}
phonelink_erase : Elm.Expression
phonelink_erase =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink_erase"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink_lock: Material.Icons.Types.Icon msg -}
phonelink_lock : Elm.Expression
phonelink_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink_ring: Material.Icons.Types.Icon msg -}
phonelink_ring : Elm.Expression
phonelink_ring =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink_ring"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink_setup: Material.Icons.Types.Icon msg -}
phonelink_setup : Elm.Expression
phonelink_setup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink_setup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| portable_wifi_off: Material.Icons.Types.Icon msg -}
portable_wifi_off : Elm.Expression
portable_wifi_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "portable_wifi_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| present_to_all: Material.Icons.Types.Icon msg -}
present_to_all : Elm.Expression
present_to_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "present_to_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| print_disabled: Material.Icons.Types.Icon msg -}
print_disabled : Elm.Expression
print_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "print_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| qr_code: Material.Icons.Types.Icon msg -}
qr_code : Elm.Expression
qr_code =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "qr_code"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| qr_code_2: Material.Icons.Types.Icon msg -}
qr_code_2 : Elm.Expression
qr_code_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "qr_code_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| qr_code_scanner: Material.Icons.Types.Icon msg -}
qr_code_scanner : Elm.Expression
qr_code_scanner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "qr_code_scanner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| read_more: Material.Icons.Types.Icon msg -}
read_more : Elm.Expression
read_more =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "read_more"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ring_volume: Material.Icons.Types.Icon msg -}
ring_volume : Elm.Expression
ring_volume =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ring_volume"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rss_feed: Material.Icons.Types.Icon msg -}
rss_feed : Elm.Expression
rss_feed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rss_feed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rtt: Material.Icons.Types.Icon msg -}
rtt : Elm.Expression
rtt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rtt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_share: Material.Icons.Types.Icon msg -}
screen_share : Elm.Expression
screen_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| send_time_extension: Material.Icons.Types.Icon msg -}
send_time_extension : Elm.Expression
send_time_extension =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "send_time_extension"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_satisfied_alt: Material.Icons.Types.Icon msg -}
sentiment_satisfied_alt : Elm.Expression
sentiment_satisfied_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_satisfied_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sip: Material.Icons.Types.Icon msg -}
sip : Elm.Expression
sip =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sip"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speaker_phone: Material.Icons.Types.Icon msg -}
speaker_phone : Elm.Expression
speaker_phone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speaker_phone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spoke: Material.Icons.Types.Icon msg -}
spoke : Elm.Expression
spoke =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spoke"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stay_current_landscape: Material.Icons.Types.Icon msg -}
stay_current_landscape : Elm.Expression
stay_current_landscape =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stay_current_landscape"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stay_current_portrait: Material.Icons.Types.Icon msg -}
stay_current_portrait : Elm.Expression
stay_current_portrait =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stay_current_portrait"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stay_primary_landscape: Material.Icons.Types.Icon msg -}
stay_primary_landscape : Elm.Expression
stay_primary_landscape =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stay_primary_landscape"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stay_primary_portrait: Material.Icons.Types.Icon msg -}
stay_primary_portrait : Elm.Expression
stay_primary_portrait =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stay_primary_portrait"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stop_screen_share: Material.Icons.Types.Icon msg -}
stop_screen_share : Elm.Expression
stop_screen_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stop_screen_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| swap_calls: Material.Icons.Types.Icon msg -}
swap_calls : Elm.Expression
swap_calls =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "swap_calls"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| textsms: Material.Icons.Types.Icon msg -}
textsms : Elm.Expression
textsms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "textsms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unsubscribe: Material.Icons.Types.Icon msg -}
unsubscribe : Elm.Expression
unsubscribe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unsubscribe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| voicemail: Material.Icons.Types.Icon msg -}
voicemail : Elm.Expression
voicemail =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "voicemail"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vpn_key: Material.Icons.Types.Icon msg -}
vpn_key : Elm.Expression
vpn_key =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vpn_key"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vpn_key_off: Material.Icons.Types.Icon msg -}
vpn_key_off : Elm.Expression
vpn_key_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vpn_key_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_calling: Material.Icons.Types.Icon msg -}
wifi_calling : Elm.Expression
wifi_calling =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_calling"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add: Material.Icons.Types.Icon msg -}
add : Elm.Expression
add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_box: Material.Icons.Types.Icon msg -}
add_box : Elm.Expression
add_box =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_box"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_circle: Material.Icons.Types.Icon msg -}
add_circle : Elm.Expression
add_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_circle_outline: Material.Icons.Types.Icon msg -}
add_circle_outline : Elm.Expression
add_circle_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_circle_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_link: Material.Icons.Types.Icon msg -}
add_link : Elm.Expression
add_link =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_link"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| archive: Material.Icons.Types.Icon msg -}
archive : Elm.Expression
archive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "archive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attribution: Material.Icons.Types.Icon msg -}
attribution : Elm.Expression
attribution =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attribution"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| backspace: Material.Icons.Types.Icon msg -}
backspace : Elm.Expression
backspace =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "backspace"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ballot: Material.Icons.Types.Icon msg -}
ballot : Elm.Expression
ballot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ballot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| biotech: Material.Icons.Types.Icon msg -}
biotech : Elm.Expression
biotech =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "biotech"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| block: Material.Icons.Types.Icon msg -}
block : Elm.Expression
block =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "block"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bolt: Material.Icons.Types.Icon msg -}
bolt : Elm.Expression
bolt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bolt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| calculate: Material.Icons.Types.Icon msg -}
calculate : Elm.Expression
calculate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "calculate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| change_circle: Material.Icons.Types.Icon msg -}
change_circle : Elm.Expression
change_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "change_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| clear: Material.Icons.Types.Icon msg -}
clear : Elm.Expression
clear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "clear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_copy: Material.Icons.Types.Icon msg -}
content_copy : Elm.Expression
content_copy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_copy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_cut: Material.Icons.Types.Icon msg -}
content_cut : Elm.Expression
content_cut =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_cut"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_paste: Material.Icons.Types.Icon msg -}
content_paste : Elm.Expression
content_paste =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_paste"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_paste_go: Material.Icons.Types.Icon msg -}
content_paste_go : Elm.Expression
content_paste_go =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_paste_go"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_paste_off: Material.Icons.Types.Icon msg -}
content_paste_off : Elm.Expression
content_paste_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_paste_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| content_paste_search: Material.Icons.Types.Icon msg -}
content_paste_search : Elm.Expression
content_paste_search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "content_paste_search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| copy_all: Material.Icons.Types.Icon msg -}
copy_all : Elm.Expression
copy_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "copy_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| create: Material.Icons.Types.Icon msg -}
create : Elm.Expression
create =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "create"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| delete_sweep: Material.Icons.Types.Icon msg -}
delete_sweep : Elm.Expression
delete_sweep =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "delete_sweep"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| deselect: Material.Icons.Types.Icon msg -}
deselect : Elm.Expression
deselect =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "deselect"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drafts: Material.Icons.Types.Icon msg -}
drafts : Elm.Expression
drafts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drafts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dynamic_feed: Material.Icons.Types.Icon msg -}
dynamic_feed : Elm.Expression
dynamic_feed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dynamic_feed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_copy: Material.Icons.Types.Icon msg -}
file_copy : Elm.Expression
file_copy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_copy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_list: Material.Icons.Types.Icon msg -}
filter_list : Elm.Expression
filter_list =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_list"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_list_off: Material.Icons.Types.Icon msg -}
filter_list_off : Elm.Expression
filter_list_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_list_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flag: Material.Icons.Types.Icon msg -}
flag : Elm.Expression
flag =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flag"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flag_circle: Material.Icons.Types.Icon msg -}
flag_circle : Elm.Expression
flag_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flag_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| font_download: Material.Icons.Types.Icon msg -}
font_download : Elm.Expression
font_download =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "font_download"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| font_download_off: Material.Icons.Types.Icon msg -}
font_download_off : Elm.Expression
font_download_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "font_download_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forward: Material.Icons.Types.Icon msg -}
forward : Elm.Expression
forward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gesture: Material.Icons.Types.Icon msg -}
gesture : Elm.Expression
gesture =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gesture"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| how_to_reg: Material.Icons.Types.Icon msg -}
how_to_reg : Elm.Expression
how_to_reg =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "how_to_reg"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| how_to_vote: Material.Icons.Types.Icon msg -}
how_to_vote : Elm.Expression
how_to_vote =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "how_to_vote"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| inbox: Material.Icons.Types.Icon msg -}
inbox : Elm.Expression
inbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "inbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insights: Material.Icons.Types.Icon msg -}
insights : Elm.Expression
insights =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insights"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| inventory: Material.Icons.Types.Icon msg -}
inventory : Elm.Expression
inventory =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "inventory"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| inventory_2: Material.Icons.Types.Icon msg -}
inventory_2 : Elm.Expression
inventory_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "inventory_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| link: Material.Icons.Types.Icon msg -}
link : Elm.Expression
link =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "link"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| link_off: Material.Icons.Types.Icon msg -}
link_off : Elm.Expression
link_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "link_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| low_priority: Material.Icons.Types.Icon msg -}
low_priority : Elm.Expression
low_priority =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "low_priority"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mail: Material.Icons.Types.Icon msg -}
mail : Elm.Expression
mail =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mail"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| markunread: Material.Icons.Types.Icon msg -}
markunread : Elm.Expression
markunread =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "markunread"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| move_to_inbox: Material.Icons.Types.Icon msg -}
move_to_inbox : Elm.Expression
move_to_inbox =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "move_to_inbox"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| next_week: Material.Icons.Types.Icon msg -}
next_week : Elm.Expression
next_week =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "next_week"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| outlined_flag: Material.Icons.Types.Icon msg -}
outlined_flag : Elm.Expression
outlined_flag =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "outlined_flag"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| policy: Material.Icons.Types.Icon msg -}
policy : Elm.Expression
policy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "policy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| push_pin: Material.Icons.Types.Icon msg -}
push_pin : Elm.Expression
push_pin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "push_pin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| redo: Material.Icons.Types.Icon msg -}
redo : Elm.Expression
redo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "redo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove: Material.Icons.Types.Icon msg -}
remove : Elm.Expression
remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_circle: Material.Icons.Types.Icon msg -}
remove_circle : Elm.Expression
remove_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_circle_outline: Material.Icons.Types.Icon msg -}
remove_circle_outline : Elm.Expression
remove_circle_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_circle_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reply: Material.Icons.Types.Icon msg -}
reply : Elm.Expression
reply =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reply"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reply_all: Material.Icons.Types.Icon msg -}
reply_all : Elm.Expression
reply_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reply_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| report: Material.Icons.Types.Icon msg -}
report : Elm.Expression
report =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "report"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| report_gmailerrorred: Material.Icons.Types.Icon msg -}
report_gmailerrorred : Elm.Expression
report_gmailerrorred =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "report_gmailerrorred"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| report_off: Material.Icons.Types.Icon msg -}
report_off : Elm.Expression
report_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "report_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| save: Material.Icons.Types.Icon msg -}
save : Elm.Expression
save =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "save"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| save_alt: Material.Icons.Types.Icon msg -}
save_alt : Elm.Expression
save_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "save_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| save_as: Material.Icons.Types.Icon msg -}
save_as : Elm.Expression
save_as =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "save_as"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| select_all: Material.Icons.Types.Icon msg -}
select_all : Elm.Expression
select_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "select_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| send: Material.Icons.Types.Icon msg -}
send : Elm.Expression
send =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "send"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shield: Material.Icons.Types.Icon msg -}
shield : Elm.Expression
shield =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shield"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sort: Material.Icons.Types.Icon msg -}
sort : Elm.Expression
sort =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sort"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| square_foot: Material.Icons.Types.Icon msg -}
square_foot : Elm.Expression
square_foot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "square_foot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stacked_bar_chart: Material.Icons.Types.Icon msg -}
stacked_bar_chart : Elm.Expression
stacked_bar_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stacked_bar_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stream: Material.Icons.Types.Icon msg -}
stream : Elm.Expression
stream =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stream"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tag: Material.Icons.Types.Icon msg -}
tag : Elm.Expression
tag =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tag"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_format: Material.Icons.Types.Icon msg -}
text_format : Elm.Expression
text_format =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_format"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unarchive: Material.Icons.Types.Icon msg -}
unarchive : Elm.Expression
unarchive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unarchive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| undo: Material.Icons.Types.Icon msg -}
undo : Elm.Expression
undo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "undo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| upcoming: Material.Icons.Types.Icon msg -}
upcoming : Elm.Expression
upcoming =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "upcoming"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| waves: Material.Icons.Types.Icon msg -}
waves : Elm.Expression
waves =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "waves"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| web_stories: Material.Icons.Types.Icon msg -}
web_stories : Elm.Expression
web_stories =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "web_stories"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| weekend: Material.Icons.Types.Icon msg -}
weekend : Elm.Expression
weekend =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "weekend"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| where_to_vote: Material.Icons.Types.Icon msg -}
where_to_vote : Elm.Expression
where_to_vote =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "where_to_vote"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| one_x_mobiledata: Material.Icons.Types.Icon msg -}
one_x_mobiledata : Elm.Expression
one_x_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "one_x_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thirty_fps: Material.Icons.Types.Icon msg -}
thirty_fps : Elm.Expression
thirty_fps =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thirty_fps"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_g_mobiledata: Material.Icons.Types.Icon msg -}
three_g_mobiledata : Elm.Expression
three_g_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_g_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| four_g_mobiledata: Material.Icons.Types.Icon msg -}
four_g_mobiledata : Elm.Expression
four_g_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "four_g_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| four_g_plus_mobiledata: Material.Icons.Types.Icon msg -}
four_g_plus_mobiledata : Elm.Expression
four_g_plus_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "four_g_plus_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sixty_fps: Material.Icons.Types.Icon msg -}
sixty_fps : Elm.Expression
sixty_fps =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sixty_fps"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| access_alarm: Material.Icons.Types.Icon msg -}
access_alarm : Elm.Expression
access_alarm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "access_alarm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| access_alarms: Material.Icons.Types.Icon msg -}
access_alarms : Elm.Expression
access_alarms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "access_alarms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| access_time: Material.Icons.Types.Icon msg -}
access_time : Elm.Expression
access_time =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "access_time"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| access_time_filled: Material.Icons.Types.Icon msg -}
access_time_filled : Elm.Expression
access_time_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "access_time_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ad_units: Material.Icons.Types.Icon msg -}
ad_units : Elm.Expression
ad_units =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ad_units"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_alarm: Material.Icons.Types.Icon msg -}
add_alarm : Elm.Expression
add_alarm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_alarm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_to_home_screen: Material.Icons.Types.Icon msg -}
add_to_home_screen : Elm.Expression
add_to_home_screen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_to_home_screen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| air: Material.Icons.Types.Icon msg -}
air : Elm.Expression
air =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "air"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airplane_ticket: Material.Icons.Types.Icon msg -}
airplane_ticket : Elm.Expression
airplane_ticket =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airplane_ticket"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airplanemode_active: Material.Icons.Types.Icon msg -}
airplanemode_active : Elm.Expression
airplanemode_active =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airplanemode_active"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airplanemode_inactive: Material.Icons.Types.Icon msg -}
airplanemode_inactive : Elm.Expression
airplanemode_inactive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airplanemode_inactive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| aod: Material.Icons.Types.Icon msg -}
aod : Elm.Expression
aod =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "aod"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_0_bar: Material.Icons.Types.Icon msg -}
battery_0_bar : Elm.Expression
battery_0_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_0_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_1_bar: Material.Icons.Types.Icon msg -}
battery_1_bar : Elm.Expression
battery_1_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_1_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_2_bar: Material.Icons.Types.Icon msg -}
battery_2_bar : Elm.Expression
battery_2_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_2_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_3_bar: Material.Icons.Types.Icon msg -}
battery_3_bar : Elm.Expression
battery_3_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_3_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_4_bar: Material.Icons.Types.Icon msg -}
battery_4_bar : Elm.Expression
battery_4_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_4_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_5_bar: Material.Icons.Types.Icon msg -}
battery_5_bar : Elm.Expression
battery_5_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_5_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_6_bar: Material.Icons.Types.Icon msg -}
battery_6_bar : Elm.Expression
battery_6_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_6_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_alert: Material.Icons.Types.Icon msg -}
battery_alert : Elm.Expression
battery_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_charging_full: Material.Icons.Types.Icon msg -}
battery_charging_full : Elm.Expression
battery_charging_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_charging_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_full: Material.Icons.Types.Icon msg -}
battery_full : Elm.Expression
battery_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_saver: Material.Icons.Types.Icon msg -}
battery_saver : Elm.Expression
battery_saver =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_saver"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_std: Material.Icons.Types.Icon msg -}
battery_std : Elm.Expression
battery_std =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_std"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| battery_unknown: Material.Icons.Types.Icon msg -}
battery_unknown : Elm.Expression
battery_unknown =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "battery_unknown"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bloodtype: Material.Icons.Types.Icon msg -}
bloodtype : Elm.Expression
bloodtype =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bloodtype"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth: Material.Icons.Types.Icon msg -}
bluetooth : Elm.Expression
bluetooth =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth_connected: Material.Icons.Types.Icon msg -}
bluetooth_connected : Elm.Expression
bluetooth_connected =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth_connected"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth_disabled: Material.Icons.Types.Icon msg -}
bluetooth_disabled : Elm.Expression
bluetooth_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth_drive: Material.Icons.Types.Icon msg -}
bluetooth_drive : Elm.Expression
bluetooth_drive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth_drive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth_searching: Material.Icons.Types.Icon msg -}
bluetooth_searching : Elm.Expression
bluetooth_searching =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth_searching"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_auto: Material.Icons.Types.Icon msg -}
brightness_auto : Elm.Expression
brightness_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_high: Material.Icons.Types.Icon msg -}
brightness_high : Elm.Expression
brightness_high =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_high"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_low: Material.Icons.Types.Icon msg -}
brightness_low : Elm.Expression
brightness_low =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_low"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_medium: Material.Icons.Types.Icon msg -}
brightness_medium : Elm.Expression
brightness_medium =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_medium"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cable: Material.Icons.Types.Icon msg -}
cable : Elm.Expression
cable =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cable"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cameraswitch: Material.Icons.Types.Icon msg -}
cameraswitch : Elm.Expression
cameraswitch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cameraswitch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| credit_score: Material.Icons.Types.Icon msg -}
credit_score : Elm.Expression
credit_score =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "credit_score"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dark_mode: Material.Icons.Types.Icon msg -}
dark_mode : Elm.Expression
dark_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dark_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_saver_off: Material.Icons.Types.Icon msg -}
data_saver_off : Elm.Expression
data_saver_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_saver_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_saver_on: Material.Icons.Types.Icon msg -}
data_saver_on : Elm.Expression
data_saver_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_saver_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_usage: Material.Icons.Types.Icon msg -}
data_usage : Elm.Expression
data_usage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_usage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dataset: Material.Icons.Types.Icon msg -}
dataset : Elm.Expression
dataset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dataset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dataset_linked: Material.Icons.Types.Icon msg -}
dataset_linked : Elm.Expression
dataset_linked =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dataset_linked"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| developer_mode: Material.Icons.Types.Icon msg -}
developer_mode : Elm.Expression
developer_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "developer_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| device_thermostat: Material.Icons.Types.Icon msg -}
device_thermostat : Elm.Expression
device_thermostat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "device_thermostat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| devices: Material.Icons.Types.Icon msg -}
devices : Elm.Expression
devices =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "devices"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| devices_fold: Material.Icons.Types.Icon msg -}
devices_fold : Elm.Expression
devices_fold =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "devices_fold"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| discount: Material.Icons.Types.Icon msg -}
discount : Elm.Expression
discount =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "discount"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_disturb_on_total_silence: Material.Icons.Types.Icon msg -}
do_not_disturb_on_total_silence : Elm.Expression
do_not_disturb_on_total_silence =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_disturb_on_total_silence"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dvr: Material.Icons.Types.Icon msg -}
dvr : Elm.Expression
dvr =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dvr"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| e_mobiledata: Material.Icons.Types.Icon msg -}
e_mobiledata : Elm.Expression
e_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "e_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edgesensor_high: Material.Icons.Types.Icon msg -}
edgesensor_high : Elm.Expression
edgesensor_high =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edgesensor_high"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edgesensor_low: Material.Icons.Types.Icon msg -}
edgesensor_low : Elm.Expression
edgesensor_low =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edgesensor_low"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flashlight_off: Material.Icons.Types.Icon msg -}
flashlight_off : Elm.Expression
flashlight_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flashlight_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flashlight_on: Material.Icons.Types.Icon msg -}
flashlight_on : Elm.Expression
flashlight_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flashlight_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fluorescent: Material.Icons.Types.Icon msg -}
fluorescent : Elm.Expression
fluorescent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fluorescent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fmd_bad: Material.Icons.Types.Icon msg -}
fmd_bad : Elm.Expression
fmd_bad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fmd_bad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fmd_good: Material.Icons.Types.Icon msg -}
fmd_good : Elm.Expression
fmd_good =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fmd_good"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| g_mobiledata: Material.Icons.Types.Icon msg -}
g_mobiledata : Elm.Expression
g_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "g_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gpp_bad: Material.Icons.Types.Icon msg -}
gpp_bad : Elm.Expression
gpp_bad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gpp_bad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gpp_good: Material.Icons.Types.Icon msg -}
gpp_good : Elm.Expression
gpp_good =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gpp_good"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gpp_maybe: Material.Icons.Types.Icon msg -}
gpp_maybe : Elm.Expression
gpp_maybe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gpp_maybe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gps_fixed: Material.Icons.Types.Icon msg -}
gps_fixed : Elm.Expression
gps_fixed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gps_fixed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gps_not_fixed: Material.Icons.Types.Icon msg -}
gps_not_fixed : Elm.Expression
gps_not_fixed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gps_not_fixed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gps_off: Material.Icons.Types.Icon msg -}
gps_off : Elm.Expression
gps_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gps_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| graphic_eq: Material.Icons.Types.Icon msg -}
graphic_eq : Elm.Expression
graphic_eq =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "graphic_eq"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_3x3: Material.Icons.Types.Icon msg -}
grid_3x3 : Elm.Expression
grid_3x3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_3x3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_4x4: Material.Icons.Types.Icon msg -}
grid_4x4 : Elm.Expression
grid_4x4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_4x4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_goldenratio: Material.Icons.Types.Icon msg -}
grid_goldenratio : Elm.Expression
grid_goldenratio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_goldenratio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| h_mobiledata: Material.Icons.Types.Icon msg -}
h_mobiledata : Elm.Expression
h_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "h_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| h_plus_mobiledata: Material.Icons.Types.Icon msg -}
h_plus_mobiledata : Elm.Expression
h_plus_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "h_plus_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_auto: Material.Icons.Types.Icon msg -}
hdr_auto : Elm.Expression
hdr_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_auto_select: Material.Icons.Types.Icon msg -}
hdr_auto_select : Elm.Expression
hdr_auto_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_auto_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_off_select: Material.Icons.Types.Icon msg -}
hdr_off_select : Elm.Expression
hdr_off_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_off_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_on_select: Material.Icons.Types.Icon msg -}
hdr_on_select : Elm.Expression
hdr_on_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_on_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lan: Material.Icons.Types.Icon msg -}
lan : Elm.Expression
lan =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lan"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lens_blur: Material.Icons.Types.Icon msg -}
lens_blur : Elm.Expression
lens_blur =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lens_blur"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| light_mode: Material.Icons.Types.Icon msg -}
light_mode : Elm.Expression
light_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "light_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| location_disabled: Material.Icons.Types.Icon msg -}
location_disabled : Elm.Expression
location_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "location_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| location_searching: Material.Icons.Types.Icon msg -}
location_searching : Elm.Expression
location_searching =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "location_searching"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lte_mobiledata: Material.Icons.Types.Icon msg -}
lte_mobiledata : Elm.Expression
lte_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lte_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lte_plus_mobiledata: Material.Icons.Types.Icon msg -}
lte_plus_mobiledata : Elm.Expression
lte_plus_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lte_plus_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| macro_off: Material.Icons.Types.Icon msg -}
macro_off : Elm.Expression
macro_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "macro_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| media_bluetooth_off: Material.Icons.Types.Icon msg -}
media_bluetooth_off : Elm.Expression
media_bluetooth_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "media_bluetooth_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| media_bluetooth_on: Material.Icons.Types.Icon msg -}
media_bluetooth_on : Elm.Expression
media_bluetooth_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "media_bluetooth_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| medication: Material.Icons.Types.Icon msg -}
medication : Elm.Expression
medication =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "medication"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| medication_liquid: Material.Icons.Types.Icon msg -}
medication_liquid : Elm.Expression
medication_liquid =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "medication_liquid"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mobile_friendly: Material.Icons.Types.Icon msg -}
mobile_friendly : Elm.Expression
mobile_friendly =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mobile_friendly"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mobile_off: Material.Icons.Types.Icon msg -}
mobile_off : Elm.Expression
mobile_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mobile_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mobiledata_off: Material.Icons.Types.Icon msg -}
mobiledata_off : Elm.Expression
mobiledata_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mobiledata_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_night: Material.Icons.Types.Icon msg -}
mode_night : Elm.Expression
mode_night =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_night"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_standby: Material.Icons.Types.Icon msg -}
mode_standby : Elm.Expression
mode_standby =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_standby"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| monitor_heart: Material.Icons.Types.Icon msg -}
monitor_heart : Elm.Expression
monitor_heart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "monitor_heart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| monitor_weight: Material.Icons.Types.Icon msg -}
monitor_weight : Elm.Expression
monitor_weight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "monitor_weight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nearby_error: Material.Icons.Types.Icon msg -}
nearby_error : Elm.Expression
nearby_error =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nearby_error"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nearby_off: Material.Icons.Types.Icon msg -}
nearby_off : Elm.Expression
nearby_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nearby_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_cell: Material.Icons.Types.Icon msg -}
network_cell : Elm.Expression
network_cell =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_cell"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_wifi: Material.Icons.Types.Icon msg -}
network_wifi : Elm.Expression
network_wifi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_wifi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_wifi_1_bar: Material.Icons.Types.Icon msg -}
network_wifi_1_bar : Elm.Expression
network_wifi_1_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_wifi_1_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_wifi_2_bar: Material.Icons.Types.Icon msg -}
network_wifi_2_bar : Elm.Expression
network_wifi_2_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_wifi_2_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_wifi_3_bar: Material.Icons.Types.Icon msg -}
network_wifi_3_bar : Elm.Expression
network_wifi_3_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_wifi_3_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nfc: Material.Icons.Types.Icon msg -}
nfc : Elm.Expression
nfc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nfc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nightlight: Material.Icons.Types.Icon msg -}
nightlight : Elm.Expression
nightlight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nightlight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| note_alt: Material.Icons.Types.Icon msg -}
note_alt : Elm.Expression
note_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "note_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| password: Material.Icons.Types.Icon msg -}
password : Elm.Expression
password =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "password"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pattern: Material.Icons.Types.Icon msg -}
pattern : Elm.Expression
pattern =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pattern"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phishing: Material.Icons.Types.Icon msg -}
phishing : Elm.Expression
phishing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phishing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pin: Material.Icons.Types.Icon msg -}
pin : Elm.Expression
pin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| play_lesson: Material.Icons.Types.Icon msg -}
play_lesson : Elm.Expression
play_lesson =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "play_lesson"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| price_change: Material.Icons.Types.Icon msg -}
price_change : Elm.Expression
price_change =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "price_change"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| price_check: Material.Icons.Types.Icon msg -}
price_check : Elm.Expression
price_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "price_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| punch_clock: Material.Icons.Types.Icon msg -}
punch_clock : Elm.Expression
punch_clock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "punch_clock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| quiz: Material.Icons.Types.Icon msg -}
quiz : Elm.Expression
quiz =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "quiz"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| r_mobiledata: Material.Icons.Types.Icon msg -}
r_mobiledata : Elm.Expression
r_mobiledata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "r_mobiledata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| radar: Material.Icons.Types.Icon msg -}
radar : Elm.Expression
radar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "radar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remember_me: Material.Icons.Types.Icon msg -}
remember_me : Elm.Expression
remember_me =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remember_me"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reset_tv: Material.Icons.Types.Icon msg -}
reset_tv : Elm.Expression
reset_tv =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reset_tv"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restart_alt: Material.Icons.Types.Icon msg -}
restart_alt : Elm.Expression
restart_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restart_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reviews: Material.Icons.Types.Icon msg -}
reviews : Elm.Expression
reviews =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reviews"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rsvp: Material.Icons.Types.Icon msg -}
rsvp : Elm.Expression
rsvp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rsvp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_lock_landscape: Material.Icons.Types.Icon msg -}
screen_lock_landscape : Elm.Expression
screen_lock_landscape =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_lock_landscape"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_lock_portrait: Material.Icons.Types.Icon msg -}
screen_lock_portrait : Elm.Expression
screen_lock_portrait =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_lock_portrait"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_lock_rotation: Material.Icons.Types.Icon msg -}
screen_lock_rotation : Elm.Expression
screen_lock_rotation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_lock_rotation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_rotation: Material.Icons.Types.Icon msg -}
screen_rotation : Elm.Expression
screen_rotation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_rotation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_search_desktop: Material.Icons.Types.Icon msg -}
screen_search_desktop : Elm.Expression
screen_search_desktop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_search_desktop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screenshot: Material.Icons.Types.Icon msg -}
screenshot : Elm.Expression
screenshot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screenshot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screenshot_monitor: Material.Icons.Types.Icon msg -}
screenshot_monitor : Elm.Expression
screenshot_monitor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screenshot_monitor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sd_storage: Material.Icons.Types.Icon msg -}
sd_storage : Elm.Expression
sd_storage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sd_storage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| security_update: Material.Icons.Types.Icon msg -}
security_update : Elm.Expression
security_update =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "security_update"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| security_update_good: Material.Icons.Types.Icon msg -}
security_update_good : Elm.Expression
security_update_good =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "security_update_good"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| security_update_warning: Material.Icons.Types.Icon msg -}
security_update_warning : Elm.Expression
security_update_warning =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "security_update_warning"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sell: Material.Icons.Types.Icon msg -}
sell : Elm.Expression
sell =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sell"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| send_to_mobile: Material.Icons.Types.Icon msg -}
send_to_mobile : Elm.Expression
send_to_mobile =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "send_to_mobile"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_suggest: Material.Icons.Types.Icon msg -}
settings_suggest : Elm.Expression
settings_suggest =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_suggest"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| settings_system_daydream: Material.Icons.Types.Icon msg -}
settings_system_daydream : Elm.Expression
settings_system_daydream =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "settings_system_daydream"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| share_location: Material.Icons.Types.Icon msg -}
share_location : Elm.Expression
share_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "share_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shortcut: Material.Icons.Types.Icon msg -}
shortcut : Elm.Expression
shortcut =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shortcut"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_0_bar: Material.Icons.Types.Icon msg -}
signal_cellular_0_bar : Elm.Expression
signal_cellular_0_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_0_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_4_bar: Material.Icons.Types.Icon msg -}
signal_cellular_4_bar : Elm.Expression
signal_cellular_4_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_4_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_alt: Material.Icons.Types.Icon msg -}
signal_cellular_alt : Elm.Expression
signal_cellular_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_alt_1_bar: Material.Icons.Types.Icon msg -}
signal_cellular_alt_1_bar : Elm.Expression
signal_cellular_alt_1_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_alt_1_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_alt_2_bar: Material.Icons.Types.Icon msg -}
signal_cellular_alt_2_bar : Elm.Expression
signal_cellular_alt_2_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_alt_2_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_connected_no_internet_0_bar: Material.Icons.Types.Icon msg -}
signal_cellular_connected_no_internet_0_bar : Elm.Expression
signal_cellular_connected_no_internet_0_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_connected_no_internet_0_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_connected_no_internet_4_bar: Material.Icons.Types.Icon msg -}
signal_cellular_connected_no_internet_4_bar : Elm.Expression
signal_cellular_connected_no_internet_4_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_connected_no_internet_4_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_no_sim: Material.Icons.Types.Icon msg -}
signal_cellular_no_sim : Elm.Expression
signal_cellular_no_sim =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_no_sim"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_nodata: Material.Icons.Types.Icon msg -}
signal_cellular_nodata : Elm.Expression
signal_cellular_nodata =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_nodata"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_null: Material.Icons.Types.Icon msg -}
signal_cellular_null : Elm.Expression
signal_cellular_null =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_null"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_cellular_off: Material.Icons.Types.Icon msg -}
signal_cellular_off : Elm.Expression
signal_cellular_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_cellular_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_0_bar: Material.Icons.Types.Icon msg -}
signal_wifi_0_bar : Elm.Expression
signal_wifi_0_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_0_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_4_bar: Material.Icons.Types.Icon msg -}
signal_wifi_4_bar : Elm.Expression
signal_wifi_4_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_4_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_4_bar_lock: Material.Icons.Types.Icon msg -}
signal_wifi_4_bar_lock : Elm.Expression
signal_wifi_4_bar_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_4_bar_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_bad: Material.Icons.Types.Icon msg -}
signal_wifi_bad : Elm.Expression
signal_wifi_bad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_bad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_connected_no_internet_4: Material.Icons.Types.Icon msg -}
signal_wifi_connected_no_internet_4 : Elm.Expression
signal_wifi_connected_no_internet_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_connected_no_internet_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_off: Material.Icons.Types.Icon msg -}
signal_wifi_off : Elm.Expression
signal_wifi_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_statusbar_4_bar: Material.Icons.Types.Icon msg -}
signal_wifi_statusbar_4_bar : Elm.Expression
signal_wifi_statusbar_4_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_statusbar_4_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_statusbar_connected_no_internet_4: Material.Icons.Types.Icon msg -}
signal_wifi_statusbar_connected_no_internet_4 : Elm.Expression
signal_wifi_statusbar_connected_no_internet_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_statusbar_connected_no_internet_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signal_wifi_statusbar_null: Material.Icons.Types.Icon msg -}
signal_wifi_statusbar_null : Elm.Expression
signal_wifi_statusbar_null =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signal_wifi_statusbar_null"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sim_card_download: Material.Icons.Types.Icon msg -}
sim_card_download : Elm.Expression
sim_card_download =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sim_card_download"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| splitscreen: Material.Icons.Types.Icon msg -}
splitscreen : Elm.Expression
splitscreen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "splitscreen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_score: Material.Icons.Types.Icon msg -}
sports_score : Elm.Expression
sports_score =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_score"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ssid_chart: Material.Icons.Types.Icon msg -}
ssid_chart : Elm.Expression
ssid_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ssid_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| storage: Material.Icons.Types.Icon msg -}
storage : Elm.Expression
storage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "storage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| storm: Material.Icons.Types.Icon msg -}
storm : Elm.Expression
storm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "storm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| summarize: Material.Icons.Types.Icon msg -}
summarize : Elm.Expression
summarize =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "summarize"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| system_security_update: Material.Icons.Types.Icon msg -}
system_security_update : Elm.Expression
system_security_update =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "system_security_update"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| system_security_update_good: Material.Icons.Types.Icon msg -}
system_security_update_good : Elm.Expression
system_security_update_good =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "system_security_update_good"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| system_security_update_warning: Material.Icons.Types.Icon msg -}
system_security_update_warning : Elm.Expression
system_security_update_warning =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "system_security_update_warning"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| task: Material.Icons.Types.Icon msg -}
task : Elm.Expression
task =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "task"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thermostat: Material.Icons.Types.Icon msg -}
thermostat : Elm.Expression
thermostat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thermostat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer_10_select: Material.Icons.Types.Icon msg -}
timer_10_select : Elm.Expression
timer_10_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer_10_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer_3_select: Material.Icons.Types.Icon msg -}
timer_3_select : Elm.Expression
timer_3_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer_3_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tungsten: Material.Icons.Types.Icon msg -}
tungsten : Elm.Expression
tungsten =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tungsten"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| usb: Material.Icons.Types.Icon msg -}
usb : Elm.Expression
usb =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "usb"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| usb_off: Material.Icons.Types.Icon msg -}
usb_off : Elm.Expression
usb_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "usb_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wallpaper: Material.Icons.Types.Icon msg -}
wallpaper : Elm.Expression
wallpaper =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wallpaper"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| water: Material.Icons.Types.Icon msg -}
water : Elm.Expression
water =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "water"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| widgets: Material.Icons.Types.Icon msg -}
widgets : Elm.Expression
widgets =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "widgets"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_1_bar: Material.Icons.Types.Icon msg -}
wifi_1_bar : Elm.Expression
wifi_1_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_1_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_2_bar: Material.Icons.Types.Icon msg -}
wifi_2_bar : Elm.Expression
wifi_2_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_2_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_calling_3: Material.Icons.Types.Icon msg -}
wifi_calling_3 : Elm.Expression
wifi_calling_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_calling_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_channel: Material.Icons.Types.Icon msg -}
wifi_channel : Elm.Expression
wifi_channel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_channel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_find: Material.Icons.Types.Icon msg -}
wifi_find : Elm.Expression
wifi_find =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_find"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_lock: Material.Icons.Types.Icon msg -}
wifi_lock : Elm.Expression
wifi_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_password: Material.Icons.Types.Icon msg -}
wifi_password : Elm.Expression
wifi_password =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_password"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_tethering: Material.Icons.Types.Icon msg -}
wifi_tethering : Elm.Expression
wifi_tethering =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_tethering"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_tethering_error: Material.Icons.Types.Icon msg -}
wifi_tethering_error : Elm.Expression
wifi_tethering_error =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_tethering_error"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_tethering_off: Material.Icons.Types.Icon msg -}
wifi_tethering_off : Elm.Expression
wifi_tethering_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_tethering_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_chart: Material.Icons.Types.Icon msg -}
add_chart : Elm.Expression
add_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_comment: Material.Icons.Types.Icon msg -}
add_comment : Elm.Expression
add_comment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_comment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_horizontal_center: Material.Icons.Types.Icon msg -}
align_horizontal_center : Elm.Expression
align_horizontal_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_horizontal_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_horizontal_left: Material.Icons.Types.Icon msg -}
align_horizontal_left : Elm.Expression
align_horizontal_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_horizontal_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_horizontal_right: Material.Icons.Types.Icon msg -}
align_horizontal_right : Elm.Expression
align_horizontal_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_horizontal_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_vertical_bottom: Material.Icons.Types.Icon msg -}
align_vertical_bottom : Elm.Expression
align_vertical_bottom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_vertical_bottom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_vertical_center: Material.Icons.Types.Icon msg -}
align_vertical_center : Elm.Expression
align_vertical_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_vertical_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| align_vertical_top: Material.Icons.Types.Icon msg -}
align_vertical_top : Elm.Expression
align_vertical_top =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "align_vertical_top"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| area_chart: Material.Icons.Types.Icon msg -}
area_chart : Elm.Expression
area_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "area_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attach_file: Material.Icons.Types.Icon msg -}
attach_file : Elm.Expression
attach_file =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attach_file"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attach_money: Material.Icons.Types.Icon msg -}
attach_money : Elm.Expression
attach_money =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attach_money"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_graph: Material.Icons.Types.Icon msg -}
auto_graph : Elm.Expression
auto_graph =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_graph"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bar_chart: Material.Icons.Types.Icon msg -}
bar_chart : Elm.Expression
bar_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bar_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_all: Material.Icons.Types.Icon msg -}
border_all : Elm.Expression
border_all =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_all"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_bottom: Material.Icons.Types.Icon msg -}
border_bottom : Elm.Expression
border_bottom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_bottom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_clear: Material.Icons.Types.Icon msg -}
border_clear : Elm.Expression
border_clear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_clear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_color: Material.Icons.Types.Icon msg -}
border_color : Elm.Expression
border_color =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_color"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_horizontal: Material.Icons.Types.Icon msg -}
border_horizontal : Elm.Expression
border_horizontal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_horizontal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_inner: Material.Icons.Types.Icon msg -}
border_inner : Elm.Expression
border_inner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_inner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_left: Material.Icons.Types.Icon msg -}
border_left : Elm.Expression
border_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_outer: Material.Icons.Types.Icon msg -}
border_outer : Elm.Expression
border_outer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_outer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_right: Material.Icons.Types.Icon msg -}
border_right : Elm.Expression
border_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_style: Material.Icons.Types.Icon msg -}
border_style : Elm.Expression
border_style =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_style"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_top: Material.Icons.Types.Icon msg -}
border_top : Elm.Expression
border_top =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_top"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| border_vertical: Material.Icons.Types.Icon msg -}
border_vertical : Elm.Expression
border_vertical =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "border_vertical"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bubble_chart: Material.Icons.Types.Icon msg -}
bubble_chart : Elm.Expression
bubble_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bubble_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| candlestick_chart: Material.Icons.Types.Icon msg -}
candlestick_chart : Elm.Expression
candlestick_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "candlestick_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| checklist: Material.Icons.Types.Icon msg -}
checklist : Elm.Expression
checklist =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "checklist"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| checklist_rtl: Material.Icons.Types.Icon msg -}
checklist_rtl : Elm.Expression
checklist_rtl =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "checklist_rtl"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_array: Material.Icons.Types.Icon msg -}
data_array : Elm.Expression
data_array =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_array"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| data_object: Material.Icons.Types.Icon msg -}
data_object : Elm.Expression
data_object =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "data_object"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drag_handle: Material.Icons.Types.Icon msg -}
drag_handle : Elm.Expression
drag_handle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drag_handle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| draw: Material.Icons.Types.Icon msg -}
draw : Elm.Expression
draw =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "draw"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_note: Material.Icons.Types.Icon msg -}
edit_note : Elm.Expression
edit_note =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_note"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_align_center: Material.Icons.Types.Icon msg -}
format_align_center : Elm.Expression
format_align_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_align_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_align_justify: Material.Icons.Types.Icon msg -}
format_align_justify : Elm.Expression
format_align_justify =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_align_justify"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_align_left: Material.Icons.Types.Icon msg -}
format_align_left : Elm.Expression
format_align_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_align_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_align_right: Material.Icons.Types.Icon msg -}
format_align_right : Elm.Expression
format_align_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_align_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_bold: Material.Icons.Types.Icon msg -}
format_bold : Elm.Expression
format_bold =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_bold"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_clear: Material.Icons.Types.Icon msg -}
format_clear : Elm.Expression
format_clear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_clear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_color_fill: Material.Icons.Types.Icon msg -}
format_color_fill : Elm.Expression
format_color_fill =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_color_fill"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_color_reset: Material.Icons.Types.Icon msg -}
format_color_reset : Elm.Expression
format_color_reset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_color_reset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_color_text: Material.Icons.Types.Icon msg -}
format_color_text : Elm.Expression
format_color_text =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_color_text"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_indent_decrease: Material.Icons.Types.Icon msg -}
format_indent_decrease : Elm.Expression
format_indent_decrease =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_indent_decrease"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_indent_increase: Material.Icons.Types.Icon msg -}
format_indent_increase : Elm.Expression
format_indent_increase =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_indent_increase"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_italic: Material.Icons.Types.Icon msg -}
format_italic : Elm.Expression
format_italic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_italic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_line_spacing: Material.Icons.Types.Icon msg -}
format_line_spacing : Elm.Expression
format_line_spacing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_line_spacing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_list_bulleted: Material.Icons.Types.Icon msg -}
format_list_bulleted : Elm.Expression
format_list_bulleted =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_list_bulleted"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_list_numbered: Material.Icons.Types.Icon msg -}
format_list_numbered : Elm.Expression
format_list_numbered =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_list_numbered"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_list_numbered_rtl: Material.Icons.Types.Icon msg -}
format_list_numbered_rtl : Elm.Expression
format_list_numbered_rtl =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_list_numbered_rtl"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_paint: Material.Icons.Types.Icon msg -}
format_paint : Elm.Expression
format_paint =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_paint"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_quote: Material.Icons.Types.Icon msg -}
format_quote : Elm.Expression
format_quote =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_quote"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_shapes: Material.Icons.Types.Icon msg -}
format_shapes : Elm.Expression
format_shapes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_shapes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_size: Material.Icons.Types.Icon msg -}
format_size : Elm.Expression
format_size =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_size"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_strikethrough: Material.Icons.Types.Icon msg -}
format_strikethrough : Elm.Expression
format_strikethrough =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_strikethrough"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_textdirection_l_to_r: Material.Icons.Types.Icon msg -}
format_textdirection_l_to_r : Elm.Expression
format_textdirection_l_to_r =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_textdirection_l_to_r"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_textdirection_r_to_l: Material.Icons.Types.Icon msg -}
format_textdirection_r_to_l : Elm.Expression
format_textdirection_r_to_l =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_textdirection_r_to_l"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_underlined: Material.Icons.Types.Icon msg -}
format_underlined : Elm.Expression
format_underlined =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_underlined"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| functions: Material.Icons.Types.Icon msg -}
functions : Elm.Expression
functions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "functions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| height: Material.Icons.Types.Icon msg -}
height : Elm.Expression
height =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "height"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hexagon: Material.Icons.Types.Icon msg -}
hexagon : Elm.Expression
hexagon =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hexagon"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| highlight: Material.Icons.Types.Icon msg -}
highlight : Elm.Expression
highlight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "highlight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| horizontal_distribute: Material.Icons.Types.Icon msg -}
horizontal_distribute : Elm.Expression
horizontal_distribute =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "horizontal_distribute"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| horizontal_rule: Material.Icons.Types.Icon msg -}
horizontal_rule : Elm.Expression
horizontal_rule =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "horizontal_rule"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_chart: Material.Icons.Types.Icon msg -}
insert_chart : Elm.Expression
insert_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_chart_outlined: Material.Icons.Types.Icon msg -}
insert_chart_outlined : Elm.Expression
insert_chart_outlined =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_chart_outlined"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_comment: Material.Icons.Types.Icon msg -}
insert_comment : Elm.Expression
insert_comment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_comment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_drive_file: Material.Icons.Types.Icon msg -}
insert_drive_file : Elm.Expression
insert_drive_file =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_drive_file"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_emoticon: Material.Icons.Types.Icon msg -}
insert_emoticon : Elm.Expression
insert_emoticon =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_emoticon"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_invitation: Material.Icons.Types.Icon msg -}
insert_invitation : Elm.Expression
insert_invitation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_invitation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_link: Material.Icons.Types.Icon msg -}
insert_link : Elm.Expression
insert_link =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_link"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_page_break: Material.Icons.Types.Icon msg -}
insert_page_break : Elm.Expression
insert_page_break =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_page_break"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| insert_photo: Material.Icons.Types.Icon msg -}
insert_photo : Elm.Expression
insert_photo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "insert_photo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| line_axis: Material.Icons.Types.Icon msg -}
line_axis : Elm.Expression
line_axis =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "line_axis"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| linear_scale: Material.Icons.Types.Icon msg -}
linear_scale : Elm.Expression
linear_scale =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "linear_scale"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| margin: Material.Icons.Types.Icon msg -}
margin : Elm.Expression
margin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "margin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| merge_type: Material.Icons.Types.Icon msg -}
merge_type : Elm.Expression
merge_type =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "merge_type"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode: Material.Icons.Types.Icon msg -}
mode : Elm.Expression
mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_comment: Material.Icons.Types.Icon msg -}
mode_comment : Elm.Expression
mode_comment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_comment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_edit: Material.Icons.Types.Icon msg -}
mode_edit : Elm.Expression
mode_edit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_edit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_edit_outline: Material.Icons.Types.Icon msg -}
mode_edit_outline : Elm.Expression
mode_edit_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_edit_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| monetization_on: Material.Icons.Types.Icon msg -}
monetization_on : Elm.Expression
monetization_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "monetization_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| money_off: Material.Icons.Types.Icon msg -}
money_off : Elm.Expression
money_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "money_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| money_off_csred: Material.Icons.Types.Icon msg -}
money_off_csred : Elm.Expression
money_off_csred =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "money_off_csred"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| move_down: Material.Icons.Types.Icon msg -}
move_down : Elm.Expression
move_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "move_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| move_up: Material.Icons.Types.Icon msg -}
move_up : Elm.Expression
move_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "move_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| multiline_chart: Material.Icons.Types.Icon msg -}
multiline_chart : Elm.Expression
multiline_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "multiline_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notes: Material.Icons.Types.Icon msg -}
notes : Elm.Expression
notes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| numbers: Material.Icons.Types.Icon msg -}
numbers : Elm.Expression
numbers =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "numbers"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| padding: Material.Icons.Types.Icon msg -}
padding : Elm.Expression
padding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "padding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pentagon: Material.Icons.Types.Icon msg -}
pentagon : Elm.Expression
pentagon =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pentagon"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pie_chart: Material.Icons.Types.Icon msg -}
pie_chart : Elm.Expression
pie_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pie_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pie_chart_outline: Material.Icons.Types.Icon msg -}
pie_chart_outline : Elm.Expression
pie_chart_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pie_chart_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| polyline: Material.Icons.Types.Icon msg -}
polyline : Elm.Expression
polyline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "polyline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| post_add: Material.Icons.Types.Icon msg -}
post_add : Elm.Expression
post_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "post_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| publish: Material.Icons.Types.Icon msg -}
publish : Elm.Expression
publish =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "publish"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| query_stats: Material.Icons.Types.Icon msg -}
query_stats : Elm.Expression
query_stats =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "query_stats"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rectangle: Material.Icons.Types.Icon msg -}
rectangle : Elm.Expression
rectangle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rectangle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| scatter_plot: Material.Icons.Types.Icon msg -}
scatter_plot : Elm.Expression
scatter_plot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "scatter_plot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| schema: Material.Icons.Types.Icon msg -}
schema : Elm.Expression
schema =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "schema"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| score: Material.Icons.Types.Icon msg -}
score : Elm.Expression
score =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "score"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shape_line: Material.Icons.Types.Icon msg -}
shape_line : Elm.Expression
shape_line =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shape_line"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| short_text: Material.Icons.Types.Icon msg -}
short_text : Elm.Expression
short_text =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "short_text"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| show_chart: Material.Icons.Types.Icon msg -}
show_chart : Elm.Expression
show_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "show_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| space_bar: Material.Icons.Types.Icon msg -}
space_bar : Elm.Expression
space_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "space_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| square: Material.Icons.Types.Icon msg -}
square : Elm.Expression
square =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "square"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stacked_line_chart: Material.Icons.Types.Icon msg -}
stacked_line_chart : Elm.Expression
stacked_line_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stacked_line_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| strikethrough_s: Material.Icons.Types.Icon msg -}
strikethrough_s : Elm.Expression
strikethrough_s =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "strikethrough_s"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subscript: Material.Icons.Types.Icon msg -}
subscript : Elm.Expression
subscript =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subscript"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| superscript: Material.Icons.Types.Icon msg -}
superscript : Elm.Expression
superscript =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "superscript"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| table_chart: Material.Icons.Types.Icon msg -}
table_chart : Elm.Expression
table_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "table_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| table_rows: Material.Icons.Types.Icon msg -}
table_rows : Elm.Expression
table_rows =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "table_rows"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_decrease: Material.Icons.Types.Icon msg -}
text_decrease : Elm.Expression
text_decrease =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_decrease"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_fields: Material.Icons.Types.Icon msg -}
text_fields : Elm.Expression
text_fields =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_fields"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_increase: Material.Icons.Types.Icon msg -}
text_increase : Elm.Expression
text_increase =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_increase"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| title: Material.Icons.Types.Icon msg -}
title : Elm.Expression
title =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "title"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| type_specimen: Material.Icons.Types.Icon msg -}
type_specimen : Elm.Expression
type_specimen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "type_specimen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_align_bottom: Material.Icons.Types.Icon msg -}
vertical_align_bottom : Elm.Expression
vertical_align_bottom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_align_bottom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_align_center: Material.Icons.Types.Icon msg -}
vertical_align_center : Elm.Expression
vertical_align_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_align_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_align_top: Material.Icons.Types.Icon msg -}
vertical_align_top : Elm.Expression
vertical_align_top =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_align_top"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_distribute: Material.Icons.Types.Icon msg -}
vertical_distribute : Elm.Expression
vertical_distribute =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_distribute"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wrap_text: Material.Icons.Types.Icon msg -}
wrap_text : Elm.Expression
wrap_text =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wrap_text"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| approval: Material.Icons.Types.Icon msg -}
approval : Elm.Expression
approval =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "approval"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attach_email: Material.Icons.Types.Icon msg -}
attach_email : Elm.Expression
attach_email =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attach_email"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attachment: Material.Icons.Types.Icon msg -}
attachment : Elm.Expression
attachment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attachment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud: Material.Icons.Types.Icon msg -}
cloud : Elm.Expression
cloud =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_circle: Material.Icons.Types.Icon msg -}
cloud_circle : Elm.Expression
cloud_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_done: Material.Icons.Types.Icon msg -}
cloud_done : Elm.Expression
cloud_done =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_done"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_download: Material.Icons.Types.Icon msg -}
cloud_download : Elm.Expression
cloud_download =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_download"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_off: Material.Icons.Types.Icon msg -}
cloud_off : Elm.Expression
cloud_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_queue: Material.Icons.Types.Icon msg -}
cloud_queue : Elm.Expression
cloud_queue =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_queue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_sync: Material.Icons.Types.Icon msg -}
cloud_sync : Elm.Expression
cloud_sync =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_sync"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cloud_upload: Material.Icons.Types.Icon msg -}
cloud_upload : Elm.Expression
cloud_upload =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cloud_upload"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| create_new_folder: Material.Icons.Types.Icon msg -}
create_new_folder : Elm.Expression
create_new_folder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "create_new_folder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| difference: Material.Icons.Types.Icon msg -}
difference : Elm.Expression
difference =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "difference"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| download: Material.Icons.Types.Icon msg -}
download : Elm.Expression
download =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "download"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| download_done: Material.Icons.Types.Icon msg -}
download_done : Elm.Expression
download_done =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "download_done"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| download_for_offline: Material.Icons.Types.Icon msg -}
download_for_offline : Elm.Expression
download_for_offline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "download_for_offline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| downloading: Material.Icons.Types.Icon msg -}
downloading : Elm.Expression
downloading =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "downloading"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drive_file_move: Material.Icons.Types.Icon msg -}
drive_file_move : Elm.Expression
drive_file_move =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drive_file_move"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drive_file_move_rtl: Material.Icons.Types.Icon msg -}
drive_file_move_rtl : Elm.Expression
drive_file_move_rtl =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drive_file_move_rtl"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drive_file_rename_outline: Material.Icons.Types.Icon msg -}
drive_file_rename_outline : Elm.Expression
drive_file_rename_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drive_file_rename_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drive_folder_upload: Material.Icons.Types.Icon msg -}
drive_folder_upload : Elm.Expression
drive_folder_upload =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drive_folder_upload"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_download: Material.Icons.Types.Icon msg -}
file_download : Elm.Expression
file_download =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_download"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_download_done: Material.Icons.Types.Icon msg -}
file_download_done : Elm.Expression
file_download_done =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_download_done"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_download_off: Material.Icons.Types.Icon msg -}
file_download_off : Elm.Expression
file_download_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_download_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_open: Material.Icons.Types.Icon msg -}
file_open : Elm.Expression
file_open =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_open"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| file_upload: Material.Icons.Types.Icon msg -}
file_upload : Elm.Expression
file_upload =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "file_upload"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder: Material.Icons.Types.Icon msg -}
folder : Elm.Expression
folder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_copy: Material.Icons.Types.Icon msg -}
folder_copy : Elm.Expression
folder_copy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_copy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_delete: Material.Icons.Types.Icon msg -}
folder_delete : Elm.Expression
folder_delete =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_delete"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_off: Material.Icons.Types.Icon msg -}
folder_off : Elm.Expression
folder_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_open: Material.Icons.Types.Icon msg -}
folder_open : Elm.Expression
folder_open =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_open"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_shared: Material.Icons.Types.Icon msg -}
folder_shared : Elm.Expression
folder_shared =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_shared"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_zip: Material.Icons.Types.Icon msg -}
folder_zip : Elm.Expression
folder_zip =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_zip"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| format_overline: Material.Icons.Types.Icon msg -}
format_overline : Elm.Expression
format_overline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "format_overline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_view: Material.Icons.Types.Icon msg -}
grid_view : Elm.Expression
grid_view =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_view"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| newspaper: Material.Icons.Types.Icon msg -}
newspaper : Elm.Expression
newspaper =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "newspaper"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| request_quote: Material.Icons.Types.Icon msg -}
request_quote : Elm.Expression
request_quote =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "request_quote"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rule_folder: Material.Icons.Types.Icon msg -}
rule_folder : Elm.Expression
rule_folder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rule_folder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| snippet_folder: Material.Icons.Types.Icon msg -}
snippet_folder : Elm.Expression
snippet_folder =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "snippet_folder"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| text_snippet: Material.Icons.Types.Icon msg -}
text_snippet : Elm.Expression
text_snippet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "text_snippet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| topic: Material.Icons.Types.Icon msg -}
topic : Elm.Expression
topic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "topic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| upload: Material.Icons.Types.Icon msg -}
upload : Elm.Expression
upload =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "upload"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| upload_file: Material.Icons.Types.Icon msg -}
upload_file : Elm.Expression
upload_file =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "upload_file"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| workspaces: Material.Icons.Types.Icon msg -}
workspaces : Elm.Expression
workspaces =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "workspaces"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| adf_scanner: Material.Icons.Types.Icon msg -}
adf_scanner : Elm.Expression
adf_scanner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "adf_scanner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| browser_not_supported: Material.Icons.Types.Icon msg -}
browser_not_supported : Elm.Expression
browser_not_supported =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "browser_not_supported"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| browser_updated: Material.Icons.Types.Icon msg -}
browser_updated : Elm.Expression
browser_updated =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "browser_updated"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cast: Material.Icons.Types.Icon msg -}
cast : Elm.Expression
cast =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cast"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cast_connected: Material.Icons.Types.Icon msg -}
cast_connected : Elm.Expression
cast_connected =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cast_connected"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cast_for_education: Material.Icons.Types.Icon msg -}
cast_for_education : Elm.Expression
cast_for_education =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cast_for_education"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| computer: Material.Icons.Types.Icon msg -}
computer : Elm.Expression
computer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "computer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| connected_tv: Material.Icons.Types.Icon msg -}
connected_tv : Elm.Expression
connected_tv =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "connected_tv"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| desktop_mac: Material.Icons.Types.Icon msg -}
desktop_mac : Elm.Expression
desktop_mac =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "desktop_mac"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| desktop_windows: Material.Icons.Types.Icon msg -}
desktop_windows : Elm.Expression
desktop_windows =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "desktop_windows"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| developer_board: Material.Icons.Types.Icon msg -}
developer_board : Elm.Expression
developer_board =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "developer_board"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| developer_board_off: Material.Icons.Types.Icon msg -}
developer_board_off : Elm.Expression
developer_board_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "developer_board_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| device_hub: Material.Icons.Types.Icon msg -}
device_hub : Elm.Expression
device_hub =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "device_hub"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| device_unknown: Material.Icons.Types.Icon msg -}
device_unknown : Elm.Expression
device_unknown =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "device_unknown"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| devices_other: Material.Icons.Types.Icon msg -}
devices_other : Elm.Expression
devices_other =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "devices_other"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dock: Material.Icons.Types.Icon msg -}
dock : Elm.Expression
dock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| earbuds: Material.Icons.Types.Icon msg -}
earbuds : Elm.Expression
earbuds =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "earbuds"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| earbuds_battery: Material.Icons.Types.Icon msg -}
earbuds_battery : Elm.Expression
earbuds_battery =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "earbuds_battery"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gamepad: Material.Icons.Types.Icon msg -}
gamepad : Elm.Expression
gamepad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gamepad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| headphones: Material.Icons.Types.Icon msg -}
headphones : Elm.Expression
headphones =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "headphones"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| headphones_battery: Material.Icons.Types.Icon msg -}
headphones_battery : Elm.Expression
headphones_battery =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "headphones_battery"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| headset: Material.Icons.Types.Icon msg -}
headset : Elm.Expression
headset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "headset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| headset_mic: Material.Icons.Types.Icon msg -}
headset_mic : Elm.Expression
headset_mic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "headset_mic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| headset_off: Material.Icons.Types.Icon msg -}
headset_off : Elm.Expression
headset_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "headset_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| home_max: Material.Icons.Types.Icon msg -}
home_max : Elm.Expression
home_max =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "home_max"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| home_mini: Material.Icons.Types.Icon msg -}
home_mini : Elm.Expression
home_mini =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "home_mini"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard: Material.Icons.Types.Icon msg -}
keyboard : Elm.Expression
keyboard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_alt: Material.Icons.Types.Icon msg -}
keyboard_alt : Elm.Expression
keyboard_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_arrow_down: Material.Icons.Types.Icon msg -}
keyboard_arrow_down : Elm.Expression
keyboard_arrow_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_arrow_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_arrow_left: Material.Icons.Types.Icon msg -}
keyboard_arrow_left : Elm.Expression
keyboard_arrow_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_arrow_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_arrow_right: Material.Icons.Types.Icon msg -}
keyboard_arrow_right : Elm.Expression
keyboard_arrow_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_arrow_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_arrow_up: Material.Icons.Types.Icon msg -}
keyboard_arrow_up : Elm.Expression
keyboard_arrow_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_arrow_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_backspace: Material.Icons.Types.Icon msg -}
keyboard_backspace : Elm.Expression
keyboard_backspace =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_backspace"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_capslock: Material.Icons.Types.Icon msg -}
keyboard_capslock : Elm.Expression
keyboard_capslock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_capslock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_command_key: Material.Icons.Types.Icon msg -}
keyboard_command_key : Elm.Expression
keyboard_command_key =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_command_key"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_control_key: Material.Icons.Types.Icon msg -}
keyboard_control_key : Elm.Expression
keyboard_control_key =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_control_key"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_double_arrow_down: Material.Icons.Types.Icon msg -}
keyboard_double_arrow_down : Elm.Expression
keyboard_double_arrow_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_double_arrow_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_double_arrow_left: Material.Icons.Types.Icon msg -}
keyboard_double_arrow_left : Elm.Expression
keyboard_double_arrow_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_double_arrow_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_double_arrow_right: Material.Icons.Types.Icon msg -}
keyboard_double_arrow_right : Elm.Expression
keyboard_double_arrow_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_double_arrow_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_double_arrow_up: Material.Icons.Types.Icon msg -}
keyboard_double_arrow_up : Elm.Expression
keyboard_double_arrow_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_double_arrow_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_hide: Material.Icons.Types.Icon msg -}
keyboard_hide : Elm.Expression
keyboard_hide =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_hide"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_option_key: Material.Icons.Types.Icon msg -}
keyboard_option_key : Elm.Expression
keyboard_option_key =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_option_key"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_return: Material.Icons.Types.Icon msg -}
keyboard_return : Elm.Expression
keyboard_return =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_return"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_tab: Material.Icons.Types.Icon msg -}
keyboard_tab : Elm.Expression
keyboard_tab =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_tab"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| keyboard_voice: Material.Icons.Types.Icon msg -}
keyboard_voice : Elm.Expression
keyboard_voice =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "keyboard_voice"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| laptop: Material.Icons.Types.Icon msg -}
laptop : Elm.Expression
laptop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "laptop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| laptop_chromebook: Material.Icons.Types.Icon msg -}
laptop_chromebook : Elm.Expression
laptop_chromebook =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "laptop_chromebook"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| laptop_mac: Material.Icons.Types.Icon msg -}
laptop_mac : Elm.Expression
laptop_mac =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "laptop_mac"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| laptop_windows: Material.Icons.Types.Icon msg -}
laptop_windows : Elm.Expression
laptop_windows =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "laptop_windows"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| memory: Material.Icons.Types.Icon msg -}
memory : Elm.Expression
memory =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "memory"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| monitor: Material.Icons.Types.Icon msg -}
monitor : Elm.Expression
monitor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "monitor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mouse: Material.Icons.Types.Icon msg -}
mouse : Elm.Expression
mouse =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mouse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_android: Material.Icons.Types.Icon msg -}
phone_android : Elm.Expression
phone_android =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_android"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_iphone: Material.Icons.Types.Icon msg -}
phone_iphone : Elm.Expression
phone_iphone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_iphone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink: Material.Icons.Types.Icon msg -}
phonelink : Elm.Expression
phonelink =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phonelink_off: Material.Icons.Types.Icon msg -}
phonelink_off : Elm.Expression
phonelink_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phonelink_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| point_of_sale: Material.Icons.Types.Icon msg -}
point_of_sale : Elm.Expression
point_of_sale =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "point_of_sale"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| power_input: Material.Icons.Types.Icon msg -}
power_input : Elm.Expression
power_input =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "power_input"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| router: Material.Icons.Types.Icon msg -}
router : Elm.Expression
router =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "router"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| scanner: Material.Icons.Types.Icon msg -}
scanner : Elm.Expression
scanner =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "scanner"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| security: Material.Icons.Types.Icon msg -}
security : Elm.Expression
security =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "security"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sim_card: Material.Icons.Types.Icon msg -}
sim_card : Elm.Expression
sim_card =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sim_card"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smart_display: Material.Icons.Types.Icon msg -}
smart_display : Elm.Expression
smart_display =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smart_display"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smart_screen: Material.Icons.Types.Icon msg -}
smart_screen : Elm.Expression
smart_screen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smart_screen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smart_toy: Material.Icons.Types.Icon msg -}
smart_toy : Elm.Expression
smart_toy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smart_toy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smartphone: Material.Icons.Types.Icon msg -}
smartphone : Elm.Expression
smartphone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smartphone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speaker: Material.Icons.Types.Icon msg -}
speaker : Elm.Expression
speaker =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speaker"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| speaker_group: Material.Icons.Types.Icon msg -}
speaker_group : Elm.Expression
speaker_group =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "speaker_group"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| start: Material.Icons.Types.Icon msg -}
start : Elm.Expression
start =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "start"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tablet: Material.Icons.Types.Icon msg -}
tablet : Elm.Expression
tablet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tablet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tablet_android: Material.Icons.Types.Icon msg -}
tablet_android : Elm.Expression
tablet_android =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tablet_android"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tablet_mac: Material.Icons.Types.Icon msg -}
tablet_mac : Elm.Expression
tablet_mac =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tablet_mac"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| toys: Material.Icons.Types.Icon msg -}
toys : Elm.Expression
toys =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "toys"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tv: Material.Icons.Types.Icon msg -}
tv : Elm.Expression
tv =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tv"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| videogame_asset: Material.Icons.Types.Icon msg -}
videogame_asset : Elm.Expression
videogame_asset =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "videogame_asset"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| videogame_asset_off: Material.Icons.Types.Icon msg -}
videogame_asset_off : Elm.Expression
videogame_asset_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "videogame_asset_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| watch: Material.Icons.Types.Icon msg -}
watch : Elm.Expression
watch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "watch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| watch_off: Material.Icons.Types.Icon msg -}
watch_off : Elm.Expression
watch_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "watch_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_mode: Material.Icons.Types.Icon msg -}
auto_mode : Elm.Expression
auto_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blinds: Material.Icons.Types.Icon msg -}
blinds : Elm.Expression
blinds =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blinds"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blinds_closed: Material.Icons.Types.Icon msg -}
blinds_closed : Elm.Expression
blinds_closed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blinds_closed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| broadcast_on_home: Material.Icons.Types.Icon msg -}
broadcast_on_home : Elm.Expression
broadcast_on_home =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "broadcast_on_home"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| broadcast_on_personal: Material.Icons.Types.Icon msg -}
broadcast_on_personal : Elm.Expression
broadcast_on_personal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "broadcast_on_personal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| curtains: Material.Icons.Types.Icon msg -}
curtains : Elm.Expression
curtains =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "curtains"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| curtains_closed: Material.Icons.Types.Icon msg -}
curtains_closed : Elm.Expression
curtains_closed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "curtains_closed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_bolt: Material.Icons.Types.Icon msg -}
electric_bolt : Elm.Expression
electric_bolt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_bolt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_meter: Material.Icons.Types.Icon msg -}
electric_meter : Elm.Expression
electric_meter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_meter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| energy_savings_leaf: Material.Icons.Types.Icon msg -}
energy_savings_leaf : Elm.Expression
energy_savings_leaf =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "energy_savings_leaf"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gas_meter: Material.Icons.Types.Icon msg -}
gas_meter : Elm.Expression
gas_meter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gas_meter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| heat_pump: Material.Icons.Types.Icon msg -}
heat_pump : Elm.Expression
heat_pump =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "heat_pump"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_fan_off: Material.Icons.Types.Icon msg -}
mode_fan_off : Elm.Expression
mode_fan_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_fan_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nest_cam_wired_stand: Material.Icons.Types.Icon msg -}
nest_cam_wired_stand : Elm.Expression
nest_cam_wired_stand =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nest_cam_wired_stand"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| oil_barrel: Material.Icons.Types.Icon msg -}
oil_barrel : Elm.Expression
oil_barrel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "oil_barrel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| propane: Material.Icons.Types.Icon msg -}
propane : Elm.Expression
propane =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "propane"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| propane_tank: Material.Icons.Types.Icon msg -}
propane_tank : Elm.Expression
propane_tank =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "propane_tank"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roller_shades: Material.Icons.Types.Icon msg -}
roller_shades : Elm.Expression
roller_shades =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roller_shades"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roller_shades_closed: Material.Icons.Types.Icon msg -}
roller_shades_closed : Elm.Expression
roller_shades_closed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roller_shades_closed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sensor_door: Material.Icons.Types.Icon msg -}
sensor_door : Elm.Expression
sensor_door =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sensor_door"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sensor_occupied: Material.Icons.Types.Icon msg -}
sensor_occupied : Elm.Expression
sensor_occupied =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sensor_occupied"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sensor_window: Material.Icons.Types.Icon msg -}
sensor_window : Elm.Expression
sensor_window =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sensor_window"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shield_moon: Material.Icons.Types.Icon msg -}
shield_moon : Elm.Expression
shield_moon =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shield_moon"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| solar_power: Material.Icons.Types.Icon msg -}
solar_power : Elm.Expression
solar_power =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "solar_power"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_shades: Material.Icons.Types.Icon msg -}
vertical_shades : Elm.Expression
vertical_shades =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_shades"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vertical_shades_closed: Material.Icons.Types.Icon msg -}
vertical_shades_closed : Elm.Expression
vertical_shades_closed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vertical_shades_closed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wind_power: Material.Icons.Types.Icon msg -}
wind_power : Elm.Expression
wind_power =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wind_power"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ten_mp: Material.Icons.Types.Icon msg -}
ten_mp : Elm.Expression
ten_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ten_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eleven_mp: Material.Icons.Types.Icon msg -}
eleven_mp : Elm.Expression
eleven_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eleven_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twelve_mp: Material.Icons.Types.Icon msg -}
twelve_mp : Elm.Expression
twelve_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twelve_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thirteen_mp: Material.Icons.Types.Icon msg -}
thirteen_mp : Elm.Expression
thirteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thirteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fourteen_mp: Material.Icons.Types.Icon msg -}
fourteen_mp : Elm.Expression
fourteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fourteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fifteen_mp: Material.Icons.Types.Icon msg -}
fifteen_mp : Elm.Expression
fifteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fifteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sixteen_mp: Material.Icons.Types.Icon msg -}
sixteen_mp : Elm.Expression
sixteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sixteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| seventeen_mp: Material.Icons.Types.Icon msg -}
seventeen_mp : Elm.Expression
seventeen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "seventeen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eighteen_mp: Material.Icons.Types.Icon msg -}
eighteen_mp : Elm.Expression
eighteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eighteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nineteen_mp: Material.Icons.Types.Icon msg -}
nineteen_mp : Elm.Expression
nineteen_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nineteen_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twenty_mp: Material.Icons.Types.Icon msg -}
twenty_mp : Elm.Expression
twenty_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twenty_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twenty_one_mp: Material.Icons.Types.Icon msg -}
twenty_one_mp : Elm.Expression
twenty_one_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twenty_one_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twenty_two_mp: Material.Icons.Types.Icon msg -}
twenty_two_mp : Elm.Expression
twenty_two_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twenty_two_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twenty_three_mp: Material.Icons.Types.Icon msg -}
twenty_three_mp : Elm.Expression
twenty_three_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twenty_three_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| twenty_four_mp: Material.Icons.Types.Icon msg -}
twenty_four_mp : Elm.Expression
twenty_four_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "twenty_four_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| two_mp: Material.Icons.Types.Icon msg -}
two_mp : Elm.Expression
two_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "two_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thirty_fps_select: Material.Icons.Types.Icon msg -}
thirty_fps_select : Elm.Expression
thirty_fps_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thirty_fps_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_mp: Material.Icons.Types.Icon msg -}
three_mp : Elm.Expression
three_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| four_mp: Material.Icons.Types.Icon msg -}
four_mp : Elm.Expression
four_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "four_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| five_mp: Material.Icons.Types.Icon msg -}
five_mp : Elm.Expression
five_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "five_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sixty_fps_select: Material.Icons.Types.Icon msg -}
sixty_fps_select : Elm.Expression
sixty_fps_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sixty_fps_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| six_mp: Material.Icons.Types.Icon msg -}
six_mp : Elm.Expression
six_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "six_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| seven_mp: Material.Icons.Types.Icon msg -}
seven_mp : Elm.Expression
seven_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "seven_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eight_mp: Material.Icons.Types.Icon msg -}
eight_mp : Elm.Expression
eight_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eight_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nine_mp: Material.Icons.Types.Icon msg -}
nine_mp : Elm.Expression
nine_mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nine_mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_a_photo: Material.Icons.Types.Icon msg -}
add_a_photo : Elm.Expression
add_a_photo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_a_photo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_photo_alternate: Material.Icons.Types.Icon msg -}
add_photo_alternate : Elm.Expression
add_photo_alternate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_photo_alternate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_to_photos: Material.Icons.Types.Icon msg -}
add_to_photos : Elm.Expression
add_to_photos =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_to_photos"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| adjust: Material.Icons.Types.Icon msg -}
adjust : Elm.Expression
adjust =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "adjust"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| animation: Material.Icons.Types.Icon msg -}
animation : Elm.Expression
animation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "animation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assistant: Material.Icons.Types.Icon msg -}
assistant : Elm.Expression
assistant =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assistant"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assistant_photo: Material.Icons.Types.Icon msg -}
assistant_photo : Elm.Expression
assistant_photo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assistant_photo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| audiotrack: Material.Icons.Types.Icon msg -}
audiotrack : Elm.Expression
audiotrack =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "audiotrack"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_awesome: Material.Icons.Types.Icon msg -}
auto_awesome : Elm.Expression
auto_awesome =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_awesome"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_awesome_mosaic: Material.Icons.Types.Icon msg -}
auto_awesome_mosaic : Elm.Expression
auto_awesome_mosaic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_awesome_mosaic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_awesome_motion: Material.Icons.Types.Icon msg -}
auto_awesome_motion : Elm.Expression
auto_awesome_motion =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_awesome_motion"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_fix_high: Material.Icons.Types.Icon msg -}
auto_fix_high : Elm.Expression
auto_fix_high =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_fix_high"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_fix_normal: Material.Icons.Types.Icon msg -}
auto_fix_normal : Elm.Expression
auto_fix_normal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_fix_normal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_fix_off: Material.Icons.Types.Icon msg -}
auto_fix_off : Elm.Expression
auto_fix_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_fix_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| auto_stories: Material.Icons.Types.Icon msg -}
auto_stories : Elm.Expression
auto_stories =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "auto_stories"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| autofps_select: Material.Icons.Types.Icon msg -}
autofps_select : Elm.Expression
autofps_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "autofps_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bedtime: Material.Icons.Types.Icon msg -}
bedtime : Elm.Expression
bedtime =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bedtime"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bedtime_off: Material.Icons.Types.Icon msg -}
bedtime_off : Elm.Expression
bedtime_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bedtime_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blur_circular: Material.Icons.Types.Icon msg -}
blur_circular : Elm.Expression
blur_circular =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blur_circular"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blur_linear: Material.Icons.Types.Icon msg -}
blur_linear : Elm.Expression
blur_linear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blur_linear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blur_off: Material.Icons.Types.Icon msg -}
blur_off : Elm.Expression
blur_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blur_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blur_on: Material.Icons.Types.Icon msg -}
blur_on : Elm.Expression
blur_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blur_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_1: Material.Icons.Types.Icon msg -}
brightness_1 : Elm.Expression
brightness_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_2: Material.Icons.Types.Icon msg -}
brightness_2 : Elm.Expression
brightness_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_3: Material.Icons.Types.Icon msg -}
brightness_3 : Elm.Expression
brightness_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_4: Material.Icons.Types.Icon msg -}
brightness_4 : Elm.Expression
brightness_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_5: Material.Icons.Types.Icon msg -}
brightness_5 : Elm.Expression
brightness_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_6: Material.Icons.Types.Icon msg -}
brightness_6 : Elm.Expression
brightness_6 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_6"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brightness_7: Material.Icons.Types.Icon msg -}
brightness_7 : Elm.Expression
brightness_7 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brightness_7"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| broken_image: Material.Icons.Types.Icon msg -}
broken_image : Elm.Expression
broken_image =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "broken_image"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brush: Material.Icons.Types.Icon msg -}
brush : Elm.Expression
brush =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brush"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| burst_mode: Material.Icons.Types.Icon msg -}
burst_mode : Elm.Expression
burst_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "burst_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera: Material.Icons.Types.Icon msg -}
camera : Elm.Expression
camera =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_alt: Material.Icons.Types.Icon msg -}
camera_alt : Elm.Expression
camera_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_front: Material.Icons.Types.Icon msg -}
camera_front : Elm.Expression
camera_front =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_front"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_rear: Material.Icons.Types.Icon msg -}
camera_rear : Elm.Expression
camera_rear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_rear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_roll: Material.Icons.Types.Icon msg -}
camera_roll : Elm.Expression
camera_roll =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_roll"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cases: Material.Icons.Types.Icon msg -}
cases : Elm.Expression
cases =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cases"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| center_focus_strong: Material.Icons.Types.Icon msg -}
center_focus_strong : Elm.Expression
center_focus_strong =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "center_focus_strong"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| center_focus_weak: Material.Icons.Types.Icon msg -}
center_focus_weak : Elm.Expression
center_focus_weak =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "center_focus_weak"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| circle: Material.Icons.Types.Icon msg -}
circle : Elm.Expression
circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| collections: Material.Icons.Types.Icon msg -}
collections : Elm.Expression
collections =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "collections"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| collections_bookmark: Material.Icons.Types.Icon msg -}
collections_bookmark : Elm.Expression
collections_bookmark =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "collections_bookmark"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| color_lens: Material.Icons.Types.Icon msg -}
color_lens : Elm.Expression
color_lens =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "color_lens"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| colorize: Material.Icons.Types.Icon msg -}
colorize : Elm.Expression
colorize =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "colorize"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| compare: Material.Icons.Types.Icon msg -}
compare : Elm.Expression
compare =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "compare"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| contrast: Material.Icons.Types.Icon msg -}
contrast : Elm.Expression
contrast =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "contrast"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| control_point: Material.Icons.Types.Icon msg -}
control_point : Elm.Expression
control_point =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "control_point"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| control_point_duplicate: Material.Icons.Types.Icon msg -}
control_point_duplicate : Elm.Expression
control_point_duplicate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "control_point_duplicate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop: Material.Icons.Types.Icon msg -}
crop : Elm.Expression
crop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_16_9: Material.Icons.Types.Icon msg -}
crop_16_9 : Elm.Expression
crop_16_9 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_16_9"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_3_2: Material.Icons.Types.Icon msg -}
crop_3_2 : Elm.Expression
crop_3_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_3_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_5_4: Material.Icons.Types.Icon msg -}
crop_5_4 : Elm.Expression
crop_5_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_5_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_7_5: Material.Icons.Types.Icon msg -}
crop_7_5 : Elm.Expression
crop_7_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_7_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_din: Material.Icons.Types.Icon msg -}
crop_din : Elm.Expression
crop_din =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_din"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_free: Material.Icons.Types.Icon msg -}
crop_free : Elm.Expression
crop_free =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_free"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_landscape: Material.Icons.Types.Icon msg -}
crop_landscape : Elm.Expression
crop_landscape =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_landscape"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_original: Material.Icons.Types.Icon msg -}
crop_original : Elm.Expression
crop_original =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_original"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_portrait: Material.Icons.Types.Icon msg -}
crop_portrait : Elm.Expression
crop_portrait =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_portrait"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_rotate: Material.Icons.Types.Icon msg -}
crop_rotate : Elm.Expression
crop_rotate =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_rotate"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crop_square: Material.Icons.Types.Icon msg -}
crop_square : Elm.Expression
crop_square =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crop_square"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_bitcoin: Material.Icons.Types.Icon msg -}
currency_bitcoin : Elm.Expression
currency_bitcoin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_bitcoin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_franc: Material.Icons.Types.Icon msg -}
currency_franc : Elm.Expression
currency_franc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_franc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_lira: Material.Icons.Types.Icon msg -}
currency_lira : Elm.Expression
currency_lira =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_lira"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_pound: Material.Icons.Types.Icon msg -}
currency_pound : Elm.Expression
currency_pound =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_pound"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_ruble: Material.Icons.Types.Icon msg -}
currency_ruble : Elm.Expression
currency_ruble =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_ruble"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_rupee: Material.Icons.Types.Icon msg -}
currency_rupee : Elm.Expression
currency_rupee =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_rupee"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_yen: Material.Icons.Types.Icon msg -}
currency_yen : Elm.Expression
currency_yen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_yen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| currency_yuan: Material.Icons.Types.Icon msg -}
currency_yuan : Elm.Expression
currency_yuan =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "currency_yuan"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| deblur: Material.Icons.Types.Icon msg -}
deblur : Elm.Expression
deblur =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "deblur"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dehaze: Material.Icons.Types.Icon msg -}
dehaze : Elm.Expression
dehaze =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dehaze"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| details: Material.Icons.Types.Icon msg -}
details : Elm.Expression
details =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "details"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dirty_lens: Material.Icons.Types.Icon msg -}
dirty_lens : Elm.Expression
dirty_lens =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dirty_lens"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit: Material.Icons.Types.Icon msg -}
edit : Elm.Expression
edit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| euro: Material.Icons.Types.Icon msg -}
euro : Elm.Expression
euro =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "euro"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure: Material.Icons.Types.Icon msg -}
exposure : Elm.Expression
exposure =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure_neg_1: Material.Icons.Types.Icon msg -}
exposure_neg_1 : Elm.Expression
exposure_neg_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure_neg_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure_neg_2: Material.Icons.Types.Icon msg -}
exposure_neg_2 : Elm.Expression
exposure_neg_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure_neg_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure_plus_1: Material.Icons.Types.Icon msg -}
exposure_plus_1 : Elm.Expression
exposure_plus_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure_plus_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure_plus_2: Material.Icons.Types.Icon msg -}
exposure_plus_2 : Elm.Expression
exposure_plus_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure_plus_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| exposure_zero: Material.Icons.Types.Icon msg -}
exposure_zero : Elm.Expression
exposure_zero =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "exposure_zero"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_retouching_natural: Material.Icons.Types.Icon msg -}
face_retouching_natural : Elm.Expression
face_retouching_natural =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_retouching_natural"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_retouching_off: Material.Icons.Types.Icon msg -}
face_retouching_off : Elm.Expression
face_retouching_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_retouching_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter: Material.Icons.Types.Icon msg -}
filter : Elm.Expression
filter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_1: Material.Icons.Types.Icon msg -}
filter_1 : Elm.Expression
filter_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_2: Material.Icons.Types.Icon msg -}
filter_2 : Elm.Expression
filter_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_3: Material.Icons.Types.Icon msg -}
filter_3 : Elm.Expression
filter_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_4: Material.Icons.Types.Icon msg -}
filter_4 : Elm.Expression
filter_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_5: Material.Icons.Types.Icon msg -}
filter_5 : Elm.Expression
filter_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_6: Material.Icons.Types.Icon msg -}
filter_6 : Elm.Expression
filter_6 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_6"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_7: Material.Icons.Types.Icon msg -}
filter_7 : Elm.Expression
filter_7 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_7"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_8: Material.Icons.Types.Icon msg -}
filter_8 : Elm.Expression
filter_8 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_8"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_9: Material.Icons.Types.Icon msg -}
filter_9 : Elm.Expression
filter_9 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_9"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_9_plus: Material.Icons.Types.Icon msg -}
filter_9_plus : Elm.Expression
filter_9_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_9_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_b_and_w: Material.Icons.Types.Icon msg -}
filter_b_and_w : Elm.Expression
filter_b_and_w =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_b_and_w"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_center_focus: Material.Icons.Types.Icon msg -}
filter_center_focus : Elm.Expression
filter_center_focus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_center_focus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_drama: Material.Icons.Types.Icon msg -}
filter_drama : Elm.Expression
filter_drama =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_drama"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_frames: Material.Icons.Types.Icon msg -}
filter_frames : Elm.Expression
filter_frames =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_frames"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_hdr: Material.Icons.Types.Icon msg -}
filter_hdr : Elm.Expression
filter_hdr =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_hdr"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_none: Material.Icons.Types.Icon msg -}
filter_none : Elm.Expression
filter_none =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_none"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_tilt_shift: Material.Icons.Types.Icon msg -}
filter_tilt_shift : Elm.Expression
filter_tilt_shift =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_tilt_shift"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| filter_vintage: Material.Icons.Types.Icon msg -}
filter_vintage : Elm.Expression
filter_vintage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "filter_vintage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flare: Material.Icons.Types.Icon msg -}
flare : Elm.Expression
flare =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flare"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flash_auto: Material.Icons.Types.Icon msg -}
flash_auto : Elm.Expression
flash_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flash_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flash_off: Material.Icons.Types.Icon msg -}
flash_off : Elm.Expression
flash_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flash_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flash_on: Material.Icons.Types.Icon msg -}
flash_on : Elm.Expression
flash_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flash_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flip: Material.Icons.Types.Icon msg -}
flip : Elm.Expression
flip =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flip"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flip_camera_android: Material.Icons.Types.Icon msg -}
flip_camera_android : Elm.Expression
flip_camera_android =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flip_camera_android"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flip_camera_ios: Material.Icons.Types.Icon msg -}
flip_camera_ios : Elm.Expression
flip_camera_ios =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flip_camera_ios"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gradient: Material.Icons.Types.Icon msg -}
gradient : Elm.Expression
gradient =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gradient"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grain: Material.Icons.Types.Icon msg -}
grain : Elm.Expression
grain =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grain"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_off: Material.Icons.Types.Icon msg -}
grid_off : Elm.Expression
grid_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grid_on: Material.Icons.Types.Icon msg -}
grid_on : Elm.Expression
grid_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grid_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_enhanced_select: Material.Icons.Types.Icon msg -}
hdr_enhanced_select : Elm.Expression
hdr_enhanced_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_enhanced_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_off: Material.Icons.Types.Icon msg -}
hdr_off : Elm.Expression
hdr_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_on: Material.Icons.Types.Icon msg -}
hdr_on : Elm.Expression
hdr_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_plus: Material.Icons.Types.Icon msg -}
hdr_plus : Elm.Expression
hdr_plus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_plus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_strong: Material.Icons.Types.Icon msg -}
hdr_strong : Elm.Expression
hdr_strong =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_strong"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hdr_weak: Material.Icons.Types.Icon msg -}
hdr_weak : Elm.Expression
hdr_weak =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hdr_weak"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| healing: Material.Icons.Types.Icon msg -}
healing : Elm.Expression
healing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "healing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hevc: Material.Icons.Types.Icon msg -}
hevc : Elm.Expression
hevc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hevc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hide_image: Material.Icons.Types.Icon msg -}
hide_image : Elm.Expression
hide_image =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hide_image"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| image: Material.Icons.Types.Icon msg -}
image : Elm.Expression
image =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "image"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| image_aspect_ratio: Material.Icons.Types.Icon msg -}
image_aspect_ratio : Elm.Expression
image_aspect_ratio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "image_aspect_ratio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| image_not_supported: Material.Icons.Types.Icon msg -}
image_not_supported : Elm.Expression
image_not_supported =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "image_not_supported"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| image_search: Material.Icons.Types.Icon msg -}
image_search : Elm.Expression
image_search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "image_search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| incomplete_circle: Material.Icons.Types.Icon msg -}
incomplete_circle : Elm.Expression
incomplete_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "incomplete_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| iso: Material.Icons.Types.Icon msg -}
iso : Elm.Expression
iso =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "iso"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| landscape: Material.Icons.Types.Icon msg -}
landscape : Elm.Expression
landscape =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "landscape"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| leak_add: Material.Icons.Types.Icon msg -}
leak_add : Elm.Expression
leak_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "leak_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| leak_remove: Material.Icons.Types.Icon msg -}
leak_remove : Elm.Expression
leak_remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "leak_remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lens: Material.Icons.Types.Icon msg -}
lens : Elm.Expression
lens =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lens"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| linked_camera: Material.Icons.Types.Icon msg -}
linked_camera : Elm.Expression
linked_camera =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "linked_camera"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| logo_dev: Material.Icons.Types.Icon msg -}
logo_dev : Elm.Expression
logo_dev =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "logo_dev"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks: Material.Icons.Types.Icon msg -}
looks : Elm.Expression
looks =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_3: Material.Icons.Types.Icon msg -}
looks_3 : Elm.Expression
looks_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_4: Material.Icons.Types.Icon msg -}
looks_4 : Elm.Expression
looks_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_5: Material.Icons.Types.Icon msg -}
looks_5 : Elm.Expression
looks_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_6: Material.Icons.Types.Icon msg -}
looks_6 : Elm.Expression
looks_6 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_6"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_one: Material.Icons.Types.Icon msg -}
looks_one : Elm.Expression
looks_one =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_one"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| looks_two: Material.Icons.Types.Icon msg -}
looks_two : Elm.Expression
looks_two =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "looks_two"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| loupe: Material.Icons.Types.Icon msg -}
loupe : Elm.Expression
loupe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "loupe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mic_external_off: Material.Icons.Types.Icon msg -}
mic_external_off : Elm.Expression
mic_external_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mic_external_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mic_external_on: Material.Icons.Types.Icon msg -}
mic_external_on : Elm.Expression
mic_external_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mic_external_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| monochrome_photos: Material.Icons.Types.Icon msg -}
monochrome_photos : Elm.Expression
monochrome_photos =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "monochrome_photos"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| motion_photos_auto: Material.Icons.Types.Icon msg -}
motion_photos_auto : Elm.Expression
motion_photos_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "motion_photos_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| motion_photos_off: Material.Icons.Types.Icon msg -}
motion_photos_off : Elm.Expression
motion_photos_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "motion_photos_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| motion_photos_on: Material.Icons.Types.Icon msg -}
motion_photos_on : Elm.Expression
motion_photos_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "motion_photos_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| motion_photos_pause: Material.Icons.Types.Icon msg -}
motion_photos_pause : Elm.Expression
motion_photos_pause =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "motion_photos_pause"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| motion_photos_paused: Material.Icons.Types.Icon msg -}
motion_photos_paused : Elm.Expression
motion_photos_paused =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "motion_photos_paused"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| movie_creation: Material.Icons.Types.Icon msg -}
movie_creation : Elm.Expression
movie_creation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "movie_creation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| movie_filter: Material.Icons.Types.Icon msg -}
movie_filter : Elm.Expression
movie_filter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "movie_filter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mp: Material.Icons.Types.Icon msg -}
mp : Elm.Expression
mp =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mp"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| music_note: Material.Icons.Types.Icon msg -}
music_note : Elm.Expression
music_note =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "music_note"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| music_off: Material.Icons.Types.Icon msg -}
music_off : Elm.Expression
music_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "music_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nature: Material.Icons.Types.Icon msg -}
nature : Elm.Expression
nature =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nature"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nature_people: Material.Icons.Types.Icon msg -}
nature_people : Elm.Expression
nature_people =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nature_people"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| navigate_before: Material.Icons.Types.Icon msg -}
navigate_before : Elm.Expression
navigate_before =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "navigate_before"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| navigate_next: Material.Icons.Types.Icon msg -}
navigate_next : Elm.Expression
navigate_next =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "navigate_next"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| palette: Material.Icons.Types.Icon msg -}
palette : Elm.Expression
palette =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "palette"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama: Material.Icons.Types.Icon msg -}
panorama : Elm.Expression
panorama =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_fish_eye: Material.Icons.Types.Icon msg -}
panorama_fish_eye : Elm.Expression
panorama_fish_eye =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_fish_eye"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_horizontal: Material.Icons.Types.Icon msg -}
panorama_horizontal : Elm.Expression
panorama_horizontal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_horizontal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_horizontal_select: Material.Icons.Types.Icon msg -}
panorama_horizontal_select : Elm.Expression
panorama_horizontal_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_horizontal_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_photosphere: Material.Icons.Types.Icon msg -}
panorama_photosphere : Elm.Expression
panorama_photosphere =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_photosphere"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_photosphere_select: Material.Icons.Types.Icon msg -}
panorama_photosphere_select : Elm.Expression
panorama_photosphere_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_photosphere_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_vertical: Material.Icons.Types.Icon msg -}
panorama_vertical : Elm.Expression
panorama_vertical =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_vertical"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_vertical_select: Material.Icons.Types.Icon msg -}
panorama_vertical_select : Elm.Expression
panorama_vertical_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_vertical_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_wide_angle: Material.Icons.Types.Icon msg -}
panorama_wide_angle : Elm.Expression
panorama_wide_angle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_wide_angle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| panorama_wide_angle_select: Material.Icons.Types.Icon msg -}
panorama_wide_angle_select : Elm.Expression
panorama_wide_angle_select =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "panorama_wide_angle_select"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo: Material.Icons.Types.Icon msg -}
photo : Elm.Expression
photo =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_album: Material.Icons.Types.Icon msg -}
photo_album : Elm.Expression
photo_album =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_album"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_camera: Material.Icons.Types.Icon msg -}
photo_camera : Elm.Expression
photo_camera =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_camera"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_camera_back: Material.Icons.Types.Icon msg -}
photo_camera_back : Elm.Expression
photo_camera_back =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_camera_back"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_camera_front: Material.Icons.Types.Icon msg -}
photo_camera_front : Elm.Expression
photo_camera_front =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_camera_front"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_filter: Material.Icons.Types.Icon msg -}
photo_filter : Elm.Expression
photo_filter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_filter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_library: Material.Icons.Types.Icon msg -}
photo_library : Elm.Expression
photo_library =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_library"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_size_select_actual: Material.Icons.Types.Icon msg -}
photo_size_select_actual : Elm.Expression
photo_size_select_actual =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_size_select_actual"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_size_select_large: Material.Icons.Types.Icon msg -}
photo_size_select_large : Elm.Expression
photo_size_select_large =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_size_select_large"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| photo_size_select_small: Material.Icons.Types.Icon msg -}
photo_size_select_small : Elm.Expression
photo_size_select_small =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "photo_size_select_small"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| picture_as_pdf: Material.Icons.Types.Icon msg -}
picture_as_pdf : Elm.Expression
picture_as_pdf =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "picture_as_pdf"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| portrait: Material.Icons.Types.Icon msg -}
portrait : Elm.Expression
portrait =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "portrait"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| raw_off: Material.Icons.Types.Icon msg -}
raw_off : Elm.Expression
raw_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "raw_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| raw_on: Material.Icons.Types.Icon msg -}
raw_on : Elm.Expression
raw_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "raw_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| receipt_long: Material.Icons.Types.Icon msg -}
receipt_long : Elm.Expression
receipt_long =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "receipt_long"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_red_eye: Material.Icons.Types.Icon msg -}
remove_red_eye : Elm.Expression
remove_red_eye =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_red_eye"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rotate_90_degrees_ccw: Material.Icons.Types.Icon msg -}
rotate_90_degrees_ccw : Elm.Expression
rotate_90_degrees_ccw =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rotate_90_degrees_ccw"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rotate_90_degrees_cw: Material.Icons.Types.Icon msg -}
rotate_90_degrees_cw : Elm.Expression
rotate_90_degrees_cw =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rotate_90_degrees_cw"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rotate_left: Material.Icons.Types.Icon msg -}
rotate_left : Elm.Expression
rotate_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rotate_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rotate_right: Material.Icons.Types.Icon msg -}
rotate_right : Elm.Expression
rotate_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rotate_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shutter_speed: Material.Icons.Types.Icon msg -}
shutter_speed : Elm.Expression
shutter_speed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shutter_speed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| slideshow: Material.Icons.Types.Icon msg -}
slideshow : Elm.Expression
slideshow =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "slideshow"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| straighten: Material.Icons.Types.Icon msg -}
straighten : Elm.Expression
straighten =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "straighten"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| style: Material.Icons.Types.Icon msg -}
style : Elm.Expression
style =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "style"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_camera: Material.Icons.Types.Icon msg -}
switch_camera : Elm.Expression
switch_camera =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_camera"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_video: Material.Icons.Types.Icon msg -}
switch_video : Elm.Expression
switch_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tag_faces: Material.Icons.Types.Icon msg -}
tag_faces : Elm.Expression
tag_faces =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tag_faces"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| texture: Material.Icons.Types.Icon msg -}
texture : Elm.Expression
texture =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "texture"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thermostat_auto: Material.Icons.Types.Icon msg -}
thermostat_auto : Elm.Expression
thermostat_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thermostat_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timelapse: Material.Icons.Types.Icon msg -}
timelapse : Elm.Expression
timelapse =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timelapse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer: Material.Icons.Types.Icon msg -}
timer : Elm.Expression
timer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer_10: Material.Icons.Types.Icon msg -}
timer_10 : Elm.Expression
timer_10 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer_10"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer_3: Material.Icons.Types.Icon msg -}
timer_3 : Elm.Expression
timer_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| timer_off: Material.Icons.Types.Icon msg -}
timer_off : Elm.Expression
timer_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "timer_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tonality: Material.Icons.Types.Icon msg -}
tonality : Elm.Expression
tonality =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tonality"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| transform: Material.Icons.Types.Icon msg -}
transform : Elm.Expression
transform =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "transform"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tune: Material.Icons.Types.Icon msg -}
tune : Elm.Expression
tune =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tune"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_camera_back: Material.Icons.Types.Icon msg -}
video_camera_back : Elm.Expression
video_camera_back =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_camera_back"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_camera_front: Material.Icons.Types.Icon msg -}
video_camera_front : Elm.Expression
video_camera_front =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_camera_front"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_stable: Material.Icons.Types.Icon msg -}
video_stable : Elm.Expression
video_stable =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_stable"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_comfy: Material.Icons.Types.Icon msg -}
view_comfy : Elm.Expression
view_comfy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_comfy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| view_compact: Material.Icons.Types.Icon msg -}
view_compact : Elm.Expression
view_compact =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "view_compact"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vignette: Material.Icons.Types.Icon msg -}
vignette : Elm.Expression
vignette =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vignette"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vrpano: Material.Icons.Types.Icon msg -}
vrpano : Elm.Expression
vrpano =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vrpano"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_auto: Material.Icons.Types.Icon msg -}
wb_auto : Elm.Expression
wb_auto =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_auto"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_cloudy: Material.Icons.Types.Icon msg -}
wb_cloudy : Elm.Expression
wb_cloudy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_cloudy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_incandescent: Material.Icons.Types.Icon msg -}
wb_incandescent : Elm.Expression
wb_incandescent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_incandescent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_iridescent: Material.Icons.Types.Icon msg -}
wb_iridescent : Elm.Expression
wb_iridescent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_iridescent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_shade: Material.Icons.Types.Icon msg -}
wb_shade : Elm.Expression
wb_shade =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_shade"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_sunny: Material.Icons.Types.Icon msg -}
wb_sunny : Elm.Expression
wb_sunny =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_sunny"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wb_twilight: Material.Icons.Types.Icon msg -}
wb_twilight : Elm.Expression
wb_twilight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wb_twilight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| three_sixty: Material.Icons.Types.Icon msg -}
three_sixty : Elm.Expression
three_sixty =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "three_sixty"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_business: Material.Icons.Types.Icon msg -}
add_business : Elm.Expression
add_business =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_business"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_location: Material.Icons.Types.Icon msg -}
add_location : Elm.Expression
add_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_location_alt: Material.Icons.Types.Icon msg -}
add_location_alt : Elm.Expression
add_location_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_location_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_road: Material.Icons.Types.Icon msg -}
add_road : Elm.Expression
add_road =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_road"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| agriculture: Material.Icons.Types.Icon msg -}
agriculture : Elm.Expression
agriculture =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "agriculture"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_stops: Material.Icons.Types.Icon msg -}
airline_stops : Elm.Expression
airline_stops =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_stops"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airlines: Material.Icons.Types.Icon msg -}
airlines : Elm.Expression
airlines =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airlines"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| alt_route: Material.Icons.Types.Icon msg -}
alt_route : Elm.Expression
alt_route =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "alt_route"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| atm: Material.Icons.Types.Icon msg -}
atm : Elm.Expression
atm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "atm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| attractions: Material.Icons.Types.Icon msg -}
attractions : Elm.Expression
attractions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "attractions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| badge: Material.Icons.Types.Icon msg -}
badge : Elm.Expression
badge =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "badge"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bakery_dining: Material.Icons.Types.Icon msg -}
bakery_dining : Elm.Expression
bakery_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bakery_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| beenhere: Material.Icons.Types.Icon msg -}
beenhere : Elm.Expression
beenhere =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "beenhere"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bike_scooter: Material.Icons.Types.Icon msg -}
bike_scooter : Elm.Expression
bike_scooter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bike_scooter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| breakfast_dining: Material.Icons.Types.Icon msg -}
breakfast_dining : Elm.Expression
breakfast_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "breakfast_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| brunch_dining: Material.Icons.Types.Icon msg -}
brunch_dining : Elm.Expression
brunch_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "brunch_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bus_alert: Material.Icons.Types.Icon msg -}
bus_alert : Elm.Expression
bus_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bus_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| car_crash: Material.Icons.Types.Icon msg -}
car_crash : Elm.Expression
car_crash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "car_crash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| car_rental: Material.Icons.Types.Icon msg -}
car_rental : Elm.Expression
car_rental =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "car_rental"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| car_repair: Material.Icons.Types.Icon msg -}
car_repair : Elm.Expression
car_repair =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "car_repair"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| castle: Material.Icons.Types.Icon msg -}
castle : Elm.Expression
castle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "castle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| category: Material.Icons.Types.Icon msg -}
category : Elm.Expression
category =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "category"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| celebration: Material.Icons.Types.Icon msg -}
celebration : Elm.Expression
celebration =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "celebration"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| church: Material.Icons.Types.Icon msg -}
church : Elm.Expression
church =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "church"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cleaning_services: Material.Icons.Types.Icon msg -}
cleaning_services : Elm.Expression
cleaning_services =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cleaning_services"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| compass_calibration: Material.Icons.Types.Icon msg -}
compass_calibration : Elm.Expression
compass_calibration =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "compass_calibration"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| connecting_airports: Material.Icons.Types.Icon msg -}
connecting_airports : Elm.Expression
connecting_airports =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "connecting_airports"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crisis_alert: Material.Icons.Types.Icon msg -}
crisis_alert : Elm.Expression
crisis_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crisis_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| delivery_dining: Material.Icons.Types.Icon msg -}
delivery_dining : Elm.Expression
delivery_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "delivery_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| departure_board: Material.Icons.Types.Icon msg -}
departure_board : Elm.Expression
departure_board =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "departure_board"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| design_services: Material.Icons.Types.Icon msg -}
design_services : Elm.Expression
design_services =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "design_services"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| diamond: Material.Icons.Types.Icon msg -}
diamond : Elm.Expression
diamond =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "diamond"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dinner_dining: Material.Icons.Types.Icon msg -}
dinner_dining : Elm.Expression
dinner_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dinner_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions: Material.Icons.Types.Icon msg -}
directions : Elm.Expression
directions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_bike: Material.Icons.Types.Icon msg -}
directions_bike : Elm.Expression
directions_bike =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_bike"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_boat: Material.Icons.Types.Icon msg -}
directions_boat : Elm.Expression
directions_boat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_boat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_boat_filled: Material.Icons.Types.Icon msg -}
directions_boat_filled : Elm.Expression
directions_boat_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_boat_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_bus: Material.Icons.Types.Icon msg -}
directions_bus : Elm.Expression
directions_bus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_bus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_bus_filled: Material.Icons.Types.Icon msg -}
directions_bus_filled : Elm.Expression
directions_bus_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_bus_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_car: Material.Icons.Types.Icon msg -}
directions_car : Elm.Expression
directions_car =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_car"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_car_filled: Material.Icons.Types.Icon msg -}
directions_car_filled : Elm.Expression
directions_car_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_car_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_railway: Material.Icons.Types.Icon msg -}
directions_railway : Elm.Expression
directions_railway =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_railway"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_railway_filled: Material.Icons.Types.Icon msg -}
directions_railway_filled : Elm.Expression
directions_railway_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_railway_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_run: Material.Icons.Types.Icon msg -}
directions_run : Elm.Expression
directions_run =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_run"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_subway: Material.Icons.Types.Icon msg -}
directions_subway : Elm.Expression
directions_subway =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_subway"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_subway_filled: Material.Icons.Types.Icon msg -}
directions_subway_filled : Elm.Expression
directions_subway_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_subway_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_transit: Material.Icons.Types.Icon msg -}
directions_transit : Elm.Expression
directions_transit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_transit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_transit_filled: Material.Icons.Types.Icon msg -}
directions_transit_filled : Elm.Expression
directions_transit_filled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_transit_filled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_walk: Material.Icons.Types.Icon msg -}
directions_walk : Elm.Expression
directions_walk =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_walk"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dry_cleaning: Material.Icons.Types.Icon msg -}
dry_cleaning : Elm.Expression
dry_cleaning =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dry_cleaning"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_attributes: Material.Icons.Types.Icon msg -}
edit_attributes : Elm.Expression
edit_attributes =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_attributes"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_location: Material.Icons.Types.Icon msg -}
edit_location : Elm.Expression
edit_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_location_alt: Material.Icons.Types.Icon msg -}
edit_location_alt : Elm.Expression
edit_location_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_location_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_road: Material.Icons.Types.Icon msg -}
edit_road : Elm.Expression
edit_road =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_road"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| egg: Material.Icons.Types.Icon msg -}
egg : Elm.Expression
egg =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "egg"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| egg_alt: Material.Icons.Types.Icon msg -}
egg_alt : Elm.Expression
egg_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "egg_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_bike: Material.Icons.Types.Icon msg -}
electric_bike : Elm.Expression
electric_bike =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_bike"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_car: Material.Icons.Types.Icon msg -}
electric_car : Elm.Expression
electric_car =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_car"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_moped: Material.Icons.Types.Icon msg -}
electric_moped : Elm.Expression
electric_moped =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_moped"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_rickshaw: Material.Icons.Types.Icon msg -}
electric_rickshaw : Elm.Expression
electric_rickshaw =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_rickshaw"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electric_scooter: Material.Icons.Types.Icon msg -}
electric_scooter : Elm.Expression
electric_scooter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electric_scooter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| electrical_services: Material.Icons.Types.Icon msg -}
electrical_services : Elm.Expression
electrical_services =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "electrical_services"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emergency: Material.Icons.Types.Icon msg -}
emergency : Elm.Expression
emergency =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emergency"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emergency_recording: Material.Icons.Types.Icon msg -}
emergency_recording : Elm.Expression
emergency_recording =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emergency_recording"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emergency_share: Material.Icons.Types.Icon msg -}
emergency_share : Elm.Expression
emergency_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emergency_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ev_station: Material.Icons.Types.Icon msg -}
ev_station : Elm.Expression
ev_station =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ev_station"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| factory: Material.Icons.Types.Icon msg -}
factory : Elm.Expression
factory =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "factory"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fastfood: Material.Icons.Types.Icon msg -}
fastfood : Elm.Expression
fastfood =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fastfood"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| festival: Material.Icons.Types.Icon msg -}
festival : Elm.Expression
festival =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "festival"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fire_hydrant_alt: Material.Icons.Types.Icon msg -}
fire_hydrant_alt : Elm.Expression
fire_hydrant_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fire_hydrant_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fire_truck: Material.Icons.Types.Icon msg -}
fire_truck : Elm.Expression
fire_truck =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fire_truck"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flight: Material.Icons.Types.Icon msg -}
flight : Elm.Expression
flight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flight_class: Material.Icons.Types.Icon msg -}
flight_class : Elm.Expression
flight_class =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flight_class"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| forest: Material.Icons.Types.Icon msg -}
forest : Elm.Expression
forest =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "forest"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fork_left: Material.Icons.Types.Icon msg -}
fork_left : Elm.Expression
fork_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fork_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fork_right: Material.Icons.Types.Icon msg -}
fork_right : Elm.Expression
fork_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fork_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fort: Material.Icons.Types.Icon msg -}
fort : Elm.Expression
fort =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fort"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hail: Material.Icons.Types.Icon msg -}
hail : Elm.Expression
hail =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hail"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| handyman: Material.Icons.Types.Icon msg -}
handyman : Elm.Expression
handyman =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "handyman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hardware: Material.Icons.Types.Icon msg -}
hardware : Elm.Expression
hardware =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hardware"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| home_repair_service: Material.Icons.Types.Icon msg -}
home_repair_service : Elm.Expression
home_repair_service =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "home_repair_service"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hotel: Material.Icons.Types.Icon msg -}
hotel : Elm.Expression
hotel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hotel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hvac: Material.Icons.Types.Icon msg -}
hvac : Elm.Expression
hvac =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hvac"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| icecream: Material.Icons.Types.Icon msg -}
icecream : Elm.Expression
icecream =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "icecream"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| kebab_dining: Material.Icons.Types.Icon msg -}
kebab_dining : Elm.Expression
kebab_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "kebab_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| layers: Material.Icons.Types.Icon msg -}
layers : Elm.Expression
layers =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "layers"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| layers_clear: Material.Icons.Types.Icon msg -}
layers_clear : Elm.Expression
layers_clear =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "layers_clear"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| liquor: Material.Icons.Types.Icon msg -}
liquor : Elm.Expression
liquor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "liquor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_activity: Material.Icons.Types.Icon msg -}
local_activity : Elm.Expression
local_activity =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_activity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_airport: Material.Icons.Types.Icon msg -}
local_airport : Elm.Expression
local_airport =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_airport"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_atm: Material.Icons.Types.Icon msg -}
local_atm : Elm.Expression
local_atm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_atm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_bar: Material.Icons.Types.Icon msg -}
local_bar : Elm.Expression
local_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_cafe: Material.Icons.Types.Icon msg -}
local_cafe : Elm.Expression
local_cafe =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_cafe"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_car_wash: Material.Icons.Types.Icon msg -}
local_car_wash : Elm.Expression
local_car_wash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_car_wash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_convenience_store: Material.Icons.Types.Icon msg -}
local_convenience_store : Elm.Expression
local_convenience_store =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_convenience_store"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_dining: Material.Icons.Types.Icon msg -}
local_dining : Elm.Expression
local_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_drink: Material.Icons.Types.Icon msg -}
local_drink : Elm.Expression
local_drink =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_drink"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_fire_department: Material.Icons.Types.Icon msg -}
local_fire_department : Elm.Expression
local_fire_department =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_fire_department"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_florist: Material.Icons.Types.Icon msg -}
local_florist : Elm.Expression
local_florist =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_florist"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_gas_station: Material.Icons.Types.Icon msg -}
local_gas_station : Elm.Expression
local_gas_station =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_gas_station"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_grocery_store: Material.Icons.Types.Icon msg -}
local_grocery_store : Elm.Expression
local_grocery_store =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_grocery_store"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_hospital: Material.Icons.Types.Icon msg -}
local_hospital : Elm.Expression
local_hospital =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_hospital"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_hotel: Material.Icons.Types.Icon msg -}
local_hotel : Elm.Expression
local_hotel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_hotel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_laundry_service: Material.Icons.Types.Icon msg -}
local_laundry_service : Elm.Expression
local_laundry_service =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_laundry_service"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_library: Material.Icons.Types.Icon msg -}
local_library : Elm.Expression
local_library =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_library"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_mall: Material.Icons.Types.Icon msg -}
local_mall : Elm.Expression
local_mall =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_mall"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_movies: Material.Icons.Types.Icon msg -}
local_movies : Elm.Expression
local_movies =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_movies"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_offer: Material.Icons.Types.Icon msg -}
local_offer : Elm.Expression
local_offer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_offer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_parking: Material.Icons.Types.Icon msg -}
local_parking : Elm.Expression
local_parking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_parking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_pharmacy: Material.Icons.Types.Icon msg -}
local_pharmacy : Elm.Expression
local_pharmacy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_pharmacy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_phone: Material.Icons.Types.Icon msg -}
local_phone : Elm.Expression
local_phone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_phone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_pizza: Material.Icons.Types.Icon msg -}
local_pizza : Elm.Expression
local_pizza =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_pizza"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_play: Material.Icons.Types.Icon msg -}
local_play : Elm.Expression
local_play =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_play"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_police: Material.Icons.Types.Icon msg -}
local_police : Elm.Expression
local_police =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_police"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_post_office: Material.Icons.Types.Icon msg -}
local_post_office : Elm.Expression
local_post_office =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_post_office"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_printshop: Material.Icons.Types.Icon msg -}
local_printshop : Elm.Expression
local_printshop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_printshop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_see: Material.Icons.Types.Icon msg -}
local_see : Elm.Expression
local_see =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_see"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_shipping: Material.Icons.Types.Icon msg -}
local_shipping : Elm.Expression
local_shipping =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_shipping"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| local_taxi: Material.Icons.Types.Icon msg -}
local_taxi : Elm.Expression
local_taxi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "local_taxi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| lunch_dining: Material.Icons.Types.Icon msg -}
lunch_dining : Elm.Expression
lunch_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "lunch_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| map: Material.Icons.Types.Icon msg -}
map : Elm.Expression
map =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "map"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| maps_ugc: Material.Icons.Types.Icon msg -}
maps_ugc : Elm.Expression
maps_ugc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "maps_ugc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| medical_information: Material.Icons.Types.Icon msg -}
medical_information : Elm.Expression
medical_information =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "medical_information"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| medical_services: Material.Icons.Types.Icon msg -}
medical_services : Elm.Expression
medical_services =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "medical_services"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| menu_book: Material.Icons.Types.Icon msg -}
menu_book : Elm.Expression
menu_book =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "menu_book"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| merge: Material.Icons.Types.Icon msg -}
merge : Elm.Expression
merge =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "merge"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| minor_crash: Material.Icons.Types.Icon msg -}
minor_crash : Elm.Expression
minor_crash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "minor_crash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| miscellaneous_services: Material.Icons.Types.Icon msg -}
miscellaneous_services : Elm.Expression
miscellaneous_services =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "miscellaneous_services"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mode_of_travel: Material.Icons.Types.Icon msg -}
mode_of_travel : Elm.Expression
mode_of_travel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mode_of_travel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| money: Material.Icons.Types.Icon msg -}
money : Elm.Expression
money =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "money"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| moped: Material.Icons.Types.Icon msg -}
moped : Elm.Expression
moped =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "moped"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mosque: Material.Icons.Types.Icon msg -}
mosque : Elm.Expression
mosque =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mosque"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| moving: Material.Icons.Types.Icon msg -}
moving : Elm.Expression
moving =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "moving"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| multiple_stop: Material.Icons.Types.Icon msg -}
multiple_stop : Elm.Expression
multiple_stop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "multiple_stop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| museum: Material.Icons.Types.Icon msg -}
museum : Elm.Expression
museum =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "museum"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| my_location: Material.Icons.Types.Icon msg -}
my_location : Elm.Expression
my_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "my_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| navigation: Material.Icons.Types.Icon msg -}
navigation : Elm.Expression
navigation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "navigation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| near_me: Material.Icons.Types.Icon msg -}
near_me : Elm.Expression
near_me =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "near_me"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| near_me_disabled: Material.Icons.Types.Icon msg -}
near_me_disabled : Elm.Expression
near_me_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "near_me_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nightlife: Material.Icons.Types.Icon msg -}
nightlife : Elm.Expression
nightlife =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nightlife"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_crash: Material.Icons.Types.Icon msg -}
no_crash : Elm.Expression
no_crash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_crash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_meals: Material.Icons.Types.Icon msg -}
no_meals : Elm.Expression
no_meals =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_meals"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_transfer: Material.Icons.Types.Icon msg -}
no_transfer : Elm.Expression
no_transfer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_transfer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| not_listed_location: Material.Icons.Types.Icon msg -}
not_listed_location : Elm.Expression
not_listed_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "not_listed_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| park: Material.Icons.Types.Icon msg -}
park : Elm.Expression
park =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "park"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pedal_bike: Material.Icons.Types.Icon msg -}
pedal_bike : Elm.Expression
pedal_bike =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pedal_bike"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_pin: Material.Icons.Types.Icon msg -}
person_pin : Elm.Expression
person_pin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_pin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_pin_circle: Material.Icons.Types.Icon msg -}
person_pin_circle : Elm.Expression
person_pin_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_pin_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pest_control: Material.Icons.Types.Icon msg -}
pest_control : Elm.Expression
pest_control =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pest_control"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pest_control_rodent: Material.Icons.Types.Icon msg -}
pest_control_rodent : Elm.Expression
pest_control_rodent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pest_control_rodent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pin_drop: Material.Icons.Types.Icon msg -}
pin_drop : Elm.Expression
pin_drop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pin_drop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| place: Material.Icons.Types.Icon msg -}
place : Elm.Expression
place =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "place"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| plumbing: Material.Icons.Types.Icon msg -}
plumbing : Elm.Expression
plumbing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "plumbing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| railway_alert: Material.Icons.Types.Icon msg -}
railway_alert : Elm.Expression
railway_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "railway_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ramen_dining: Material.Icons.Types.Icon msg -}
ramen_dining : Elm.Expression
ramen_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ramen_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ramp_left: Material.Icons.Types.Icon msg -}
ramp_left : Elm.Expression
ramp_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ramp_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ramp_right: Material.Icons.Types.Icon msg -}
ramp_right : Elm.Expression
ramp_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ramp_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rate_review: Material.Icons.Types.Icon msg -}
rate_review : Elm.Expression
rate_review =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rate_review"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_road: Material.Icons.Types.Icon msg -}
remove_road : Elm.Expression
remove_road =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_road"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restaurant: Material.Icons.Types.Icon msg -}
restaurant : Elm.Expression
restaurant =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restaurant"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| restaurant_menu: Material.Icons.Types.Icon msg -}
restaurant_menu : Elm.Expression
restaurant_menu =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "restaurant_menu"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roundabout_left: Material.Icons.Types.Icon msg -}
roundabout_left : Elm.Expression
roundabout_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roundabout_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roundabout_right: Material.Icons.Types.Icon msg -}
roundabout_right : Elm.Expression
roundabout_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roundabout_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| route: Material.Icons.Types.Icon msg -}
route : Elm.Expression
route =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "route"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| run_circle: Material.Icons.Types.Icon msg -}
run_circle : Elm.Expression
run_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "run_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| safety_check: Material.Icons.Types.Icon msg -}
safety_check : Elm.Expression
safety_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "safety_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sailing: Material.Icons.Types.Icon msg -}
sailing : Elm.Expression
sailing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sailing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| satellite: Material.Icons.Types.Icon msg -}
satellite : Elm.Expression
satellite =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "satellite"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| screen_rotation_alt: Material.Icons.Types.Icon msg -}
screen_rotation_alt : Elm.Expression
screen_rotation_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "screen_rotation_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| set_meal: Material.Icons.Types.Icon msg -}
set_meal : Elm.Expression
set_meal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "set_meal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| signpost: Material.Icons.Types.Icon msg -}
signpost : Elm.Expression
signpost =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "signpost"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| snowmobile: Material.Icons.Types.Icon msg -}
snowmobile : Elm.Expression
snowmobile =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "snowmobile"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sos: Material.Icons.Types.Icon msg -}
sos : Elm.Expression
sos =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sos"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| soup_kitchen: Material.Icons.Types.Icon msg -}
soup_kitchen : Elm.Expression
soup_kitchen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "soup_kitchen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stadium: Material.Icons.Types.Icon msg -}
stadium : Elm.Expression
stadium =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stadium"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| store_mall_directory: Material.Icons.Types.Icon msg -}
store_mall_directory : Elm.Expression
store_mall_directory =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "store_mall_directory"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| straight: Material.Icons.Types.Icon msg -}
straight : Elm.Expression
straight =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "straight"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| streetview: Material.Icons.Types.Icon msg -}
streetview : Elm.Expression
streetview =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "streetview"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subway: Material.Icons.Types.Icon msg -}
subway : Elm.Expression
subway =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subway"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| synagogue: Material.Icons.Types.Icon msg -}
synagogue : Elm.Expression
synagogue =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "synagogue"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| takeout_dining: Material.Icons.Types.Icon msg -}
takeout_dining : Elm.Expression
takeout_dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "takeout_dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| taxi_alert: Material.Icons.Types.Icon msg -}
taxi_alert : Elm.Expression
taxi_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "taxi_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| temple_buddhist: Material.Icons.Types.Icon msg -}
temple_buddhist : Elm.Expression
temple_buddhist =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "temple_buddhist"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| temple_hindu: Material.Icons.Types.Icon msg -}
temple_hindu : Elm.Expression
temple_hindu =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "temple_hindu"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| terrain: Material.Icons.Types.Icon msg -}
terrain : Elm.Expression
terrain =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "terrain"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| theater_comedy: Material.Icons.Types.Icon msg -}
theater_comedy : Elm.Expression
theater_comedy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "theater_comedy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tire_repair: Material.Icons.Types.Icon msg -}
tire_repair : Elm.Expression
tire_repair =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tire_repair"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| traffic: Material.Icons.Types.Icon msg -}
traffic : Elm.Expression
traffic =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "traffic"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| train: Material.Icons.Types.Icon msg -}
train : Elm.Expression
train =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "train"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tram: Material.Icons.Types.Icon msg -}
tram : Elm.Expression
tram =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tram"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| transfer_within_a_station: Material.Icons.Types.Icon msg -}
transfer_within_a_station : Elm.Expression
transfer_within_a_station =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "transfer_within_a_station"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| transit_enterexit: Material.Icons.Types.Icon msg -}
transit_enterexit : Elm.Expression
transit_enterexit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "transit_enterexit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| trip_origin: Material.Icons.Types.Icon msg -}
trip_origin : Elm.Expression
trip_origin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "trip_origin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_left: Material.Icons.Types.Icon msg -}
turn_left : Elm.Expression
turn_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_right: Material.Icons.Types.Icon msg -}
turn_right : Elm.Expression
turn_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_sharp_left: Material.Icons.Types.Icon msg -}
turn_sharp_left : Elm.Expression
turn_sharp_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_sharp_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_sharp_right: Material.Icons.Types.Icon msg -}
turn_sharp_right : Elm.Expression
turn_sharp_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_sharp_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_slight_left: Material.Icons.Types.Icon msg -}
turn_slight_left : Elm.Expression
turn_slight_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_slight_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| turn_slight_right: Material.Icons.Types.Icon msg -}
turn_slight_right : Elm.Expression
turn_slight_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "turn_slight_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| two_wheeler: Material.Icons.Types.Icon msg -}
two_wheeler : Elm.Expression
two_wheeler =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "two_wheeler"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| u_turn_left: Material.Icons.Types.Icon msg -}
u_turn_left : Elm.Expression
u_turn_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "u_turn_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| u_turn_right: Material.Icons.Types.Icon msg -}
u_turn_right : Elm.Expression
u_turn_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "u_turn_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volunteer_activism: Material.Icons.Types.Icon msg -}
volunteer_activism : Elm.Expression
volunteer_activism =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volunteer_activism"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| warehouse: Material.Icons.Types.Icon msg -}
warehouse : Elm.Expression
warehouse =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "warehouse"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wine_bar: Material.Icons.Types.Icon msg -}
wine_bar : Elm.Expression
wine_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wine_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wrong_location: Material.Icons.Types.Icon msg -}
wrong_location : Elm.Expression
wrong_location =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wrong_location"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| zoom_in_map: Material.Icons.Types.Icon msg -}
zoom_in_map : Elm.Expression
zoom_in_map =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "zoom_in_map"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| zoom_out_map: Material.Icons.Types.Icon msg -}
zoom_out_map : Elm.Expression
zoom_out_map =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "zoom_out_map"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_home_work: Material.Icons.Types.Icon msg -}
add_home_work : Elm.Expression
add_home_work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_home_work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| app_settings_alt: Material.Icons.Types.Icon msg -}
app_settings_alt : Elm.Expression
app_settings_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "app_settings_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| apps: Material.Icons.Types.Icon msg -}
apps : Elm.Expression
apps =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "apps"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| apps_outage: Material.Icons.Types.Icon msg -}
apps_outage : Elm.Expression
apps_outage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "apps_outage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_back: Material.Icons.Types.Icon msg -}
arrow_back : Elm.Expression
arrow_back =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_back"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_back_ios: Material.Icons.Types.Icon msg -}
arrow_back_ios : Elm.Expression
arrow_back_ios =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_back_ios"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_back_ios_new: Material.Icons.Types.Icon msg -}
arrow_back_ios_new : Elm.Expression
arrow_back_ios_new =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_back_ios_new"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_downward: Material.Icons.Types.Icon msg -}
arrow_downward : Elm.Expression
arrow_downward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_downward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_drop_down: Material.Icons.Types.Icon msg -}
arrow_drop_down : Elm.Expression
arrow_drop_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_drop_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_drop_down_circle: Material.Icons.Types.Icon msg -}
arrow_drop_down_circle : Elm.Expression
arrow_drop_down_circle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_drop_down_circle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_drop_up: Material.Icons.Types.Icon msg -}
arrow_drop_up : Elm.Expression
arrow_drop_up =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_drop_up"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_forward: Material.Icons.Types.Icon msg -}
arrow_forward : Elm.Expression
arrow_forward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_forward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_forward_ios: Material.Icons.Types.Icon msg -}
arrow_forward_ios : Elm.Expression
arrow_forward_ios =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_forward_ios"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_left: Material.Icons.Types.Icon msg -}
arrow_left : Elm.Expression
arrow_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_right: Material.Icons.Types.Icon msg -}
arrow_right : Elm.Expression
arrow_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| arrow_upward: Material.Icons.Types.Icon msg -}
arrow_upward : Elm.Expression
arrow_upward =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "arrow_upward"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assistant_direction: Material.Icons.Types.Icon msg -}
assistant_direction : Elm.Expression
assistant_direction =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assistant_direction"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| campaign: Material.Icons.Types.Icon msg -}
campaign : Elm.Expression
campaign =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "campaign"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cancel: Material.Icons.Types.Icon msg -}
cancel : Elm.Expression
cancel =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cancel"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| check: Material.Icons.Types.Icon msg -}
check : Elm.Expression
check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chevron_left: Material.Icons.Types.Icon msg -}
chevron_left : Elm.Expression
chevron_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chevron_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chevron_right: Material.Icons.Types.Icon msg -}
chevron_right : Elm.Expression
chevron_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chevron_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| close: Material.Icons.Types.Icon msg -}
close : Elm.Expression
close =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "close"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| double_arrow: Material.Icons.Types.Icon msg -}
double_arrow : Elm.Expression
double_arrow =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "double_arrow"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| east: Material.Icons.Types.Icon msg -}
east : Elm.Expression
east =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "east"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| expand_circle_down: Material.Icons.Types.Icon msg -}
expand_circle_down : Elm.Expression
expand_circle_down =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "expand_circle_down"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| expand_less: Material.Icons.Types.Icon msg -}
expand_less : Elm.Expression
expand_less =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "expand_less"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| expand_more: Material.Icons.Types.Icon msg -}
expand_more : Elm.Expression
expand_more =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "expand_more"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| first_page: Material.Icons.Types.Icon msg -}
first_page : Elm.Expression
first_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "first_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fullscreen: Material.Icons.Types.Icon msg -}
fullscreen : Elm.Expression
fullscreen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fullscreen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fullscreen_exit: Material.Icons.Types.Icon msg -}
fullscreen_exit : Elm.Expression
fullscreen_exit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fullscreen_exit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| home_work: Material.Icons.Types.Icon msg -}
home_work : Elm.Expression
home_work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "home_work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| last_page: Material.Icons.Types.Icon msg -}
last_page : Elm.Expression
last_page =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "last_page"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| legend_toggle: Material.Icons.Types.Icon msg -}
legend_toggle : Elm.Expression
legend_toggle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "legend_toggle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| maps_home_work: Material.Icons.Types.Icon msg -}
maps_home_work : Elm.Expression
maps_home_work =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "maps_home_work"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| menu: Material.Icons.Types.Icon msg -}
menu : Elm.Expression
menu =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "menu"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| menu_open: Material.Icons.Types.Icon msg -}
menu_open : Elm.Expression
menu_open =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "menu_open"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| more_horiz: Material.Icons.Types.Icon msg -}
more_horiz : Elm.Expression
more_horiz =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "more_horiz"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| more_vert: Material.Icons.Types.Icon msg -}
more_vert : Elm.Expression
more_vert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "more_vert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| north: Material.Icons.Types.Icon msg -}
north : Elm.Expression
north =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "north"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| north_east: Material.Icons.Types.Icon msg -}
north_east : Elm.Expression
north_east =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "north_east"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| north_west: Material.Icons.Types.Icon msg -}
north_west : Elm.Expression
north_west =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "north_west"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| offline_share: Material.Icons.Types.Icon msg -}
offline_share : Elm.Expression
offline_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "offline_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| payments: Material.Icons.Types.Icon msg -}
payments : Elm.Expression
payments =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "payments"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pivot_table_chart: Material.Icons.Types.Icon msg -}
pivot_table_chart : Elm.Expression
pivot_table_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pivot_table_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| refresh: Material.Icons.Types.Icon msg -}
refresh : Elm.Expression
refresh =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "refresh"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| south: Material.Icons.Types.Icon msg -}
south : Elm.Expression
south =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "south"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| south_east: Material.Icons.Types.Icon msg -}
south_east : Elm.Expression
south_east =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "south_east"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| south_west: Material.Icons.Types.Icon msg -}
south_west : Elm.Expression
south_west =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "south_west"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subdirectory_arrow_left: Material.Icons.Types.Icon msg -}
subdirectory_arrow_left : Elm.Expression
subdirectory_arrow_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subdirectory_arrow_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| subdirectory_arrow_right: Material.Icons.Types.Icon msg -}
subdirectory_arrow_right : Elm.Expression
subdirectory_arrow_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "subdirectory_arrow_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_left: Material.Icons.Types.Icon msg -}
switch_left : Elm.Expression
switch_left =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_left"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_right: Material.Icons.Types.Icon msg -}
switch_right : Elm.Expression
switch_right =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_right"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unfold_less: Material.Icons.Types.Icon msg -}
unfold_less : Elm.Expression
unfold_less =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unfold_less"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| unfold_more: Material.Icons.Types.Icon msg -}
unfold_more : Elm.Expression
unfold_more =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "unfold_more"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| waterfall_chart: Material.Icons.Types.Icon msg -}
waterfall_chart : Elm.Expression
waterfall_chart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "waterfall_chart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| west: Material.Icons.Types.Icon msg -}
west : Elm.Expression
west =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "west"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| account_tree: Material.Icons.Types.Icon msg -}
account_tree : Elm.Expression
account_tree =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "account_tree"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| adb: Material.Icons.Types.Icon msg -}
adb : Elm.Expression
adb =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "adb"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_flat: Material.Icons.Types.Icon msg -}
airline_seat_flat : Elm.Expression
airline_seat_flat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_flat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_flat_angled: Material.Icons.Types.Icon msg -}
airline_seat_flat_angled : Elm.Expression
airline_seat_flat_angled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_flat_angled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_individual_suite: Material.Icons.Types.Icon msg -}
airline_seat_individual_suite : Elm.Expression
airline_seat_individual_suite =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_individual_suite"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_legroom_extra: Material.Icons.Types.Icon msg -}
airline_seat_legroom_extra : Elm.Expression
airline_seat_legroom_extra =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_legroom_extra"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_legroom_normal: Material.Icons.Types.Icon msg -}
airline_seat_legroom_normal : Elm.Expression
airline_seat_legroom_normal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_legroom_normal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_legroom_reduced: Material.Icons.Types.Icon msg -}
airline_seat_legroom_reduced : Elm.Expression
airline_seat_legroom_reduced =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_legroom_reduced"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_recline_extra: Material.Icons.Types.Icon msg -}
airline_seat_recline_extra : Elm.Expression
airline_seat_recline_extra =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_recline_extra"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airline_seat_recline_normal: Material.Icons.Types.Icon msg -}
airline_seat_recline_normal : Elm.Expression
airline_seat_recline_normal =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airline_seat_recline_normal"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bluetooth_audio: Material.Icons.Types.Icon msg -}
bluetooth_audio : Elm.Expression
bluetooth_audio =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bluetooth_audio"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| confirmation_number: Material.Icons.Types.Icon msg -}
confirmation_number : Elm.Expression
confirmation_number =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "confirmation_number"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| directions_off: Material.Icons.Types.Icon msg -}
directions_off : Elm.Expression
directions_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "directions_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| disc_full: Material.Icons.Types.Icon msg -}
disc_full : Elm.Expression
disc_full =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "disc_full"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_disturb: Material.Icons.Types.Icon msg -}
do_disturb : Elm.Expression
do_disturb =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_disturb"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_disturb_alt: Material.Icons.Types.Icon msg -}
do_disturb_alt : Elm.Expression
do_disturb_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_disturb_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_disturb_off: Material.Icons.Types.Icon msg -}
do_disturb_off : Elm.Expression
do_disturb_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_disturb_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_disturb_on: Material.Icons.Types.Icon msg -}
do_disturb_on : Elm.Expression
do_disturb_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_disturb_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_disturb: Material.Icons.Types.Icon msg -}
do_not_disturb : Elm.Expression
do_not_disturb =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_disturb"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_disturb_alt: Material.Icons.Types.Icon msg -}
do_not_disturb_alt : Elm.Expression
do_not_disturb_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_disturb_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_disturb_off: Material.Icons.Types.Icon msg -}
do_not_disturb_off : Elm.Expression
do_not_disturb_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_disturb_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_disturb_on: Material.Icons.Types.Icon msg -}
do_not_disturb_on : Elm.Expression
do_not_disturb_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_disturb_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| drive_eta: Material.Icons.Types.Icon msg -}
drive_eta : Elm.Expression
drive_eta =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "drive_eta"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| enhanced_encryption: Material.Icons.Types.Icon msg -}
enhanced_encryption : Elm.Expression
enhanced_encryption =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "enhanced_encryption"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event_available: Material.Icons.Types.Icon msg -}
event_available : Elm.Expression
event_available =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event_available"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event_busy: Material.Icons.Types.Icon msg -}
event_busy : Elm.Expression
event_busy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event_busy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| event_note: Material.Icons.Types.Icon msg -}
event_note : Elm.Expression
event_note =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "event_note"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| folder_special: Material.Icons.Types.Icon msg -}
folder_special : Elm.Expression
folder_special =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "folder_special"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| imagesearch_roller: Material.Icons.Types.Icon msg -}
imagesearch_roller : Elm.Expression
imagesearch_roller =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "imagesearch_roller"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| live_tv: Material.Icons.Types.Icon msg -}
live_tv : Elm.Expression
live_tv =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "live_tv"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mms: Material.Icons.Types.Icon msg -}
mms : Elm.Expression
mms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| more: Material.Icons.Types.Icon msg -}
more : Elm.Expression
more =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "more"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_check: Material.Icons.Types.Icon msg -}
network_check : Elm.Expression
network_check =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_check"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| network_locked: Material.Icons.Types.Icon msg -}
network_locked : Elm.Expression
network_locked =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "network_locked"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_encryption: Material.Icons.Types.Icon msg -}
no_encryption : Elm.Expression
no_encryption =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_encryption"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_encryption_gmailerrorred: Material.Icons.Types.Icon msg -}
no_encryption_gmailerrorred : Elm.Expression
no_encryption_gmailerrorred =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_encryption_gmailerrorred"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ondemand_video: Material.Icons.Types.Icon msg -}
ondemand_video : Elm.Expression
ondemand_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ondemand_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| personal_video: Material.Icons.Types.Icon msg -}
personal_video : Elm.Expression
personal_video =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "personal_video"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_bluetooth_speaker: Material.Icons.Types.Icon msg -}
phone_bluetooth_speaker : Elm.Expression
phone_bluetooth_speaker =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_bluetooth_speaker"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_callback: Material.Icons.Types.Icon msg -}
phone_callback : Elm.Expression
phone_callback =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_callback"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_forwarded: Material.Icons.Types.Icon msg -}
phone_forwarded : Elm.Expression
phone_forwarded =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_forwarded"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_locked: Material.Icons.Types.Icon msg -}
phone_locked : Elm.Expression
phone_locked =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_locked"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_missed: Material.Icons.Types.Icon msg -}
phone_missed : Elm.Expression
phone_missed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_missed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| phone_paused: Material.Icons.Types.Icon msg -}
phone_paused : Elm.Expression
phone_paused =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "phone_paused"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| power: Material.Icons.Types.Icon msg -}
power : Elm.Expression
power =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "power"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| power_off: Material.Icons.Types.Icon msg -}
power_off : Elm.Expression
power_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "power_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| priority_high: Material.Icons.Types.Icon msg -}
priority_high : Elm.Expression
priority_high =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "priority_high"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| running_with_errors: Material.Icons.Types.Icon msg -}
running_with_errors : Elm.Expression
running_with_errors =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "running_with_errors"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sd_card: Material.Icons.Types.Icon msg -}
sd_card : Elm.Expression
sd_card =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sd_card"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sd_card_alert: Material.Icons.Types.Icon msg -}
sd_card_alert : Elm.Expression
sd_card_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sd_card_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sim_card_alert: Material.Icons.Types.Icon msg -}
sim_card_alert : Elm.Expression
sim_card_alert =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sim_card_alert"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sms: Material.Icons.Types.Icon msg -}
sms : Elm.Expression
sms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sms_failed: Material.Icons.Types.Icon msg -}
sms_failed : Elm.Expression
sms_failed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sms_failed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| support_agent: Material.Icons.Types.Icon msg -}
support_agent : Elm.Expression
support_agent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "support_agent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sync: Material.Icons.Types.Icon msg -}
sync : Elm.Expression
sync =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sync"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sync_disabled: Material.Icons.Types.Icon msg -}
sync_disabled : Elm.Expression
sync_disabled =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sync_disabled"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sync_lock: Material.Icons.Types.Icon msg -}
sync_lock : Elm.Expression
sync_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sync_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sync_problem: Material.Icons.Types.Icon msg -}
sync_problem : Elm.Expression
sync_problem =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sync_problem"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| system_update: Material.Icons.Types.Icon msg -}
system_update : Elm.Expression
system_update =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "system_update"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tap_and_play: Material.Icons.Types.Icon msg -}
tap_and_play : Elm.Expression
tap_and_play =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tap_and_play"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| time_to_leave: Material.Icons.Types.Icon msg -}
time_to_leave : Elm.Expression
time_to_leave =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "time_to_leave"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tv_off: Material.Icons.Types.Icon msg -}
tv_off : Elm.Expression
tv_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tv_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vibration: Material.Icons.Types.Icon msg -}
vibration : Elm.Expression
vibration =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vibration"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| video_chat: Material.Icons.Types.Icon msg -}
video_chat : Elm.Expression
video_chat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "video_chat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| voice_chat: Material.Icons.Types.Icon msg -}
voice_chat : Elm.Expression
voice_chat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "voice_chat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vpn_lock: Material.Icons.Types.Icon msg -}
vpn_lock : Elm.Expression
vpn_lock =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vpn_lock"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wc: Material.Icons.Types.Icon msg -}
wc : Elm.Expression
wc =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wc"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi: Material.Icons.Types.Icon msg -}
wifi : Elm.Expression
wifi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wifi_off: Material.Icons.Types.Icon msg -}
wifi_off : Elm.Expression
wifi_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wifi_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ac_unit: Material.Icons.Types.Icon msg -}
ac_unit : Elm.Expression
ac_unit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ac_unit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| airport_shuttle: Material.Icons.Types.Icon msg -}
airport_shuttle : Elm.Expression
airport_shuttle =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "airport_shuttle"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| all_inclusive: Material.Icons.Types.Icon msg -}
all_inclusive : Elm.Expression
all_inclusive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "all_inclusive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| apartment: Material.Icons.Types.Icon msg -}
apartment : Elm.Expression
apartment =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "apartment"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| baby_changing_station: Material.Icons.Types.Icon msg -}
baby_changing_station : Elm.Expression
baby_changing_station =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "baby_changing_station"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| backpack: Material.Icons.Types.Icon msg -}
backpack : Elm.Expression
backpack =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "backpack"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| balcony: Material.Icons.Types.Icon msg -}
balcony : Elm.Expression
balcony =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "balcony"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bathtub: Material.Icons.Types.Icon msg -}
bathtub : Elm.Expression
bathtub =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bathtub"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| beach_access: Material.Icons.Types.Icon msg -}
beach_access : Elm.Expression
beach_access =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "beach_access"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bento: Material.Icons.Types.Icon msg -}
bento : Elm.Expression
bento =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bento"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bungalow: Material.Icons.Types.Icon msg -}
bungalow : Elm.Expression
bungalow =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bungalow"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| business_center: Material.Icons.Types.Icon msg -}
business_center : Elm.Expression
business_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "business_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cabin: Material.Icons.Types.Icon msg -}
cabin : Elm.Expression
cabin =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cabin"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| carpenter: Material.Icons.Types.Icon msg -}
carpenter : Elm.Expression
carpenter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "carpenter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| casino: Material.Icons.Types.Icon msg -}
casino : Elm.Expression
casino =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "casino"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chalet: Material.Icons.Types.Icon msg -}
chalet : Elm.Expression
chalet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chalet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| charging_station: Material.Icons.Types.Icon msg -}
charging_station : Elm.Expression
charging_station =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "charging_station"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| checkroom: Material.Icons.Types.Icon msg -}
checkroom : Elm.Expression
checkroom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "checkroom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| child_care: Material.Icons.Types.Icon msg -}
child_care : Elm.Expression
child_care =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "child_care"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| child_friendly: Material.Icons.Types.Icon msg -}
child_friendly : Elm.Expression
child_friendly =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "child_friendly"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| corporate_fare: Material.Icons.Types.Icon msg -}
corporate_fare : Elm.Expression
corporate_fare =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "corporate_fare"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cottage: Material.Icons.Types.Icon msg -}
cottage : Elm.Expression
cottage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cottage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| countertops: Material.Icons.Types.Icon msg -}
countertops : Elm.Expression
countertops =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "countertops"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| crib: Material.Icons.Types.Icon msg -}
crib : Elm.Expression
crib =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "crib"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| desk: Material.Icons.Types.Icon msg -}
desk : Elm.Expression
desk =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "desk"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_step: Material.Icons.Types.Icon msg -}
do_not_step : Elm.Expression
do_not_step =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_step"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| do_not_touch: Material.Icons.Types.Icon msg -}
do_not_touch : Elm.Expression
do_not_touch =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "do_not_touch"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dry: Material.Icons.Types.Icon msg -}
dry : Elm.Expression
dry =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dry"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| elevator: Material.Icons.Types.Icon msg -}
elevator : Elm.Expression
elevator =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "elevator"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| escalator: Material.Icons.Types.Icon msg -}
escalator : Elm.Expression
escalator =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "escalator"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| escalator_warning: Material.Icons.Types.Icon msg -}
escalator_warning : Elm.Expression
escalator_warning =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "escalator_warning"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| family_restroom: Material.Icons.Types.Icon msg -}
family_restroom : Elm.Expression
family_restroom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "family_restroom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fence: Material.Icons.Types.Icon msg -}
fence : Elm.Expression
fence =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fence"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fire_extinguisher: Material.Icons.Types.Icon msg -}
fire_extinguisher : Elm.Expression
fire_extinguisher =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fire_extinguisher"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fitness_center: Material.Icons.Types.Icon msg -}
fitness_center : Elm.Expression
fitness_center =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fitness_center"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| food_bank: Material.Icons.Types.Icon msg -}
food_bank : Elm.Expression
food_bank =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "food_bank"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| foundation: Material.Icons.Types.Icon msg -}
foundation : Elm.Expression
foundation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "foundation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| free_breakfast: Material.Icons.Types.Icon msg -}
free_breakfast : Elm.Expression
free_breakfast =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "free_breakfast"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| gite: Material.Icons.Types.Icon msg -}
gite : Elm.Expression
gite =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "gite"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| golf_course: Material.Icons.Types.Icon msg -}
golf_course : Elm.Expression
golf_course =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "golf_course"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| grass: Material.Icons.Types.Icon msg -}
grass : Elm.Expression
grass =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "grass"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| holiday_village: Material.Icons.Types.Icon msg -}
holiday_village : Elm.Expression
holiday_village =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "holiday_village"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hot_tub: Material.Icons.Types.Icon msg -}
hot_tub : Elm.Expression
hot_tub =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hot_tub"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| house: Material.Icons.Types.Icon msg -}
house : Elm.Expression
house =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "house"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| house_siding: Material.Icons.Types.Icon msg -}
house_siding : Elm.Expression
house_siding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "house_siding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| houseboat: Material.Icons.Types.Icon msg -}
houseboat : Elm.Expression
houseboat =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "houseboat"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| iron: Material.Icons.Types.Icon msg -}
iron : Elm.Expression
iron =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "iron"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| kitchen: Material.Icons.Types.Icon msg -}
kitchen : Elm.Expression
kitchen =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "kitchen"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| meeting_room: Material.Icons.Types.Icon msg -}
meeting_room : Elm.Expression
meeting_room =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "meeting_room"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| microwave: Material.Icons.Types.Icon msg -}
microwave : Elm.Expression
microwave =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "microwave"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| night_shelter: Material.Icons.Types.Icon msg -}
night_shelter : Elm.Expression
night_shelter =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "night_shelter"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_backpack: Material.Icons.Types.Icon msg -}
no_backpack : Elm.Expression
no_backpack =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_backpack"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_cell: Material.Icons.Types.Icon msg -}
no_cell : Elm.Expression
no_cell =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_cell"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_drinks: Material.Icons.Types.Icon msg -}
no_drinks : Elm.Expression
no_drinks =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_drinks"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_flash: Material.Icons.Types.Icon msg -}
no_flash : Elm.Expression
no_flash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_flash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_food: Material.Icons.Types.Icon msg -}
no_food : Elm.Expression
no_food =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_food"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_meeting_room: Material.Icons.Types.Icon msg -}
no_meeting_room : Elm.Expression
no_meeting_room =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_meeting_room"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_photography: Material.Icons.Types.Icon msg -}
no_photography : Elm.Expression
no_photography =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_photography"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_stroller: Material.Icons.Types.Icon msg -}
no_stroller : Elm.Expression
no_stroller =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_stroller"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| other_houses: Material.Icons.Types.Icon msg -}
other_houses : Elm.Expression
other_houses =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "other_houses"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pool: Material.Icons.Types.Icon msg -}
pool : Elm.Expression
pool =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pool"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rice_bowl: Material.Icons.Types.Icon msg -}
rice_bowl : Elm.Expression
rice_bowl =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rice_bowl"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roofing: Material.Icons.Types.Icon msg -}
roofing : Elm.Expression
roofing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roofing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| room_preferences: Material.Icons.Types.Icon msg -}
room_preferences : Elm.Expression
room_preferences =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "room_preferences"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| room_service: Material.Icons.Types.Icon msg -}
room_service : Elm.Expression
room_service =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "room_service"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| rv_hookup: Material.Icons.Types.Icon msg -}
rv_hookup : Elm.Expression
rv_hookup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "rv_hookup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smoke_free: Material.Icons.Types.Icon msg -}
smoke_free : Elm.Expression
smoke_free =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smoke_free"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| smoking_rooms: Material.Icons.Types.Icon msg -}
smoking_rooms : Elm.Expression
smoking_rooms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "smoking_rooms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| soap: Material.Icons.Types.Icon msg -}
soap : Elm.Expression
soap =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "soap"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| spa: Material.Icons.Types.Icon msg -}
spa : Elm.Expression
spa =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "spa"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_bar: Material.Icons.Types.Icon msg -}
sports_bar : Elm.Expression
sports_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stairs: Material.Icons.Types.Icon msg -}
stairs : Elm.Expression
stairs =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stairs"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| storefront: Material.Icons.Types.Icon msg -}
storefront : Elm.Expression
storefront =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "storefront"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| stroller: Material.Icons.Types.Icon msg -}
stroller : Elm.Expression
stroller =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "stroller"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tapas: Material.Icons.Types.Icon msg -}
tapas : Elm.Expression
tapas =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tapas"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tty: Material.Icons.Types.Icon msg -}
tty : Elm.Expression
tty =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tty"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| umbrella: Material.Icons.Types.Icon msg -}
umbrella : Elm.Expression
umbrella =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "umbrella"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vape_free: Material.Icons.Types.Icon msg -}
vape_free : Elm.Expression
vape_free =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vape_free"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vaping_rooms: Material.Icons.Types.Icon msg -}
vaping_rooms : Elm.Expression
vaping_rooms =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vaping_rooms"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| villa: Material.Icons.Types.Icon msg -}
villa : Elm.Expression
villa =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "villa"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wash: Material.Icons.Types.Icon msg -}
wash : Elm.Expression
wash =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wash"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| water_damage: Material.Icons.Types.Icon msg -}
water_damage : Elm.Expression
water_damage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "water_damage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wheelchair_pickup: Material.Icons.Types.Icon msg -}
wheelchair_pickup : Elm.Expression
wheelchair_pickup =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wheelchair_pickup"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bathroom: Material.Icons.Types.Icon msg -}
bathroom : Elm.Expression
bathroom =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bathroom"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bed: Material.Icons.Types.Icon msg -}
bed : Elm.Expression
bed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bedroom_baby: Material.Icons.Types.Icon msg -}
bedroom_baby : Elm.Expression
bedroom_baby =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bedroom_baby"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bedroom_child: Material.Icons.Types.Icon msg -}
bedroom_child : Elm.Expression
bedroom_child =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bedroom_child"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| bedroom_parent: Material.Icons.Types.Icon msg -}
bedroom_parent : Elm.Expression
bedroom_parent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "bedroom_parent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blender: Material.Icons.Types.Icon msg -}
blender : Elm.Expression
blender =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blender"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_indoor: Material.Icons.Types.Icon msg -}
camera_indoor : Elm.Expression
camera_indoor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_indoor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| camera_outdoor: Material.Icons.Types.Icon msg -}
camera_outdoor : Elm.Expression
camera_outdoor =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "camera_outdoor"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chair: Material.Icons.Types.Icon msg -}
chair : Elm.Expression
chair =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chair"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| chair_alt: Material.Icons.Types.Icon msg -}
chair_alt : Elm.Expression
chair_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "chair_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| coffee: Material.Icons.Types.Icon msg -}
coffee : Elm.Expression
coffee =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "coffee"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| coffee_maker: Material.Icons.Types.Icon msg -}
coffee_maker : Elm.Expression
coffee_maker =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "coffee_maker"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| dining: Material.Icons.Types.Icon msg -}
dining : Elm.Expression
dining =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "dining"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| door_back: Material.Icons.Types.Icon msg -}
door_back : Elm.Expression
door_back =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "door_back"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| door_front: Material.Icons.Types.Icon msg -}
door_front : Elm.Expression
door_front =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "door_front"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| door_sliding: Material.Icons.Types.Icon msg -}
door_sliding : Elm.Expression
door_sliding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "door_sliding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| doorbell: Material.Icons.Types.Icon msg -}
doorbell : Elm.Expression
doorbell =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "doorbell"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| feed: Material.Icons.Types.Icon msg -}
feed : Elm.Expression
feed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "feed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flatware: Material.Icons.Types.Icon msg -}
flatware : Elm.Expression
flatware =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flatware"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| garage: Material.Icons.Types.Icon msg -}
garage : Elm.Expression
garage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "garage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| light: Material.Icons.Types.Icon msg -}
light : Elm.Expression
light =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "light"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| living: Material.Icons.Types.Icon msg -}
living : Elm.Expression
living =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "living"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| manage_search: Material.Icons.Types.Icon msg -}
manage_search : Elm.Expression
manage_search =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "manage_search"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| podcasts: Material.Icons.Types.Icon msg -}
podcasts : Elm.Expression
podcasts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "podcasts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| shower: Material.Icons.Types.Icon msg -}
shower : Elm.Expression
shower =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "shower"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| table_bar: Material.Icons.Types.Icon msg -}
table_bar : Elm.Expression
table_bar =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "table_bar"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| table_restaurant: Material.Icons.Types.Icon msg -}
table_restaurant : Elm.Expression
table_restaurant =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "table_restaurant"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| window: Material.Icons.Types.Icon msg -}
window : Elm.Expression
window =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "window"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| yard: Material.Icons.Types.Icon msg -}
yard : Elm.Expression
yard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "yard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| eighteen_up_rating: Material.Icons.Types.Icon msg -}
eighteen_up_rating : Elm.Expression
eighteen_up_rating =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "eighteen_up_rating"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| six_ft_apart: Material.Icons.Types.Icon msg -}
six_ft_apart : Elm.Expression
six_ft_apart =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "six_ft_apart"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_moderator: Material.Icons.Types.Icon msg -}
add_moderator : Elm.Expression
add_moderator =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_moderator"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| add_reaction: Material.Icons.Types.Icon msg -}
add_reaction : Elm.Expression
add_reaction =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "add_reaction"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| architecture: Material.Icons.Types.Icon msg -}
architecture : Elm.Expression
architecture =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "architecture"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| assist_walker: Material.Icons.Types.Icon msg -}
assist_walker : Elm.Expression
assist_walker =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "assist_walker"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| back_hand: Material.Icons.Types.Icon msg -}
back_hand : Elm.Expression
back_hand =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "back_hand"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| blind: Material.Icons.Types.Icon msg -}
blind : Elm.Expression
blind =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "blind"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| boy: Material.Icons.Types.Icon msg -}
boy : Elm.Expression
boy =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "boy"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cake: Material.Icons.Types.Icon msg -}
cake : Elm.Expression
cake =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cake"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| catching_pokemon: Material.Icons.Types.Icon msg -}
catching_pokemon : Elm.Expression
catching_pokemon =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "catching_pokemon"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| clean_hands: Material.Icons.Types.Icon msg -}
clean_hands : Elm.Expression
clean_hands =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "clean_hands"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| co2: Material.Icons.Types.Icon msg -}
co2 : Elm.Expression
co2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "co2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| compost: Material.Icons.Types.Icon msg -}
compost : Elm.Expression
compost =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "compost"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| connect_without_contact: Material.Icons.Types.Icon msg -}
connect_without_contact : Elm.Expression
connect_without_contact =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "connect_without_contact"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| construction: Material.Icons.Types.Icon msg -}
construction : Elm.Expression
construction =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "construction"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cookie: Material.Icons.Types.Icon msg -}
cookie : Elm.Expression
cookie =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cookie"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| coronavirus: Material.Icons.Types.Icon msg -}
coronavirus : Elm.Expression
coronavirus =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "coronavirus"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cruelty_free: Material.Icons.Types.Icon msg -}
cruelty_free : Elm.Expression
cruelty_free =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cruelty_free"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| cyclone: Material.Icons.Types.Icon msg -}
cyclone : Elm.Expression
cyclone =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "cyclone"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| deck: Material.Icons.Types.Icon msg -}
deck : Elm.Expression
deck =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "deck"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| diversity_1: Material.Icons.Types.Icon msg -}
diversity_1 : Elm.Expression
diversity_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "diversity_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| diversity_2: Material.Icons.Types.Icon msg -}
diversity_2 : Elm.Expression
diversity_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "diversity_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| diversity_3: Material.Icons.Types.Icon msg -}
diversity_3 : Elm.Expression
diversity_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "diversity_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| domain: Material.Icons.Types.Icon msg -}
domain : Elm.Expression
domain =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "domain"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| domain_add: Material.Icons.Types.Icon msg -}
domain_add : Elm.Expression
domain_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "domain_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| downhill_skiing: Material.Icons.Types.Icon msg -}
downhill_skiing : Elm.Expression
downhill_skiing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "downhill_skiing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| edit_notifications: Material.Icons.Types.Icon msg -}
edit_notifications : Elm.Expression
edit_notifications =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "edit_notifications"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| elderly: Material.Icons.Types.Icon msg -}
elderly : Elm.Expression
elderly =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "elderly"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| elderly_woman: Material.Icons.Types.Icon msg -}
elderly_woman : Elm.Expression
elderly_woman =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "elderly_woman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_emotions: Material.Icons.Types.Icon msg -}
emoji_emotions : Elm.Expression
emoji_emotions =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_emotions"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_events: Material.Icons.Types.Icon msg -}
emoji_events : Elm.Expression
emoji_events =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_events"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_food_beverage: Material.Icons.Types.Icon msg -}
emoji_food_beverage : Elm.Expression
emoji_food_beverage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_food_beverage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_nature: Material.Icons.Types.Icon msg -}
emoji_nature : Elm.Expression
emoji_nature =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_nature"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_objects: Material.Icons.Types.Icon msg -}
emoji_objects : Elm.Expression
emoji_objects =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_objects"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_people: Material.Icons.Types.Icon msg -}
emoji_people : Elm.Expression
emoji_people =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_people"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_symbols: Material.Icons.Types.Icon msg -}
emoji_symbols : Elm.Expression
emoji_symbols =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_symbols"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| emoji_transportation: Material.Icons.Types.Icon msg -}
emoji_transportation : Elm.Expression
emoji_transportation =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "emoji_transportation"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| engineering: Material.Icons.Types.Icon msg -}
engineering : Elm.Expression
engineering =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "engineering"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_2: Material.Icons.Types.Icon msg -}
face_2 : Elm.Expression
face_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_3: Material.Icons.Types.Icon msg -}
face_3 : Elm.Expression
face_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_4: Material.Icons.Types.Icon msg -}
face_4 : Elm.Expression
face_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_5: Material.Icons.Types.Icon msg -}
face_5 : Elm.Expression
face_5 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_5"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| face_6: Material.Icons.Types.Icon msg -}
face_6 : Elm.Expression
face_6 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "face_6"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| female: Material.Icons.Types.Icon msg -}
female : Elm.Expression
female =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "female"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fireplace: Material.Icons.Types.Icon msg -}
fireplace : Elm.Expression
fireplace =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fireplace"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| fitbit: Material.Icons.Types.Icon msg -}
fitbit : Elm.Expression
fitbit =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "fitbit"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| flood: Material.Icons.Types.Icon msg -}
flood : Elm.Expression
flood =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "flood"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| follow_the_signs: Material.Icons.Types.Icon msg -}
follow_the_signs : Elm.Expression
follow_the_signs =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "follow_the_signs"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| front_hand: Material.Icons.Types.Icon msg -}
front_hand : Elm.Expression
front_hand =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "front_hand"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| girl: Material.Icons.Types.Icon msg -}
girl : Elm.Expression
girl =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "girl"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| group: Material.Icons.Types.Icon msg -}
group : Elm.Expression
group =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "group"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| group_add: Material.Icons.Types.Icon msg -}
group_add : Elm.Expression
group_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "group_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| group_off: Material.Icons.Types.Icon msg -}
group_off : Elm.Expression
group_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "group_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| group_remove: Material.Icons.Types.Icon msg -}
group_remove : Elm.Expression
group_remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "group_remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| groups: Material.Icons.Types.Icon msg -}
groups : Elm.Expression
groups =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "groups"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| groups_2: Material.Icons.Types.Icon msg -}
groups_2 : Elm.Expression
groups_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "groups_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| groups_3: Material.Icons.Types.Icon msg -}
groups_3 : Elm.Expression
groups_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "groups_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| handshake: Material.Icons.Types.Icon msg -}
handshake : Elm.Expression
handshake =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "handshake"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| health_and_safety: Material.Icons.Types.Icon msg -}
health_and_safety : Elm.Expression
health_and_safety =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "health_and_safety"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| heart_broken: Material.Icons.Types.Icon msg -}
heart_broken : Elm.Expression
heart_broken =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "heart_broken"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hiking: Material.Icons.Types.Icon msg -}
hiking : Elm.Expression
hiking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hiking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| history_edu: Material.Icons.Types.Icon msg -}
history_edu : Elm.Expression
history_edu =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "history_edu"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| hive: Material.Icons.Types.Icon msg -}
hive : Elm.Expression
hive =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "hive"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ice_skating: Material.Icons.Types.Icon msg -}
ice_skating : Elm.Expression
ice_skating =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ice_skating"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| interests: Material.Icons.Types.Icon msg -}
interests : Elm.Expression
interests =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "interests"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| ios_share: Material.Icons.Types.Icon msg -}
ios_share : Elm.Expression
ios_share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "ios_share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| kayaking: Material.Icons.Types.Icon msg -}
kayaking : Elm.Expression
kayaking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "kayaking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| king_bed: Material.Icons.Types.Icon msg -}
king_bed : Elm.Expression
king_bed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "king_bed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| kitesurfing: Material.Icons.Types.Icon msg -}
kitesurfing : Elm.Expression
kitesurfing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "kitesurfing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| landslide: Material.Icons.Types.Icon msg -}
landslide : Elm.Expression
landslide =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "landslide"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| location_city: Material.Icons.Types.Icon msg -}
location_city : Elm.Expression
location_city =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "location_city"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| luggage: Material.Icons.Types.Icon msg -}
luggage : Elm.Expression
luggage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "luggage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| male: Material.Icons.Types.Icon msg -}
male : Elm.Expression
male =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "male"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| man: Material.Icons.Types.Icon msg -}
man : Elm.Expression
man =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "man"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| man_2: Material.Icons.Types.Icon msg -}
man_2 : Elm.Expression
man_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "man_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| man_3: Material.Icons.Types.Icon msg -}
man_3 : Elm.Expression
man_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "man_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| man_4: Material.Icons.Types.Icon msg -}
man_4 : Elm.Expression
man_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "man_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| masks: Material.Icons.Types.Icon msg -}
masks : Elm.Expression
masks =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "masks"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| military_tech: Material.Icons.Types.Icon msg -}
military_tech : Elm.Expression
military_tech =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "military_tech"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mood: Material.Icons.Types.Icon msg -}
mood : Elm.Expression
mood =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mood"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| mood_bad: Material.Icons.Types.Icon msg -}
mood_bad : Elm.Expression
mood_bad =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "mood_bad"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nights_stay: Material.Icons.Types.Icon msg -}
nights_stay : Elm.Expression
nights_stay =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nights_stay"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_adult_content: Material.Icons.Types.Icon msg -}
no_adult_content : Elm.Expression
no_adult_content =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_adult_content"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| no_luggage: Material.Icons.Types.Icon msg -}
no_luggage : Elm.Expression
no_luggage =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "no_luggage"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| nordic_walking: Material.Icons.Types.Icon msg -}
nordic_walking : Elm.Expression
nordic_walking =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "nordic_walking"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notification_add: Material.Icons.Types.Icon msg -}
notification_add : Elm.Expression
notification_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notification_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notifications: Material.Icons.Types.Icon msg -}
notifications : Elm.Expression
notifications =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notifications"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notifications_active: Material.Icons.Types.Icon msg -}
notifications_active : Elm.Expression
notifications_active =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notifications_active"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notifications_none: Material.Icons.Types.Icon msg -}
notifications_none : Elm.Expression
notifications_none =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notifications_none"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notifications_off: Material.Icons.Types.Icon msg -}
notifications_off : Elm.Expression
notifications_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notifications_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| notifications_paused: Material.Icons.Types.Icon msg -}
notifications_paused : Elm.Expression
notifications_paused =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "notifications_paused"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| outdoor_grill: Material.Icons.Types.Icon msg -}
outdoor_grill : Elm.Expression
outdoor_grill =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "outdoor_grill"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pages: Material.Icons.Types.Icon msg -}
pages : Elm.Expression
pages =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pages"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| paragliding: Material.Icons.Types.Icon msg -}
paragliding : Elm.Expression
paragliding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "paragliding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| party_mode: Material.Icons.Types.Icon msg -}
party_mode : Elm.Expression
party_mode =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "party_mode"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| people: Material.Icons.Types.Icon msg -}
people : Elm.Expression
people =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "people"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| people_alt: Material.Icons.Types.Icon msg -}
people_alt : Elm.Expression
people_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "people_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| people_outline: Material.Icons.Types.Icon msg -}
people_outline : Elm.Expression
people_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "people_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person: Material.Icons.Types.Icon msg -}
person : Elm.Expression
person =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_2: Material.Icons.Types.Icon msg -}
person_2 : Elm.Expression
person_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_3: Material.Icons.Types.Icon msg -}
person_3 : Elm.Expression
person_3 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_3"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_4: Material.Icons.Types.Icon msg -}
person_4 : Elm.Expression
person_4 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_4"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_add: Material.Icons.Types.Icon msg -}
person_add : Elm.Expression
person_add =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_add"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_add_alt: Material.Icons.Types.Icon msg -}
person_add_alt : Elm.Expression
person_add_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_add_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_add_alt_1: Material.Icons.Types.Icon msg -}
person_add_alt_1 : Elm.Expression
person_add_alt_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_add_alt_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_off: Material.Icons.Types.Icon msg -}
person_off : Elm.Expression
person_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_outline: Material.Icons.Types.Icon msg -}
person_outline : Elm.Expression
person_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_remove: Material.Icons.Types.Icon msg -}
person_remove : Elm.Expression
person_remove =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_remove"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| person_remove_alt_1: Material.Icons.Types.Icon msg -}
person_remove_alt_1 : Elm.Expression
person_remove_alt_1 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "person_remove_alt_1"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| personal_injury: Material.Icons.Types.Icon msg -}
personal_injury : Elm.Expression
personal_injury =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "personal_injury"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| piano: Material.Icons.Types.Icon msg -}
piano : Elm.Expression
piano =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "piano"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| piano_off: Material.Icons.Types.Icon msg -}
piano_off : Elm.Expression
piano_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "piano_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| pix: Material.Icons.Types.Icon msg -}
pix : Elm.Expression
pix =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "pix"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| plus_one: Material.Icons.Types.Icon msg -}
plus_one : Elm.Expression
plus_one =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "plus_one"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| poll: Material.Icons.Types.Icon msg -}
poll : Elm.Expression
poll =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "poll"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| precision_manufacturing: Material.Icons.Types.Icon msg -}
precision_manufacturing : Elm.Expression
precision_manufacturing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "precision_manufacturing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| psychology: Material.Icons.Types.Icon msg -}
psychology : Elm.Expression
psychology =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "psychology"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| psychology_alt: Material.Icons.Types.Icon msg -}
psychology_alt : Elm.Expression
psychology_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "psychology_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| public: Material.Icons.Types.Icon msg -}
public : Elm.Expression
public =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "public"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| public_off: Material.Icons.Types.Icon msg -}
public_off : Elm.Expression
public_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "public_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| real_estate_agent: Material.Icons.Types.Icon msg -}
real_estate_agent : Elm.Expression
real_estate_agent =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "real_estate_agent"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| recommend: Material.Icons.Types.Icon msg -}
recommend : Elm.Expression
recommend =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "recommend"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| recycling: Material.Icons.Types.Icon msg -}
recycling : Elm.Expression
recycling =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "recycling"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| reduce_capacity: Material.Icons.Types.Icon msg -}
reduce_capacity : Elm.Expression
reduce_capacity =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "reduce_capacity"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| remove_moderator: Material.Icons.Types.Icon msg -}
remove_moderator : Elm.Expression
remove_moderator =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "remove_moderator"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| roller_skating: Material.Icons.Types.Icon msg -}
roller_skating : Elm.Expression
roller_skating =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "roller_skating"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| safety_divider: Material.Icons.Types.Icon msg -}
safety_divider : Elm.Expression
safety_divider =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "safety_divider"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sanitizer: Material.Icons.Types.Icon msg -}
sanitizer : Elm.Expression
sanitizer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sanitizer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| scale: Material.Icons.Types.Icon msg -}
scale : Elm.Expression
scale =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "scale"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| school: Material.Icons.Types.Icon msg -}
school : Elm.Expression
school =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "school"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| science: Material.Icons.Types.Icon msg -}
science : Elm.Expression
science =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "science"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| scoreboard: Material.Icons.Types.Icon msg -}
scoreboard : Elm.Expression
scoreboard =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "scoreboard"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| scuba_diving: Material.Icons.Types.Icon msg -}
scuba_diving : Elm.Expression
scuba_diving =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "scuba_diving"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| self_improvement: Material.Icons.Types.Icon msg -}
self_improvement : Elm.Expression
self_improvement =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "self_improvement"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_dissatisfied: Material.Icons.Types.Icon msg -}
sentiment_dissatisfied : Elm.Expression
sentiment_dissatisfied =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_dissatisfied"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_neutral: Material.Icons.Types.Icon msg -}
sentiment_neutral : Elm.Expression
sentiment_neutral =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_neutral"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_satisfied: Material.Icons.Types.Icon msg -}
sentiment_satisfied : Elm.Expression
sentiment_satisfied =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_satisfied"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_very_dissatisfied: Material.Icons.Types.Icon msg -}
sentiment_very_dissatisfied : Elm.Expression
sentiment_very_dissatisfied =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_very_dissatisfied"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sentiment_very_satisfied: Material.Icons.Types.Icon msg -}
sentiment_very_satisfied : Elm.Expression
sentiment_very_satisfied =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sentiment_very_satisfied"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| severe_cold: Material.Icons.Types.Icon msg -}
severe_cold : Elm.Expression
severe_cold =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "severe_cold"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| share: Material.Icons.Types.Icon msg -}
share : Elm.Expression
share =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "share"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sick: Material.Icons.Types.Icon msg -}
sick : Elm.Expression
sick =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sick"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sign_language: Material.Icons.Types.Icon msg -}
sign_language : Elm.Expression
sign_language =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sign_language"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| single_bed: Material.Icons.Types.Icon msg -}
single_bed : Elm.Expression
single_bed =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "single_bed"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| skateboarding: Material.Icons.Types.Icon msg -}
skateboarding : Elm.Expression
skateboarding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "skateboarding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sledding: Material.Icons.Types.Icon msg -}
sledding : Elm.Expression
sledding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sledding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| snowboarding: Material.Icons.Types.Icon msg -}
snowboarding : Elm.Expression
snowboarding =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "snowboarding"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| snowshoeing: Material.Icons.Types.Icon msg -}
snowshoeing : Elm.Expression
snowshoeing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "snowshoeing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| social_distance: Material.Icons.Types.Icon msg -}
social_distance : Elm.Expression
social_distance =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "social_distance"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| south_america: Material.Icons.Types.Icon msg -}
south_america : Elm.Expression
south_america =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "south_america"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports: Material.Icons.Types.Icon msg -}
sports : Elm.Expression
sports =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_baseball: Material.Icons.Types.Icon msg -}
sports_baseball : Elm.Expression
sports_baseball =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_baseball"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_basketball: Material.Icons.Types.Icon msg -}
sports_basketball : Elm.Expression
sports_basketball =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_basketball"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_cricket: Material.Icons.Types.Icon msg -}
sports_cricket : Elm.Expression
sports_cricket =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_cricket"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_esports: Material.Icons.Types.Icon msg -}
sports_esports : Elm.Expression
sports_esports =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_esports"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_football: Material.Icons.Types.Icon msg -}
sports_football : Elm.Expression
sports_football =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_football"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_golf: Material.Icons.Types.Icon msg -}
sports_golf : Elm.Expression
sports_golf =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_golf"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_gymnastics: Material.Icons.Types.Icon msg -}
sports_gymnastics : Elm.Expression
sports_gymnastics =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_gymnastics"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_handball: Material.Icons.Types.Icon msg -}
sports_handball : Elm.Expression
sports_handball =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_handball"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_hockey: Material.Icons.Types.Icon msg -}
sports_hockey : Elm.Expression
sports_hockey =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_hockey"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_kabaddi: Material.Icons.Types.Icon msg -}
sports_kabaddi : Elm.Expression
sports_kabaddi =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_kabaddi"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_martial_arts: Material.Icons.Types.Icon msg -}
sports_martial_arts : Elm.Expression
sports_martial_arts =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_martial_arts"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_mma: Material.Icons.Types.Icon msg -}
sports_mma : Elm.Expression
sports_mma =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_mma"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_motorsports: Material.Icons.Types.Icon msg -}
sports_motorsports : Elm.Expression
sports_motorsports =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_motorsports"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_rugby: Material.Icons.Types.Icon msg -}
sports_rugby : Elm.Expression
sports_rugby =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_rugby"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_soccer: Material.Icons.Types.Icon msg -}
sports_soccer : Elm.Expression
sports_soccer =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_soccer"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_tennis: Material.Icons.Types.Icon msg -}
sports_tennis : Elm.Expression
sports_tennis =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_tennis"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| sports_volleyball: Material.Icons.Types.Icon msg -}
sports_volleyball : Elm.Expression
sports_volleyball =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "sports_volleyball"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| surfing: Material.Icons.Types.Icon msg -}
surfing : Elm.Expression
surfing =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "surfing"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| switch_account: Material.Icons.Types.Icon msg -}
switch_account : Elm.Expression
switch_account =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "switch_account"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_down_alt: Material.Icons.Types.Icon msg -}
thumb_down_alt : Elm.Expression
thumb_down_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_down_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thumb_up_alt: Material.Icons.Types.Icon msg -}
thumb_up_alt : Elm.Expression
thumb_up_alt =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thumb_up_alt"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| thunderstorm: Material.Icons.Types.Icon msg -}
thunderstorm : Elm.Expression
thunderstorm =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "thunderstorm"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tornado: Material.Icons.Types.Icon msg -}
tornado : Elm.Expression
tornado =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tornado"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| transgender: Material.Icons.Types.Icon msg -}
transgender : Elm.Expression
transgender =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "transgender"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| travel_explore: Material.Icons.Types.Icon msg -}
travel_explore : Elm.Expression
travel_explore =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "travel_explore"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| tsunami: Material.Icons.Types.Icon msg -}
tsunami : Elm.Expression
tsunami =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "tsunami"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| vaccines: Material.Icons.Types.Icon msg -}
vaccines : Elm.Expression
vaccines =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "vaccines"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| volcano: Material.Icons.Types.Icon msg -}
volcano : Elm.Expression
volcano =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "volcano"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| wallet: Material.Icons.Types.Icon msg -}
wallet : Elm.Expression
wallet =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "wallet"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| water_drop: Material.Icons.Types.Icon msg -}
water_drop : Elm.Expression
water_drop =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "water_drop"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| waving_hand: Material.Icons.Types.Icon msg -}
waving_hand : Elm.Expression
waving_hand =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "waving_hand"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| whatshot: Material.Icons.Types.Icon msg -}
whatshot : Elm.Expression
whatshot =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "whatshot"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| woman: Material.Icons.Types.Icon msg -}
woman : Elm.Expression
woman =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "woman"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| woman_2: Material.Icons.Types.Icon msg -}
woman_2 : Elm.Expression
woman_2 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "woman_2"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| workspace_premium: Material.Icons.Types.Icon msg -}
workspace_premium : Elm.Expression
workspace_premium =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "workspace_premium"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| check_box: Material.Icons.Types.Icon msg -}
check_box : Elm.Expression
check_box =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "check_box"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| check_box_outline_blank: Material.Icons.Types.Icon msg -}
check_box_outline_blank : Elm.Expression
check_box_outline_blank =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "check_box_outline_blank"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| indeterminate_check_box: Material.Icons.Types.Icon msg -}
indeterminate_check_box : Elm.Expression
indeterminate_check_box =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "indeterminate_check_box"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| radio_button_checked: Material.Icons.Types.Icon msg -}
radio_button_checked : Elm.Expression
radio_button_checked =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "radio_button_checked"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| radio_button_unchecked: Material.Icons.Types.Icon msg -}
radio_button_unchecked : Elm.Expression
radio_button_unchecked =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "radio_button_unchecked"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star: Material.Icons.Types.Icon msg -}
star : Elm.Expression
star =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_border: Material.Icons.Types.Icon msg -}
star_border : Elm.Expression
star_border =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_border"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_border_purple500: Material.Icons.Types.Icon msg -}
star_border_purple500 : Elm.Expression
star_border_purple500 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_border_purple500"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_half: Material.Icons.Types.Icon msg -}
star_half : Elm.Expression
star_half =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_half"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_outline: Material.Icons.Types.Icon msg -}
star_outline : Elm.Expression
star_outline =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_outline"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| star_purple500: Material.Icons.Types.Icon msg -}
star_purple500 : Elm.Expression
star_purple500 =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "star_purple500"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| toggle_off: Material.Icons.Types.Icon msg -}
toggle_off : Elm.Expression
toggle_off =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "toggle_off"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


{-| toggle_on: Material.Icons.Types.Icon msg -}
toggle_on : Elm.Expression
toggle_on =
    Elm.value
        { importFrom = [ "Material", "Icons", "Outlined" ]
        , name = "toggle_on"
        , annotation =
            Just
                (Type.namedWith
                    [ "Material", "Icons", "Types" ]
                    "Icon"
                    [ Type.var "msg" ]
                )
        }


values_ :
    { one_two_three : Elm.Expression
    , three_d_rotation : Elm.Expression
    , abc : Elm.Expression
    , accessibility : Elm.Expression
    , accessibility_new : Elm.Expression
    , accessible : Elm.Expression
    , accessible_forward : Elm.Expression
    , account_balance : Elm.Expression
    , account_balance_wallet : Elm.Expression
    , account_box : Elm.Expression
    , account_circle : Elm.Expression
    , add_card : Elm.Expression
    , add_home : Elm.Expression
    , add_shopping_cart : Elm.Expression
    , add_task : Elm.Expression
    , add_to_drive : Elm.Expression
    , addchart : Elm.Expression
    , admin_panel_settings : Elm.Expression
    , ads_click : Elm.Expression
    , alarm : Elm.Expression
    , alarm_add : Elm.Expression
    , alarm_off : Elm.Expression
    , alarm_on : Elm.Expression
    , all_inbox : Elm.Expression
    , all_out : Elm.Expression
    , analytics : Elm.Expression
    , anchor : Elm.Expression
    , android : Elm.Expression
    , announcement : Elm.Expression
    , api : Elm.Expression
    , app_blocking : Elm.Expression
    , app_shortcut : Elm.Expression
    , arrow_circle_down : Elm.Expression
    , arrow_circle_left : Elm.Expression
    , arrow_circle_right : Elm.Expression
    , arrow_circle_up : Elm.Expression
    , arrow_outward : Elm.Expression
    , arrow_right_alt : Elm.Expression
    , article : Elm.Expression
    , aspect_ratio : Elm.Expression
    , assessment : Elm.Expression
    , assignment : Elm.Expression
    , assignment_ind : Elm.Expression
    , assignment_late : Elm.Expression
    , assignment_return : Elm.Expression
    , assignment_returned : Elm.Expression
    , assignment_turned_in : Elm.Expression
    , assured_workload : Elm.Expression
    , autorenew : Elm.Expression
    , backup : Elm.Expression
    , backup_table : Elm.Expression
    , balance : Elm.Expression
    , batch_prediction : Elm.Expression
    , book : Elm.Expression
    , book_online : Elm.Expression
    , bookmark : Elm.Expression
    , bookmark_add : Elm.Expression
    , bookmark_added : Elm.Expression
    , bookmark_border : Elm.Expression
    , bookmark_remove : Elm.Expression
    , bookmarks : Elm.Expression
    , browse_gallery : Elm.Expression
    , bug_report : Elm.Expression
    , build : Elm.Expression
    , build_circle : Elm.Expression
    , cached : Elm.Expression
    , calendar_month : Elm.Expression
    , calendar_today : Elm.Expression
    , calendar_view_day : Elm.Expression
    , calendar_view_month : Elm.Expression
    , calendar_view_week : Elm.Expression
    , camera_enhance : Elm.Expression
    , cancel_schedule_send : Elm.Expression
    , card_giftcard : Elm.Expression
    , card_membership : Elm.Expression
    , card_travel : Elm.Expression
    , change_history : Elm.Expression
    , check_circle : Elm.Expression
    , check_circle_outline : Elm.Expression
    , chrome_reader_mode : Elm.Expression
    , circle_notifications : Elm.Expression
    , class : Elm.Expression
    , close_fullscreen : Elm.Expression
    , code : Elm.Expression
    , code_off : Elm.Expression
    , comment_bank : Elm.Expression
    , commit : Elm.Expression
    , commute : Elm.Expression
    , compare_arrows : Elm.Expression
    , compress : Elm.Expression
    , contact_page : Elm.Expression
    , contact_support : Elm.Expression
    , contactless : Elm.Expression
    , copyright : Elm.Expression
    , credit_card : Elm.Expression
    , credit_card_off : Elm.Expression
    , css : Elm.Expression
    , currency_exchange : Elm.Expression
    , dangerous : Elm.Expression
    , dashboard : Elm.Expression
    , dashboard_customize : Elm.Expression
    , data_exploration : Elm.Expression
    , data_thresholding : Elm.Expression
    , date_range : Elm.Expression
    , delete : Elm.Expression
    , delete_forever : Elm.Expression
    , delete_outline : Elm.Expression
    , density_large : Elm.Expression
    , density_medium : Elm.Expression
    , density_small : Elm.Expression
    , description : Elm.Expression
    , disabled_by_default : Elm.Expression
    , disabled_visible : Elm.Expression
    , display_settings : Elm.Expression
    , dns : Elm.Expression
    , done : Elm.Expression
    , done_all : Elm.Expression
    , done_outline : Elm.Expression
    , donut_large : Elm.Expression
    , donut_small : Elm.Expression
    , drag_indicator : Elm.Expression
    , dynamic_form : Elm.Expression
    , edit_calendar : Elm.Expression
    , edit_off : Elm.Expression
    , eject : Elm.Expression
    , euro_symbol : Elm.Expression
    , event : Elm.Expression
    , event_repeat : Elm.Expression
    , event_seat : Elm.Expression
    , exit_to_app : Elm.Expression
    , expand : Elm.Expression
    , explore : Elm.Expression
    , explore_off : Elm.Expression
    , extension : Elm.Expression
    , extension_off : Elm.Expression
    , face : Elm.Expression
    , fact_check : Elm.Expression
    , favorite : Elm.Expression
    , favorite_border : Elm.Expression
    , fax : Elm.Expression
    , feedback : Elm.Expression
    , file_present : Elm.Expression
    , filter_alt : Elm.Expression
    , filter_alt_off : Elm.Expression
    , find_in_page : Elm.Expression
    , find_replace : Elm.Expression
    , fingerprint : Elm.Expression
    , fit_screen : Elm.Expression
    , flaky : Elm.Expression
    , flight_land : Elm.Expression
    , flight_takeoff : Elm.Expression
    , flip_to_back : Elm.Expression
    , flip_to_front : Elm.Expression
    , flutter_dash : Elm.Expression
    , free_cancellation : Elm.Expression
    , g_translate : Elm.Expression
    , gavel : Elm.Expression
    , generating_tokens : Elm.Expression
    , get_app : Elm.Expression
    , gif : Elm.Expression
    , gif_box : Elm.Expression
    , grade : Elm.Expression
    , grading : Elm.Expression
    , group_work : Elm.Expression
    , help : Elm.Expression
    , help_center : Elm.Expression
    , help_outline : Elm.Expression
    , hide_source : Elm.Expression
    , highlight_alt : Elm.Expression
    , highlight_off : Elm.Expression
    , history : Elm.Expression
    , history_toggle_off : Elm.Expression
    , hls : Elm.Expression
    , hls_off : Elm.Expression
    , home : Elm.Expression
    , horizontal_split : Elm.Expression
    , hotel_class : Elm.Expression
    , hourglass_disabled : Elm.Expression
    , hourglass_empty : Elm.Expression
    , hourglass_full : Elm.Expression
    , html : Elm.Expression
    , http : Elm.Expression
    , https : Elm.Expression
    , important_devices : Elm.Expression
    , info : Elm.Expression
    , input : Elm.Expression
    , install_desktop : Elm.Expression
    , install_mobile : Elm.Expression
    , integration_instructions : Elm.Expression
    , invert_colors : Elm.Expression
    , javascript : Elm.Expression
    , join_full : Elm.Expression
    , join_inner : Elm.Expression
    , join_left : Elm.Expression
    , join_right : Elm.Expression
    , label : Elm.Expression
    , label_important : Elm.Expression
    , label_off : Elm.Expression
    , language : Elm.Expression
    , launch : Elm.Expression
    , leaderboard : Elm.Expression
    , lightbulb : Elm.Expression
    , lightbulb_circle : Elm.Expression
    , line_style : Elm.Expression
    , line_weight : Elm.Expression
    , list : Elm.Expression
    , lock : Elm.Expression
    , lock_clock : Elm.Expression
    , lock_open : Elm.Expression
    , lock_person : Elm.Expression
    , lock_reset : Elm.Expression
    , login : Elm.Expression
    , logout : Elm.Expression
    , loyalty : Elm.Expression
    , manage_accounts : Elm.Expression
    , manage_history : Elm.Expression
    , mark_as_unread : Elm.Expression
    , markunread_mailbox : Elm.Expression
    , maximize : Elm.Expression
    , mediation : Elm.Expression
    , minimize : Elm.Expression
    , model_training : Elm.Expression
    , network_ping : Elm.Expression
    , new_label : Elm.Expression
    , next_plan : Elm.Expression
    , nightlight_round : Elm.Expression
    , no_accounts : Elm.Expression
    , noise_aware : Elm.Expression
    , noise_control_off : Elm.Expression
    , not_accessible : Elm.Expression
    , not_started : Elm.Expression
    , note_add : Elm.Expression
    , offline_bolt : Elm.Expression
    , offline_pin : Elm.Expression
    , on_device_training : Elm.Expression
    , online_prediction : Elm.Expression
    , opacity : Elm.Expression
    , open_in_browser : Elm.Expression
    , open_in_full : Elm.Expression
    , open_in_new : Elm.Expression
    , open_in_new_off : Elm.Expression
    , open_with : Elm.Expression
    , outbound : Elm.Expression
    , outbox : Elm.Expression
    , outlet : Elm.Expression
    , output : Elm.Expression
    , pageview : Elm.Expression
    , paid : Elm.Expression
    , pan_tool : Elm.Expression
    , pan_tool_alt : Elm.Expression
    , payment : Elm.Expression
    , pending : Elm.Expression
    , pending_actions : Elm.Expression
    , percent : Elm.Expression
    , perm_camera_mic : Elm.Expression
    , perm_contact_calendar : Elm.Expression
    , perm_data_setting : Elm.Expression
    , perm_device_information : Elm.Expression
    , perm_identity : Elm.Expression
    , perm_media : Elm.Expression
    , perm_phone_msg : Elm.Expression
    , perm_scan_wifi : Elm.Expression
    , pets : Elm.Expression
    , php : Elm.Expression
    , picture_in_picture : Elm.Expression
    , picture_in_picture_alt : Elm.Expression
    , pin_end : Elm.Expression
    , pin_invoke : Elm.Expression
    , pinch : Elm.Expression
    , plagiarism : Elm.Expression
    , play_for_work : Elm.Expression
    , polymer : Elm.Expression
    , power_settings_new : Elm.Expression
    , pregnant_woman : Elm.Expression
    , preview : Elm.Expression
    , print : Elm.Expression
    , privacy_tip : Elm.Expression
    , private_connectivity : Elm.Expression
    , production_quantity_limits : Elm.Expression
    , published_with_changes : Elm.Expression
    , query_builder : Elm.Expression
    , question_answer : Elm.Expression
    , question_mark : Elm.Expression
    , quickreply : Elm.Expression
    , receipt : Elm.Expression
    , record_voice_over : Elm.Expression
    , redeem : Elm.Expression
    , remove_done : Elm.Expression
    , remove_shopping_cart : Elm.Expression
    , reorder : Elm.Expression
    , repartition : Elm.Expression
    , report_problem : Elm.Expression
    , request_page : Elm.Expression
    , restore : Elm.Expression
    , restore_from_trash : Elm.Expression
    , restore_page : Elm.Expression
    , rocket : Elm.Expression
    , rocket_launch : Elm.Expression
    , room : Elm.Expression
    , rounded_corner : Elm.Expression
    , rowing : Elm.Expression
    , rule : Elm.Expression
    , satellite_alt : Elm.Expression
    , saved_search : Elm.Expression
    , savings : Elm.Expression
    , schedule : Elm.Expression
    , schedule_send : Elm.Expression
    , search : Elm.Expression
    , search_off : Elm.Expression
    , segment : Elm.Expression
    , send_and_archive : Elm.Expression
    , sensors : Elm.Expression
    , sensors_off : Elm.Expression
    , settings : Elm.Expression
    , settings_accessibility : Elm.Expression
    , settings_applications : Elm.Expression
    , settings_backup_restore : Elm.Expression
    , settings_bluetooth : Elm.Expression
    , settings_brightness : Elm.Expression
    , settings_cell : Elm.Expression
    , settings_ethernet : Elm.Expression
    , settings_input_antenna : Elm.Expression
    , settings_input_component : Elm.Expression
    , settings_input_composite : Elm.Expression
    , settings_input_hdmi : Elm.Expression
    , settings_input_svideo : Elm.Expression
    , settings_overscan : Elm.Expression
    , settings_phone : Elm.Expression
    , settings_power : Elm.Expression
    , settings_remote : Elm.Expression
    , settings_voice : Elm.Expression
    , shop : Elm.Expression
    , shop_2 : Elm.Expression
    , shop_two : Elm.Expression
    , shopping_bag : Elm.Expression
    , shopping_basket : Elm.Expression
    , shopping_cart : Elm.Expression
    , shopping_cart_checkout : Elm.Expression
    , smart_button : Elm.Expression
    , source : Elm.Expression
    , space_dashboard : Elm.Expression
    , spatial_audio : Elm.Expression
    , spatial_audio_off : Elm.Expression
    , spatial_tracking : Elm.Expression
    , speaker_notes : Elm.Expression
    , speaker_notes_off : Elm.Expression
    , spellcheck : Elm.Expression
    , star_rate : Elm.Expression
    , stars : Elm.Expression
    , sticky_note_2 : Elm.Expression
    , store : Elm.Expression
    , subject : Elm.Expression
    , subtitles_off : Elm.Expression
    , supervised_user_circle : Elm.Expression
    , supervisor_account : Elm.Expression
    , support : Elm.Expression
    , swap_horiz : Elm.Expression
    , swap_horizontal_circle : Elm.Expression
    , swap_vert : Elm.Expression
    , swap_vertical_circle : Elm.Expression
    , swipe : Elm.Expression
    , swipe_down : Elm.Expression
    , swipe_down_alt : Elm.Expression
    , swipe_left : Elm.Expression
    , swipe_left_alt : Elm.Expression
    , swipe_right : Elm.Expression
    , swipe_right_alt : Elm.Expression
    , swipe_up : Elm.Expression
    , swipe_up_alt : Elm.Expression
    , swipe_vertical : Elm.Expression
    , switch_access_shortcut : Elm.Expression
    , switch_access_shortcut_add : Elm.Expression
    , sync_alt : Elm.Expression
    , system_update_alt : Elm.Expression
    , tab : Elm.Expression
    , tab_unselected : Elm.Expression
    , table_view : Elm.Expression
    , task_alt : Elm.Expression
    , terminal : Elm.Expression
    , text_rotate_up : Elm.Expression
    , text_rotate_vertical : Elm.Expression
    , text_rotation_angledown : Elm.Expression
    , text_rotation_angleup : Elm.Expression
    , text_rotation_down : Elm.Expression
    , text_rotation_none : Elm.Expression
    , theaters : Elm.Expression
    , thumb_down : Elm.Expression
    , thumb_down_off_alt : Elm.Expression
    , thumb_up : Elm.Expression
    , thumb_up_off_alt : Elm.Expression
    , thumbs_up_down : Elm.Expression
    , timeline : Elm.Expression
    , tips_and_updates : Elm.Expression
    , toc : Elm.Expression
    , today : Elm.Expression
    , token : Elm.Expression
    , toll : Elm.Expression
    , touch_app : Elm.Expression
    , tour : Elm.Expression
    , track_changes : Elm.Expression
    , transcribe : Elm.Expression
    , translate : Elm.Expression
    , trending_down : Elm.Expression
    , trending_flat : Elm.Expression
    , trending_up : Elm.Expression
    , troubleshoot : Elm.Expression
    , try : Elm.Expression
    , turned_in : Elm.Expression
    , turned_in_not : Elm.Expression
    , unfold_less_double : Elm.Expression
    , unfold_more_double : Elm.Expression
    , unpublished : Elm.Expression
    , update : Elm.Expression
    , update_disabled : Elm.Expression
    , upgrade : Elm.Expression
    , verified : Elm.Expression
    , verified_user : Elm.Expression
    , vertical_split : Elm.Expression
    , view_agenda : Elm.Expression
    , view_array : Elm.Expression
    , view_carousel : Elm.Expression
    , view_column : Elm.Expression
    , view_comfy_alt : Elm.Expression
    , view_compact_alt : Elm.Expression
    , view_cozy : Elm.Expression
    , view_day : Elm.Expression
    , view_headline : Elm.Expression
    , view_in_ar : Elm.Expression
    , view_kanban : Elm.Expression
    , view_list : Elm.Expression
    , view_module : Elm.Expression
    , view_quilt : Elm.Expression
    , view_sidebar : Elm.Expression
    , view_stream : Elm.Expression
    , view_timeline : Elm.Expression
    , view_week : Elm.Expression
    , visibility : Elm.Expression
    , visibility_off : Elm.Expression
    , voice_over_off : Elm.Expression
    , watch_later : Elm.Expression
    , webhook : Elm.Expression
    , width_full : Elm.Expression
    , width_normal : Elm.Expression
    , width_wide : Elm.Expression
    , wifi_protected_setup : Elm.Expression
    , work : Elm.Expression
    , work_history : Elm.Expression
    , work_off : Elm.Expression
    , work_outline : Elm.Expression
    , wysiwyg : Elm.Expression
    , youtube_searched_for : Elm.Expression
    , zoom_in : Elm.Expression
    , zoom_out : Elm.Expression
    , add_alert : Elm.Expression
    , auto_delete : Elm.Expression
    , error : Elm.Expression
    , error_outline : Elm.Expression
    , notification_important : Elm.Expression
    , warning : Elm.Expression
    , warning_amber : Elm.Expression
    , ten_k : Elm.Expression
    , one_k : Elm.Expression
    , one_k_plus : Elm.Expression
    , two_k : Elm.Expression
    , two_k_plus : Elm.Expression
    , three_k : Elm.Expression
    , three_k_plus : Elm.Expression
    , four_k : Elm.Expression
    , four_k_plus : Elm.Expression
    , five_g : Elm.Expression
    , five_k : Elm.Expression
    , five_k_plus : Elm.Expression
    , six_k : Elm.Expression
    , six_k_plus : Elm.Expression
    , seven_k : Elm.Expression
    , seven_k_plus : Elm.Expression
    , eight_k : Elm.Expression
    , eight_k_plus : Elm.Expression
    , nine_k : Elm.Expression
    , nine_k_plus : Elm.Expression
    , add_to_queue : Elm.Expression
    , airplay : Elm.Expression
    , album : Elm.Expression
    , art_track : Elm.Expression
    , audio_file : Elm.Expression
    , av_timer : Elm.Expression
    , branding_watermark : Elm.Expression
    , call_to_action : Elm.Expression
    , closed_caption : Elm.Expression
    , closed_caption_disabled : Elm.Expression
    , closed_caption_off : Elm.Expression
    , control_camera : Elm.Expression
    , equalizer : Elm.Expression
    , explicit : Elm.Expression
    , fast_forward : Elm.Expression
    , fast_rewind : Elm.Expression
    , featured_play_list : Elm.Expression
    , featured_video : Elm.Expression
    , fiber_dvr : Elm.Expression
    , fiber_manual_record : Elm.Expression
    , fiber_new : Elm.Expression
    , fiber_pin : Elm.Expression
    , fiber_smart_record : Elm.Expression
    , forward_10 : Elm.Expression
    , forward_30 : Elm.Expression
    , forward_5 : Elm.Expression
    , games : Elm.Expression
    , hd : Elm.Expression
    , hearing : Elm.Expression
    , hearing_disabled : Elm.Expression
    , high_quality : Elm.Expression
    , interpreter_mode : Elm.Expression
    , library_add : Elm.Expression
    , library_add_check : Elm.Expression
    , library_books : Elm.Expression
    , library_music : Elm.Expression
    , loop : Elm.Expression
    , lyrics : Elm.Expression
    , mic : Elm.Expression
    , mic_none : Elm.Expression
    , mic_off : Elm.Expression
    , missed_video_call : Elm.Expression
    , movie : Elm.Expression
    , music_video : Elm.Expression
    , new_releases : Elm.Expression
    , not_interested : Elm.Expression
    , note : Elm.Expression
    , pause : Elm.Expression
    , pause_circle : Elm.Expression
    , pause_circle_filled : Elm.Expression
    , pause_circle_outline : Elm.Expression
    , play_arrow : Elm.Expression
    , play_circle : Elm.Expression
    , play_circle_filled : Elm.Expression
    , play_circle_outline : Elm.Expression
    , play_disabled : Elm.Expression
    , playlist_add : Elm.Expression
    , playlist_add_check : Elm.Expression
    , playlist_add_check_circle : Elm.Expression
    , playlist_add_circle : Elm.Expression
    , playlist_play : Elm.Expression
    , playlist_remove : Elm.Expression
    , queue : Elm.Expression
    , queue_music : Elm.Expression
    , queue_play_next : Elm.Expression
    , radio : Elm.Expression
    , recent_actors : Elm.Expression
    , remove_from_queue : Elm.Expression
    , repeat : Elm.Expression
    , repeat_on : Elm.Expression
    , repeat_one : Elm.Expression
    , repeat_one_on : Elm.Expression
    , replay : Elm.Expression
    , replay_10 : Elm.Expression
    , replay_30 : Elm.Expression
    , replay_5 : Elm.Expression
    , replay_circle_filled : Elm.Expression
    , sd : Elm.Expression
    , shuffle : Elm.Expression
    , shuffle_on : Elm.Expression
    , skip_next : Elm.Expression
    , skip_previous : Elm.Expression
    , slow_motion_video : Elm.Expression
    , snooze : Elm.Expression
    , sort_by_alpha : Elm.Expression
    , speed : Elm.Expression
    , stop : Elm.Expression
    , stop_circle : Elm.Expression
    , subscriptions : Elm.Expression
    , subtitles : Elm.Expression
    , surround_sound : Elm.Expression
    , video_call : Elm.Expression
    , video_file : Elm.Expression
    , video_label : Elm.Expression
    , video_library : Elm.Expression
    , video_settings : Elm.Expression
    , videocam : Elm.Expression
    , videocam_off : Elm.Expression
    , volume_down : Elm.Expression
    , volume_mute : Elm.Expression
    , volume_off : Elm.Expression
    , volume_up : Elm.Expression
    , web : Elm.Expression
    , web_asset : Elm.Expression
    , web_asset_off : Elm.Expression
    , three_p : Elm.Expression
    , add_ic_call : Elm.Expression
    , alternate_email : Elm.Expression
    , app_registration : Elm.Expression
    , business : Elm.Expression
    , call : Elm.Expression
    , call_end : Elm.Expression
    , call_made : Elm.Expression
    , call_merge : Elm.Expression
    , call_missed : Elm.Expression
    , call_missed_outgoing : Elm.Expression
    , call_received : Elm.Expression
    , call_split : Elm.Expression
    , cancel_presentation : Elm.Expression
    , cell_tower : Elm.Expression
    , cell_wifi : Elm.Expression
    , chat : Elm.Expression
    , chat_bubble : Elm.Expression
    , chat_bubble_outline : Elm.Expression
    , clear_all : Elm.Expression
    , co_present : Elm.Expression
    , comment : Elm.Expression
    , comments_disabled : Elm.Expression
    , contact_emergency : Elm.Expression
    , contact_mail : Elm.Expression
    , contact_phone : Elm.Expression
    , contacts : Elm.Expression
    , desktop_access_disabled : Elm.Expression
    , dialer_sip : Elm.Expression
    , dialpad : Elm.Expression
    , document_scanner : Elm.Expression
    , domain_disabled : Elm.Expression
    , domain_verification : Elm.Expression
    , duo : Elm.Expression
    , email : Elm.Expression
    , forum : Elm.Expression
    , forward_to_inbox : Elm.Expression
    , hourglass_bottom : Elm.Expression
    , hourglass_top : Elm.Expression
    , hub : Elm.Expression
    , import_contacts : Elm.Expression
    , import_export : Elm.Expression
    , invert_colors_off : Elm.Expression
    , key : Elm.Expression
    , key_off : Elm.Expression
    , list_alt : Elm.Expression
    , live_help : Elm.Expression
    , location_off : Elm.Expression
    , location_on : Elm.Expression
    , mail_lock : Elm.Expression
    , mail_outline : Elm.Expression
    , mark_chat_read : Elm.Expression
    , mark_chat_unread : Elm.Expression
    , mark_email_read : Elm.Expression
    , mark_email_unread : Elm.Expression
    , mark_unread_chat_alt : Elm.Expression
    , message : Elm.Expression
    , mobile_screen_share : Elm.Expression
    , more_time : Elm.Expression
    , nat : Elm.Expression
    , no_sim : Elm.Expression
    , pause_presentation : Elm.Expression
    , person_add_disabled : Elm.Expression
    , person_search : Elm.Expression
    , phone : Elm.Expression
    , phone_disabled : Elm.Expression
    , phone_enabled : Elm.Expression
    , phonelink_erase : Elm.Expression
    , phonelink_lock : Elm.Expression
    , phonelink_ring : Elm.Expression
    , phonelink_setup : Elm.Expression
    , portable_wifi_off : Elm.Expression
    , present_to_all : Elm.Expression
    , print_disabled : Elm.Expression
    , qr_code : Elm.Expression
    , qr_code_2 : Elm.Expression
    , qr_code_scanner : Elm.Expression
    , read_more : Elm.Expression
    , ring_volume : Elm.Expression
    , rss_feed : Elm.Expression
    , rtt : Elm.Expression
    , screen_share : Elm.Expression
    , send_time_extension : Elm.Expression
    , sentiment_satisfied_alt : Elm.Expression
    , sip : Elm.Expression
    , speaker_phone : Elm.Expression
    , spoke : Elm.Expression
    , stay_current_landscape : Elm.Expression
    , stay_current_portrait : Elm.Expression
    , stay_primary_landscape : Elm.Expression
    , stay_primary_portrait : Elm.Expression
    , stop_screen_share : Elm.Expression
    , swap_calls : Elm.Expression
    , textsms : Elm.Expression
    , unsubscribe : Elm.Expression
    , voicemail : Elm.Expression
    , vpn_key : Elm.Expression
    , vpn_key_off : Elm.Expression
    , wifi_calling : Elm.Expression
    , add : Elm.Expression
    , add_box : Elm.Expression
    , add_circle : Elm.Expression
    , add_circle_outline : Elm.Expression
    , add_link : Elm.Expression
    , archive : Elm.Expression
    , attribution : Elm.Expression
    , backspace : Elm.Expression
    , ballot : Elm.Expression
    , biotech : Elm.Expression
    , block : Elm.Expression
    , bolt : Elm.Expression
    , calculate : Elm.Expression
    , change_circle : Elm.Expression
    , clear : Elm.Expression
    , content_copy : Elm.Expression
    , content_cut : Elm.Expression
    , content_paste : Elm.Expression
    , content_paste_go : Elm.Expression
    , content_paste_off : Elm.Expression
    , content_paste_search : Elm.Expression
    , copy_all : Elm.Expression
    , create : Elm.Expression
    , delete_sweep : Elm.Expression
    , deselect : Elm.Expression
    , drafts : Elm.Expression
    , dynamic_feed : Elm.Expression
    , file_copy : Elm.Expression
    , filter_list : Elm.Expression
    , filter_list_off : Elm.Expression
    , flag : Elm.Expression
    , flag_circle : Elm.Expression
    , font_download : Elm.Expression
    , font_download_off : Elm.Expression
    , forward : Elm.Expression
    , gesture : Elm.Expression
    , how_to_reg : Elm.Expression
    , how_to_vote : Elm.Expression
    , inbox : Elm.Expression
    , insights : Elm.Expression
    , inventory : Elm.Expression
    , inventory_2 : Elm.Expression
    , link : Elm.Expression
    , link_off : Elm.Expression
    , low_priority : Elm.Expression
    , mail : Elm.Expression
    , markunread : Elm.Expression
    , move_to_inbox : Elm.Expression
    , next_week : Elm.Expression
    , outlined_flag : Elm.Expression
    , policy : Elm.Expression
    , push_pin : Elm.Expression
    , redo : Elm.Expression
    , remove : Elm.Expression
    , remove_circle : Elm.Expression
    , remove_circle_outline : Elm.Expression
    , reply : Elm.Expression
    , reply_all : Elm.Expression
    , report : Elm.Expression
    , report_gmailerrorred : Elm.Expression
    , report_off : Elm.Expression
    , save : Elm.Expression
    , save_alt : Elm.Expression
    , save_as : Elm.Expression
    , select_all : Elm.Expression
    , send : Elm.Expression
    , shield : Elm.Expression
    , sort : Elm.Expression
    , square_foot : Elm.Expression
    , stacked_bar_chart : Elm.Expression
    , stream : Elm.Expression
    , tag : Elm.Expression
    , text_format : Elm.Expression
    , unarchive : Elm.Expression
    , undo : Elm.Expression
    , upcoming : Elm.Expression
    , waves : Elm.Expression
    , web_stories : Elm.Expression
    , weekend : Elm.Expression
    , where_to_vote : Elm.Expression
    , one_x_mobiledata : Elm.Expression
    , thirty_fps : Elm.Expression
    , three_g_mobiledata : Elm.Expression
    , four_g_mobiledata : Elm.Expression
    , four_g_plus_mobiledata : Elm.Expression
    , sixty_fps : Elm.Expression
    , access_alarm : Elm.Expression
    , access_alarms : Elm.Expression
    , access_time : Elm.Expression
    , access_time_filled : Elm.Expression
    , ad_units : Elm.Expression
    , add_alarm : Elm.Expression
    , add_to_home_screen : Elm.Expression
    , air : Elm.Expression
    , airplane_ticket : Elm.Expression
    , airplanemode_active : Elm.Expression
    , airplanemode_inactive : Elm.Expression
    , aod : Elm.Expression
    , battery_0_bar : Elm.Expression
    , battery_1_bar : Elm.Expression
    , battery_2_bar : Elm.Expression
    , battery_3_bar : Elm.Expression
    , battery_4_bar : Elm.Expression
    , battery_5_bar : Elm.Expression
    , battery_6_bar : Elm.Expression
    , battery_alert : Elm.Expression
    , battery_charging_full : Elm.Expression
    , battery_full : Elm.Expression
    , battery_saver : Elm.Expression
    , battery_std : Elm.Expression
    , battery_unknown : Elm.Expression
    , bloodtype : Elm.Expression
    , bluetooth : Elm.Expression
    , bluetooth_connected : Elm.Expression
    , bluetooth_disabled : Elm.Expression
    , bluetooth_drive : Elm.Expression
    , bluetooth_searching : Elm.Expression
    , brightness_auto : Elm.Expression
    , brightness_high : Elm.Expression
    , brightness_low : Elm.Expression
    , brightness_medium : Elm.Expression
    , cable : Elm.Expression
    , cameraswitch : Elm.Expression
    , credit_score : Elm.Expression
    , dark_mode : Elm.Expression
    , data_saver_off : Elm.Expression
    , data_saver_on : Elm.Expression
    , data_usage : Elm.Expression
    , dataset : Elm.Expression
    , dataset_linked : Elm.Expression
    , developer_mode : Elm.Expression
    , device_thermostat : Elm.Expression
    , devices : Elm.Expression
    , devices_fold : Elm.Expression
    , discount : Elm.Expression
    , do_not_disturb_on_total_silence : Elm.Expression
    , dvr : Elm.Expression
    , e_mobiledata : Elm.Expression
    , edgesensor_high : Elm.Expression
    , edgesensor_low : Elm.Expression
    , flashlight_off : Elm.Expression
    , flashlight_on : Elm.Expression
    , fluorescent : Elm.Expression
    , fmd_bad : Elm.Expression
    , fmd_good : Elm.Expression
    , g_mobiledata : Elm.Expression
    , gpp_bad : Elm.Expression
    , gpp_good : Elm.Expression
    , gpp_maybe : Elm.Expression
    , gps_fixed : Elm.Expression
    , gps_not_fixed : Elm.Expression
    , gps_off : Elm.Expression
    , graphic_eq : Elm.Expression
    , grid_3x3 : Elm.Expression
    , grid_4x4 : Elm.Expression
    , grid_goldenratio : Elm.Expression
    , h_mobiledata : Elm.Expression
    , h_plus_mobiledata : Elm.Expression
    , hdr_auto : Elm.Expression
    , hdr_auto_select : Elm.Expression
    , hdr_off_select : Elm.Expression
    , hdr_on_select : Elm.Expression
    , lan : Elm.Expression
    , lens_blur : Elm.Expression
    , light_mode : Elm.Expression
    , location_disabled : Elm.Expression
    , location_searching : Elm.Expression
    , lte_mobiledata : Elm.Expression
    , lte_plus_mobiledata : Elm.Expression
    , macro_off : Elm.Expression
    , media_bluetooth_off : Elm.Expression
    , media_bluetooth_on : Elm.Expression
    , medication : Elm.Expression
    , medication_liquid : Elm.Expression
    , mobile_friendly : Elm.Expression
    , mobile_off : Elm.Expression
    , mobiledata_off : Elm.Expression
    , mode_night : Elm.Expression
    , mode_standby : Elm.Expression
    , monitor_heart : Elm.Expression
    , monitor_weight : Elm.Expression
    , nearby_error : Elm.Expression
    , nearby_off : Elm.Expression
    , network_cell : Elm.Expression
    , network_wifi : Elm.Expression
    , network_wifi_1_bar : Elm.Expression
    , network_wifi_2_bar : Elm.Expression
    , network_wifi_3_bar : Elm.Expression
    , nfc : Elm.Expression
    , nightlight : Elm.Expression
    , note_alt : Elm.Expression
    , password : Elm.Expression
    , pattern : Elm.Expression
    , phishing : Elm.Expression
    , pin : Elm.Expression
    , play_lesson : Elm.Expression
    , price_change : Elm.Expression
    , price_check : Elm.Expression
    , punch_clock : Elm.Expression
    , quiz : Elm.Expression
    , r_mobiledata : Elm.Expression
    , radar : Elm.Expression
    , remember_me : Elm.Expression
    , reset_tv : Elm.Expression
    , restart_alt : Elm.Expression
    , reviews : Elm.Expression
    , rsvp : Elm.Expression
    , screen_lock_landscape : Elm.Expression
    , screen_lock_portrait : Elm.Expression
    , screen_lock_rotation : Elm.Expression
    , screen_rotation : Elm.Expression
    , screen_search_desktop : Elm.Expression
    , screenshot : Elm.Expression
    , screenshot_monitor : Elm.Expression
    , sd_storage : Elm.Expression
    , security_update : Elm.Expression
    , security_update_good : Elm.Expression
    , security_update_warning : Elm.Expression
    , sell : Elm.Expression
    , send_to_mobile : Elm.Expression
    , settings_suggest : Elm.Expression
    , settings_system_daydream : Elm.Expression
    , share_location : Elm.Expression
    , shortcut : Elm.Expression
    , signal_cellular_0_bar : Elm.Expression
    , signal_cellular_4_bar : Elm.Expression
    , signal_cellular_alt : Elm.Expression
    , signal_cellular_alt_1_bar : Elm.Expression
    , signal_cellular_alt_2_bar : Elm.Expression
    , signal_cellular_connected_no_internet_0_bar : Elm.Expression
    , signal_cellular_connected_no_internet_4_bar : Elm.Expression
    , signal_cellular_no_sim : Elm.Expression
    , signal_cellular_nodata : Elm.Expression
    , signal_cellular_null : Elm.Expression
    , signal_cellular_off : Elm.Expression
    , signal_wifi_0_bar : Elm.Expression
    , signal_wifi_4_bar : Elm.Expression
    , signal_wifi_4_bar_lock : Elm.Expression
    , signal_wifi_bad : Elm.Expression
    , signal_wifi_connected_no_internet_4 : Elm.Expression
    , signal_wifi_off : Elm.Expression
    , signal_wifi_statusbar_4_bar : Elm.Expression
    , signal_wifi_statusbar_connected_no_internet_4 : Elm.Expression
    , signal_wifi_statusbar_null : Elm.Expression
    , sim_card_download : Elm.Expression
    , splitscreen : Elm.Expression
    , sports_score : Elm.Expression
    , ssid_chart : Elm.Expression
    , storage : Elm.Expression
    , storm : Elm.Expression
    , summarize : Elm.Expression
    , system_security_update : Elm.Expression
    , system_security_update_good : Elm.Expression
    , system_security_update_warning : Elm.Expression
    , task : Elm.Expression
    , thermostat : Elm.Expression
    , timer_10_select : Elm.Expression
    , timer_3_select : Elm.Expression
    , tungsten : Elm.Expression
    , usb : Elm.Expression
    , usb_off : Elm.Expression
    , wallpaper : Elm.Expression
    , water : Elm.Expression
    , widgets : Elm.Expression
    , wifi_1_bar : Elm.Expression
    , wifi_2_bar : Elm.Expression
    , wifi_calling_3 : Elm.Expression
    , wifi_channel : Elm.Expression
    , wifi_find : Elm.Expression
    , wifi_lock : Elm.Expression
    , wifi_password : Elm.Expression
    , wifi_tethering : Elm.Expression
    , wifi_tethering_error : Elm.Expression
    , wifi_tethering_off : Elm.Expression
    , add_chart : Elm.Expression
    , add_comment : Elm.Expression
    , align_horizontal_center : Elm.Expression
    , align_horizontal_left : Elm.Expression
    , align_horizontal_right : Elm.Expression
    , align_vertical_bottom : Elm.Expression
    , align_vertical_center : Elm.Expression
    , align_vertical_top : Elm.Expression
    , area_chart : Elm.Expression
    , attach_file : Elm.Expression
    , attach_money : Elm.Expression
    , auto_graph : Elm.Expression
    , bar_chart : Elm.Expression
    , border_all : Elm.Expression
    , border_bottom : Elm.Expression
    , border_clear : Elm.Expression
    , border_color : Elm.Expression
    , border_horizontal : Elm.Expression
    , border_inner : Elm.Expression
    , border_left : Elm.Expression
    , border_outer : Elm.Expression
    , border_right : Elm.Expression
    , border_style : Elm.Expression
    , border_top : Elm.Expression
    , border_vertical : Elm.Expression
    , bubble_chart : Elm.Expression
    , candlestick_chart : Elm.Expression
    , checklist : Elm.Expression
    , checklist_rtl : Elm.Expression
    , data_array : Elm.Expression
    , data_object : Elm.Expression
    , drag_handle : Elm.Expression
    , draw : Elm.Expression
    , edit_note : Elm.Expression
    , format_align_center : Elm.Expression
    , format_align_justify : Elm.Expression
    , format_align_left : Elm.Expression
    , format_align_right : Elm.Expression
    , format_bold : Elm.Expression
    , format_clear : Elm.Expression
    , format_color_fill : Elm.Expression
    , format_color_reset : Elm.Expression
    , format_color_text : Elm.Expression
    , format_indent_decrease : Elm.Expression
    , format_indent_increase : Elm.Expression
    , format_italic : Elm.Expression
    , format_line_spacing : Elm.Expression
    , format_list_bulleted : Elm.Expression
    , format_list_numbered : Elm.Expression
    , format_list_numbered_rtl : Elm.Expression
    , format_paint : Elm.Expression
    , format_quote : Elm.Expression
    , format_shapes : Elm.Expression
    , format_size : Elm.Expression
    , format_strikethrough : Elm.Expression
    , format_textdirection_l_to_r : Elm.Expression
    , format_textdirection_r_to_l : Elm.Expression
    , format_underlined : Elm.Expression
    , functions : Elm.Expression
    , height : Elm.Expression
    , hexagon : Elm.Expression
    , highlight : Elm.Expression
    , horizontal_distribute : Elm.Expression
    , horizontal_rule : Elm.Expression
    , insert_chart : Elm.Expression
    , insert_chart_outlined : Elm.Expression
    , insert_comment : Elm.Expression
    , insert_drive_file : Elm.Expression
    , insert_emoticon : Elm.Expression
    , insert_invitation : Elm.Expression
    , insert_link : Elm.Expression
    , insert_page_break : Elm.Expression
    , insert_photo : Elm.Expression
    , line_axis : Elm.Expression
    , linear_scale : Elm.Expression
    , margin : Elm.Expression
    , merge_type : Elm.Expression
    , mode : Elm.Expression
    , mode_comment : Elm.Expression
    , mode_edit : Elm.Expression
    , mode_edit_outline : Elm.Expression
    , monetization_on : Elm.Expression
    , money_off : Elm.Expression
    , money_off_csred : Elm.Expression
    , move_down : Elm.Expression
    , move_up : Elm.Expression
    , multiline_chart : Elm.Expression
    , notes : Elm.Expression
    , numbers : Elm.Expression
    , padding : Elm.Expression
    , pentagon : Elm.Expression
    , pie_chart : Elm.Expression
    , pie_chart_outline : Elm.Expression
    , polyline : Elm.Expression
    , post_add : Elm.Expression
    , publish : Elm.Expression
    , query_stats : Elm.Expression
    , rectangle : Elm.Expression
    , scatter_plot : Elm.Expression
    , schema : Elm.Expression
    , score : Elm.Expression
    , shape_line : Elm.Expression
    , short_text : Elm.Expression
    , show_chart : Elm.Expression
    , space_bar : Elm.Expression
    , square : Elm.Expression
    , stacked_line_chart : Elm.Expression
    , strikethrough_s : Elm.Expression
    , subscript : Elm.Expression
    , superscript : Elm.Expression
    , table_chart : Elm.Expression
    , table_rows : Elm.Expression
    , text_decrease : Elm.Expression
    , text_fields : Elm.Expression
    , text_increase : Elm.Expression
    , title : Elm.Expression
    , type_specimen : Elm.Expression
    , vertical_align_bottom : Elm.Expression
    , vertical_align_center : Elm.Expression
    , vertical_align_top : Elm.Expression
    , vertical_distribute : Elm.Expression
    , wrap_text : Elm.Expression
    , approval : Elm.Expression
    , attach_email : Elm.Expression
    , attachment : Elm.Expression
    , cloud : Elm.Expression
    , cloud_circle : Elm.Expression
    , cloud_done : Elm.Expression
    , cloud_download : Elm.Expression
    , cloud_off : Elm.Expression
    , cloud_queue : Elm.Expression
    , cloud_sync : Elm.Expression
    , cloud_upload : Elm.Expression
    , create_new_folder : Elm.Expression
    , difference : Elm.Expression
    , download : Elm.Expression
    , download_done : Elm.Expression
    , download_for_offline : Elm.Expression
    , downloading : Elm.Expression
    , drive_file_move : Elm.Expression
    , drive_file_move_rtl : Elm.Expression
    , drive_file_rename_outline : Elm.Expression
    , drive_folder_upload : Elm.Expression
    , file_download : Elm.Expression
    , file_download_done : Elm.Expression
    , file_download_off : Elm.Expression
    , file_open : Elm.Expression
    , file_upload : Elm.Expression
    , folder : Elm.Expression
    , folder_copy : Elm.Expression
    , folder_delete : Elm.Expression
    , folder_off : Elm.Expression
    , folder_open : Elm.Expression
    , folder_shared : Elm.Expression
    , folder_zip : Elm.Expression
    , format_overline : Elm.Expression
    , grid_view : Elm.Expression
    , newspaper : Elm.Expression
    , request_quote : Elm.Expression
    , rule_folder : Elm.Expression
    , snippet_folder : Elm.Expression
    , text_snippet : Elm.Expression
    , topic : Elm.Expression
    , upload : Elm.Expression
    , upload_file : Elm.Expression
    , workspaces : Elm.Expression
    , adf_scanner : Elm.Expression
    , browser_not_supported : Elm.Expression
    , browser_updated : Elm.Expression
    , cast : Elm.Expression
    , cast_connected : Elm.Expression
    , cast_for_education : Elm.Expression
    , computer : Elm.Expression
    , connected_tv : Elm.Expression
    , desktop_mac : Elm.Expression
    , desktop_windows : Elm.Expression
    , developer_board : Elm.Expression
    , developer_board_off : Elm.Expression
    , device_hub : Elm.Expression
    , device_unknown : Elm.Expression
    , devices_other : Elm.Expression
    , dock : Elm.Expression
    , earbuds : Elm.Expression
    , earbuds_battery : Elm.Expression
    , gamepad : Elm.Expression
    , headphones : Elm.Expression
    , headphones_battery : Elm.Expression
    , headset : Elm.Expression
    , headset_mic : Elm.Expression
    , headset_off : Elm.Expression
    , home_max : Elm.Expression
    , home_mini : Elm.Expression
    , keyboard : Elm.Expression
    , keyboard_alt : Elm.Expression
    , keyboard_arrow_down : Elm.Expression
    , keyboard_arrow_left : Elm.Expression
    , keyboard_arrow_right : Elm.Expression
    , keyboard_arrow_up : Elm.Expression
    , keyboard_backspace : Elm.Expression
    , keyboard_capslock : Elm.Expression
    , keyboard_command_key : Elm.Expression
    , keyboard_control_key : Elm.Expression
    , keyboard_double_arrow_down : Elm.Expression
    , keyboard_double_arrow_left : Elm.Expression
    , keyboard_double_arrow_right : Elm.Expression
    , keyboard_double_arrow_up : Elm.Expression
    , keyboard_hide : Elm.Expression
    , keyboard_option_key : Elm.Expression
    , keyboard_return : Elm.Expression
    , keyboard_tab : Elm.Expression
    , keyboard_voice : Elm.Expression
    , laptop : Elm.Expression
    , laptop_chromebook : Elm.Expression
    , laptop_mac : Elm.Expression
    , laptop_windows : Elm.Expression
    , memory : Elm.Expression
    , monitor : Elm.Expression
    , mouse : Elm.Expression
    , phone_android : Elm.Expression
    , phone_iphone : Elm.Expression
    , phonelink : Elm.Expression
    , phonelink_off : Elm.Expression
    , point_of_sale : Elm.Expression
    , power_input : Elm.Expression
    , router : Elm.Expression
    , scanner : Elm.Expression
    , security : Elm.Expression
    , sim_card : Elm.Expression
    , smart_display : Elm.Expression
    , smart_screen : Elm.Expression
    , smart_toy : Elm.Expression
    , smartphone : Elm.Expression
    , speaker : Elm.Expression
    , speaker_group : Elm.Expression
    , start : Elm.Expression
    , tablet : Elm.Expression
    , tablet_android : Elm.Expression
    , tablet_mac : Elm.Expression
    , toys : Elm.Expression
    , tv : Elm.Expression
    , videogame_asset : Elm.Expression
    , videogame_asset_off : Elm.Expression
    , watch : Elm.Expression
    , watch_off : Elm.Expression
    , auto_mode : Elm.Expression
    , blinds : Elm.Expression
    , blinds_closed : Elm.Expression
    , broadcast_on_home : Elm.Expression
    , broadcast_on_personal : Elm.Expression
    , curtains : Elm.Expression
    , curtains_closed : Elm.Expression
    , electric_bolt : Elm.Expression
    , electric_meter : Elm.Expression
    , energy_savings_leaf : Elm.Expression
    , gas_meter : Elm.Expression
    , heat_pump : Elm.Expression
    , mode_fan_off : Elm.Expression
    , nest_cam_wired_stand : Elm.Expression
    , oil_barrel : Elm.Expression
    , propane : Elm.Expression
    , propane_tank : Elm.Expression
    , roller_shades : Elm.Expression
    , roller_shades_closed : Elm.Expression
    , sensor_door : Elm.Expression
    , sensor_occupied : Elm.Expression
    , sensor_window : Elm.Expression
    , shield_moon : Elm.Expression
    , solar_power : Elm.Expression
    , vertical_shades : Elm.Expression
    , vertical_shades_closed : Elm.Expression
    , wind_power : Elm.Expression
    , ten_mp : Elm.Expression
    , eleven_mp : Elm.Expression
    , twelve_mp : Elm.Expression
    , thirteen_mp : Elm.Expression
    , fourteen_mp : Elm.Expression
    , fifteen_mp : Elm.Expression
    , sixteen_mp : Elm.Expression
    , seventeen_mp : Elm.Expression
    , eighteen_mp : Elm.Expression
    , nineteen_mp : Elm.Expression
    , twenty_mp : Elm.Expression
    , twenty_one_mp : Elm.Expression
    , twenty_two_mp : Elm.Expression
    , twenty_three_mp : Elm.Expression
    , twenty_four_mp : Elm.Expression
    , two_mp : Elm.Expression
    , thirty_fps_select : Elm.Expression
    , three_mp : Elm.Expression
    , four_mp : Elm.Expression
    , five_mp : Elm.Expression
    , sixty_fps_select : Elm.Expression
    , six_mp : Elm.Expression
    , seven_mp : Elm.Expression
    , eight_mp : Elm.Expression
    , nine_mp : Elm.Expression
    , add_a_photo : Elm.Expression
    , add_photo_alternate : Elm.Expression
    , add_to_photos : Elm.Expression
    , adjust : Elm.Expression
    , animation : Elm.Expression
    , assistant : Elm.Expression
    , assistant_photo : Elm.Expression
    , audiotrack : Elm.Expression
    , auto_awesome : Elm.Expression
    , auto_awesome_mosaic : Elm.Expression
    , auto_awesome_motion : Elm.Expression
    , auto_fix_high : Elm.Expression
    , auto_fix_normal : Elm.Expression
    , auto_fix_off : Elm.Expression
    , auto_stories : Elm.Expression
    , autofps_select : Elm.Expression
    , bedtime : Elm.Expression
    , bedtime_off : Elm.Expression
    , blur_circular : Elm.Expression
    , blur_linear : Elm.Expression
    , blur_off : Elm.Expression
    , blur_on : Elm.Expression
    , brightness_1 : Elm.Expression
    , brightness_2 : Elm.Expression
    , brightness_3 : Elm.Expression
    , brightness_4 : Elm.Expression
    , brightness_5 : Elm.Expression
    , brightness_6 : Elm.Expression
    , brightness_7 : Elm.Expression
    , broken_image : Elm.Expression
    , brush : Elm.Expression
    , burst_mode : Elm.Expression
    , camera : Elm.Expression
    , camera_alt : Elm.Expression
    , camera_front : Elm.Expression
    , camera_rear : Elm.Expression
    , camera_roll : Elm.Expression
    , cases : Elm.Expression
    , center_focus_strong : Elm.Expression
    , center_focus_weak : Elm.Expression
    , circle : Elm.Expression
    , collections : Elm.Expression
    , collections_bookmark : Elm.Expression
    , color_lens : Elm.Expression
    , colorize : Elm.Expression
    , compare : Elm.Expression
    , contrast : Elm.Expression
    , control_point : Elm.Expression
    , control_point_duplicate : Elm.Expression
    , crop : Elm.Expression
    , crop_16_9 : Elm.Expression
    , crop_3_2 : Elm.Expression
    , crop_5_4 : Elm.Expression
    , crop_7_5 : Elm.Expression
    , crop_din : Elm.Expression
    , crop_free : Elm.Expression
    , crop_landscape : Elm.Expression
    , crop_original : Elm.Expression
    , crop_portrait : Elm.Expression
    , crop_rotate : Elm.Expression
    , crop_square : Elm.Expression
    , currency_bitcoin : Elm.Expression
    , currency_franc : Elm.Expression
    , currency_lira : Elm.Expression
    , currency_pound : Elm.Expression
    , currency_ruble : Elm.Expression
    , currency_rupee : Elm.Expression
    , currency_yen : Elm.Expression
    , currency_yuan : Elm.Expression
    , deblur : Elm.Expression
    , dehaze : Elm.Expression
    , details : Elm.Expression
    , dirty_lens : Elm.Expression
    , edit : Elm.Expression
    , euro : Elm.Expression
    , exposure : Elm.Expression
    , exposure_neg_1 : Elm.Expression
    , exposure_neg_2 : Elm.Expression
    , exposure_plus_1 : Elm.Expression
    , exposure_plus_2 : Elm.Expression
    , exposure_zero : Elm.Expression
    , face_retouching_natural : Elm.Expression
    , face_retouching_off : Elm.Expression
    , filter : Elm.Expression
    , filter_1 : Elm.Expression
    , filter_2 : Elm.Expression
    , filter_3 : Elm.Expression
    , filter_4 : Elm.Expression
    , filter_5 : Elm.Expression
    , filter_6 : Elm.Expression
    , filter_7 : Elm.Expression
    , filter_8 : Elm.Expression
    , filter_9 : Elm.Expression
    , filter_9_plus : Elm.Expression
    , filter_b_and_w : Elm.Expression
    , filter_center_focus : Elm.Expression
    , filter_drama : Elm.Expression
    , filter_frames : Elm.Expression
    , filter_hdr : Elm.Expression
    , filter_none : Elm.Expression
    , filter_tilt_shift : Elm.Expression
    , filter_vintage : Elm.Expression
    , flare : Elm.Expression
    , flash_auto : Elm.Expression
    , flash_off : Elm.Expression
    , flash_on : Elm.Expression
    , flip : Elm.Expression
    , flip_camera_android : Elm.Expression
    , flip_camera_ios : Elm.Expression
    , gradient : Elm.Expression
    , grain : Elm.Expression
    , grid_off : Elm.Expression
    , grid_on : Elm.Expression
    , hdr_enhanced_select : Elm.Expression
    , hdr_off : Elm.Expression
    , hdr_on : Elm.Expression
    , hdr_plus : Elm.Expression
    , hdr_strong : Elm.Expression
    , hdr_weak : Elm.Expression
    , healing : Elm.Expression
    , hevc : Elm.Expression
    , hide_image : Elm.Expression
    , image : Elm.Expression
    , image_aspect_ratio : Elm.Expression
    , image_not_supported : Elm.Expression
    , image_search : Elm.Expression
    , incomplete_circle : Elm.Expression
    , iso : Elm.Expression
    , landscape : Elm.Expression
    , leak_add : Elm.Expression
    , leak_remove : Elm.Expression
    , lens : Elm.Expression
    , linked_camera : Elm.Expression
    , logo_dev : Elm.Expression
    , looks : Elm.Expression
    , looks_3 : Elm.Expression
    , looks_4 : Elm.Expression
    , looks_5 : Elm.Expression
    , looks_6 : Elm.Expression
    , looks_one : Elm.Expression
    , looks_two : Elm.Expression
    , loupe : Elm.Expression
    , mic_external_off : Elm.Expression
    , mic_external_on : Elm.Expression
    , monochrome_photos : Elm.Expression
    , motion_photos_auto : Elm.Expression
    , motion_photos_off : Elm.Expression
    , motion_photos_on : Elm.Expression
    , motion_photos_pause : Elm.Expression
    , motion_photos_paused : Elm.Expression
    , movie_creation : Elm.Expression
    , movie_filter : Elm.Expression
    , mp : Elm.Expression
    , music_note : Elm.Expression
    , music_off : Elm.Expression
    , nature : Elm.Expression
    , nature_people : Elm.Expression
    , navigate_before : Elm.Expression
    , navigate_next : Elm.Expression
    , palette : Elm.Expression
    , panorama : Elm.Expression
    , panorama_fish_eye : Elm.Expression
    , panorama_horizontal : Elm.Expression
    , panorama_horizontal_select : Elm.Expression
    , panorama_photosphere : Elm.Expression
    , panorama_photosphere_select : Elm.Expression
    , panorama_vertical : Elm.Expression
    , panorama_vertical_select : Elm.Expression
    , panorama_wide_angle : Elm.Expression
    , panorama_wide_angle_select : Elm.Expression
    , photo : Elm.Expression
    , photo_album : Elm.Expression
    , photo_camera : Elm.Expression
    , photo_camera_back : Elm.Expression
    , photo_camera_front : Elm.Expression
    , photo_filter : Elm.Expression
    , photo_library : Elm.Expression
    , photo_size_select_actual : Elm.Expression
    , photo_size_select_large : Elm.Expression
    , photo_size_select_small : Elm.Expression
    , picture_as_pdf : Elm.Expression
    , portrait : Elm.Expression
    , raw_off : Elm.Expression
    , raw_on : Elm.Expression
    , receipt_long : Elm.Expression
    , remove_red_eye : Elm.Expression
    , rotate_90_degrees_ccw : Elm.Expression
    , rotate_90_degrees_cw : Elm.Expression
    , rotate_left : Elm.Expression
    , rotate_right : Elm.Expression
    , shutter_speed : Elm.Expression
    , slideshow : Elm.Expression
    , straighten : Elm.Expression
    , style : Elm.Expression
    , switch_camera : Elm.Expression
    , switch_video : Elm.Expression
    , tag_faces : Elm.Expression
    , texture : Elm.Expression
    , thermostat_auto : Elm.Expression
    , timelapse : Elm.Expression
    , timer : Elm.Expression
    , timer_10 : Elm.Expression
    , timer_3 : Elm.Expression
    , timer_off : Elm.Expression
    , tonality : Elm.Expression
    , transform : Elm.Expression
    , tune : Elm.Expression
    , video_camera_back : Elm.Expression
    , video_camera_front : Elm.Expression
    , video_stable : Elm.Expression
    , view_comfy : Elm.Expression
    , view_compact : Elm.Expression
    , vignette : Elm.Expression
    , vrpano : Elm.Expression
    , wb_auto : Elm.Expression
    , wb_cloudy : Elm.Expression
    , wb_incandescent : Elm.Expression
    , wb_iridescent : Elm.Expression
    , wb_shade : Elm.Expression
    , wb_sunny : Elm.Expression
    , wb_twilight : Elm.Expression
    , three_sixty : Elm.Expression
    , add_business : Elm.Expression
    , add_location : Elm.Expression
    , add_location_alt : Elm.Expression
    , add_road : Elm.Expression
    , agriculture : Elm.Expression
    , airline_stops : Elm.Expression
    , airlines : Elm.Expression
    , alt_route : Elm.Expression
    , atm : Elm.Expression
    , attractions : Elm.Expression
    , badge : Elm.Expression
    , bakery_dining : Elm.Expression
    , beenhere : Elm.Expression
    , bike_scooter : Elm.Expression
    , breakfast_dining : Elm.Expression
    , brunch_dining : Elm.Expression
    , bus_alert : Elm.Expression
    , car_crash : Elm.Expression
    , car_rental : Elm.Expression
    , car_repair : Elm.Expression
    , castle : Elm.Expression
    , category : Elm.Expression
    , celebration : Elm.Expression
    , church : Elm.Expression
    , cleaning_services : Elm.Expression
    , compass_calibration : Elm.Expression
    , connecting_airports : Elm.Expression
    , crisis_alert : Elm.Expression
    , delivery_dining : Elm.Expression
    , departure_board : Elm.Expression
    , design_services : Elm.Expression
    , diamond : Elm.Expression
    , dinner_dining : Elm.Expression
    , directions : Elm.Expression
    , directions_bike : Elm.Expression
    , directions_boat : Elm.Expression
    , directions_boat_filled : Elm.Expression
    , directions_bus : Elm.Expression
    , directions_bus_filled : Elm.Expression
    , directions_car : Elm.Expression
    , directions_car_filled : Elm.Expression
    , directions_railway : Elm.Expression
    , directions_railway_filled : Elm.Expression
    , directions_run : Elm.Expression
    , directions_subway : Elm.Expression
    , directions_subway_filled : Elm.Expression
    , directions_transit : Elm.Expression
    , directions_transit_filled : Elm.Expression
    , directions_walk : Elm.Expression
    , dry_cleaning : Elm.Expression
    , edit_attributes : Elm.Expression
    , edit_location : Elm.Expression
    , edit_location_alt : Elm.Expression
    , edit_road : Elm.Expression
    , egg : Elm.Expression
    , egg_alt : Elm.Expression
    , electric_bike : Elm.Expression
    , electric_car : Elm.Expression
    , electric_moped : Elm.Expression
    , electric_rickshaw : Elm.Expression
    , electric_scooter : Elm.Expression
    , electrical_services : Elm.Expression
    , emergency : Elm.Expression
    , emergency_recording : Elm.Expression
    , emergency_share : Elm.Expression
    , ev_station : Elm.Expression
    , factory : Elm.Expression
    , fastfood : Elm.Expression
    , festival : Elm.Expression
    , fire_hydrant_alt : Elm.Expression
    , fire_truck : Elm.Expression
    , flight : Elm.Expression
    , flight_class : Elm.Expression
    , forest : Elm.Expression
    , fork_left : Elm.Expression
    , fork_right : Elm.Expression
    , fort : Elm.Expression
    , hail : Elm.Expression
    , handyman : Elm.Expression
    , hardware : Elm.Expression
    , home_repair_service : Elm.Expression
    , hotel : Elm.Expression
    , hvac : Elm.Expression
    , icecream : Elm.Expression
    , kebab_dining : Elm.Expression
    , layers : Elm.Expression
    , layers_clear : Elm.Expression
    , liquor : Elm.Expression
    , local_activity : Elm.Expression
    , local_airport : Elm.Expression
    , local_atm : Elm.Expression
    , local_bar : Elm.Expression
    , local_cafe : Elm.Expression
    , local_car_wash : Elm.Expression
    , local_convenience_store : Elm.Expression
    , local_dining : Elm.Expression
    , local_drink : Elm.Expression
    , local_fire_department : Elm.Expression
    , local_florist : Elm.Expression
    , local_gas_station : Elm.Expression
    , local_grocery_store : Elm.Expression
    , local_hospital : Elm.Expression
    , local_hotel : Elm.Expression
    , local_laundry_service : Elm.Expression
    , local_library : Elm.Expression
    , local_mall : Elm.Expression
    , local_movies : Elm.Expression
    , local_offer : Elm.Expression
    , local_parking : Elm.Expression
    , local_pharmacy : Elm.Expression
    , local_phone : Elm.Expression
    , local_pizza : Elm.Expression
    , local_play : Elm.Expression
    , local_police : Elm.Expression
    , local_post_office : Elm.Expression
    , local_printshop : Elm.Expression
    , local_see : Elm.Expression
    , local_shipping : Elm.Expression
    , local_taxi : Elm.Expression
    , lunch_dining : Elm.Expression
    , map : Elm.Expression
    , maps_ugc : Elm.Expression
    , medical_information : Elm.Expression
    , medical_services : Elm.Expression
    , menu_book : Elm.Expression
    , merge : Elm.Expression
    , minor_crash : Elm.Expression
    , miscellaneous_services : Elm.Expression
    , mode_of_travel : Elm.Expression
    , money : Elm.Expression
    , moped : Elm.Expression
    , mosque : Elm.Expression
    , moving : Elm.Expression
    , multiple_stop : Elm.Expression
    , museum : Elm.Expression
    , my_location : Elm.Expression
    , navigation : Elm.Expression
    , near_me : Elm.Expression
    , near_me_disabled : Elm.Expression
    , nightlife : Elm.Expression
    , no_crash : Elm.Expression
    , no_meals : Elm.Expression
    , no_transfer : Elm.Expression
    , not_listed_location : Elm.Expression
    , park : Elm.Expression
    , pedal_bike : Elm.Expression
    , person_pin : Elm.Expression
    , person_pin_circle : Elm.Expression
    , pest_control : Elm.Expression
    , pest_control_rodent : Elm.Expression
    , pin_drop : Elm.Expression
    , place : Elm.Expression
    , plumbing : Elm.Expression
    , railway_alert : Elm.Expression
    , ramen_dining : Elm.Expression
    , ramp_left : Elm.Expression
    , ramp_right : Elm.Expression
    , rate_review : Elm.Expression
    , remove_road : Elm.Expression
    , restaurant : Elm.Expression
    , restaurant_menu : Elm.Expression
    , roundabout_left : Elm.Expression
    , roundabout_right : Elm.Expression
    , route : Elm.Expression
    , run_circle : Elm.Expression
    , safety_check : Elm.Expression
    , sailing : Elm.Expression
    , satellite : Elm.Expression
    , screen_rotation_alt : Elm.Expression
    , set_meal : Elm.Expression
    , signpost : Elm.Expression
    , snowmobile : Elm.Expression
    , sos : Elm.Expression
    , soup_kitchen : Elm.Expression
    , stadium : Elm.Expression
    , store_mall_directory : Elm.Expression
    , straight : Elm.Expression
    , streetview : Elm.Expression
    , subway : Elm.Expression
    , synagogue : Elm.Expression
    , takeout_dining : Elm.Expression
    , taxi_alert : Elm.Expression
    , temple_buddhist : Elm.Expression
    , temple_hindu : Elm.Expression
    , terrain : Elm.Expression
    , theater_comedy : Elm.Expression
    , tire_repair : Elm.Expression
    , traffic : Elm.Expression
    , train : Elm.Expression
    , tram : Elm.Expression
    , transfer_within_a_station : Elm.Expression
    , transit_enterexit : Elm.Expression
    , trip_origin : Elm.Expression
    , turn_left : Elm.Expression
    , turn_right : Elm.Expression
    , turn_sharp_left : Elm.Expression
    , turn_sharp_right : Elm.Expression
    , turn_slight_left : Elm.Expression
    , turn_slight_right : Elm.Expression
    , two_wheeler : Elm.Expression
    , u_turn_left : Elm.Expression
    , u_turn_right : Elm.Expression
    , volunteer_activism : Elm.Expression
    , warehouse : Elm.Expression
    , wine_bar : Elm.Expression
    , wrong_location : Elm.Expression
    , zoom_in_map : Elm.Expression
    , zoom_out_map : Elm.Expression
    , add_home_work : Elm.Expression
    , app_settings_alt : Elm.Expression
    , apps : Elm.Expression
    , apps_outage : Elm.Expression
    , arrow_back : Elm.Expression
    , arrow_back_ios : Elm.Expression
    , arrow_back_ios_new : Elm.Expression
    , arrow_downward : Elm.Expression
    , arrow_drop_down : Elm.Expression
    , arrow_drop_down_circle : Elm.Expression
    , arrow_drop_up : Elm.Expression
    , arrow_forward : Elm.Expression
    , arrow_forward_ios : Elm.Expression
    , arrow_left : Elm.Expression
    , arrow_right : Elm.Expression
    , arrow_upward : Elm.Expression
    , assistant_direction : Elm.Expression
    , campaign : Elm.Expression
    , cancel : Elm.Expression
    , check : Elm.Expression
    , chevron_left : Elm.Expression
    , chevron_right : Elm.Expression
    , close : Elm.Expression
    , double_arrow : Elm.Expression
    , east : Elm.Expression
    , expand_circle_down : Elm.Expression
    , expand_less : Elm.Expression
    , expand_more : Elm.Expression
    , first_page : Elm.Expression
    , fullscreen : Elm.Expression
    , fullscreen_exit : Elm.Expression
    , home_work : Elm.Expression
    , last_page : Elm.Expression
    , legend_toggle : Elm.Expression
    , maps_home_work : Elm.Expression
    , menu : Elm.Expression
    , menu_open : Elm.Expression
    , more_horiz : Elm.Expression
    , more_vert : Elm.Expression
    , north : Elm.Expression
    , north_east : Elm.Expression
    , north_west : Elm.Expression
    , offline_share : Elm.Expression
    , payments : Elm.Expression
    , pivot_table_chart : Elm.Expression
    , refresh : Elm.Expression
    , south : Elm.Expression
    , south_east : Elm.Expression
    , south_west : Elm.Expression
    , subdirectory_arrow_left : Elm.Expression
    , subdirectory_arrow_right : Elm.Expression
    , switch_left : Elm.Expression
    , switch_right : Elm.Expression
    , unfold_less : Elm.Expression
    , unfold_more : Elm.Expression
    , waterfall_chart : Elm.Expression
    , west : Elm.Expression
    , account_tree : Elm.Expression
    , adb : Elm.Expression
    , airline_seat_flat : Elm.Expression
    , airline_seat_flat_angled : Elm.Expression
    , airline_seat_individual_suite : Elm.Expression
    , airline_seat_legroom_extra : Elm.Expression
    , airline_seat_legroom_normal : Elm.Expression
    , airline_seat_legroom_reduced : Elm.Expression
    , airline_seat_recline_extra : Elm.Expression
    , airline_seat_recline_normal : Elm.Expression
    , bluetooth_audio : Elm.Expression
    , confirmation_number : Elm.Expression
    , directions_off : Elm.Expression
    , disc_full : Elm.Expression
    , do_disturb : Elm.Expression
    , do_disturb_alt : Elm.Expression
    , do_disturb_off : Elm.Expression
    , do_disturb_on : Elm.Expression
    , do_not_disturb : Elm.Expression
    , do_not_disturb_alt : Elm.Expression
    , do_not_disturb_off : Elm.Expression
    , do_not_disturb_on : Elm.Expression
    , drive_eta : Elm.Expression
    , enhanced_encryption : Elm.Expression
    , event_available : Elm.Expression
    , event_busy : Elm.Expression
    , event_note : Elm.Expression
    , folder_special : Elm.Expression
    , imagesearch_roller : Elm.Expression
    , live_tv : Elm.Expression
    , mms : Elm.Expression
    , more : Elm.Expression
    , network_check : Elm.Expression
    , network_locked : Elm.Expression
    , no_encryption : Elm.Expression
    , no_encryption_gmailerrorred : Elm.Expression
    , ondemand_video : Elm.Expression
    , personal_video : Elm.Expression
    , phone_bluetooth_speaker : Elm.Expression
    , phone_callback : Elm.Expression
    , phone_forwarded : Elm.Expression
    , phone_locked : Elm.Expression
    , phone_missed : Elm.Expression
    , phone_paused : Elm.Expression
    , power : Elm.Expression
    , power_off : Elm.Expression
    , priority_high : Elm.Expression
    , running_with_errors : Elm.Expression
    , sd_card : Elm.Expression
    , sd_card_alert : Elm.Expression
    , sim_card_alert : Elm.Expression
    , sms : Elm.Expression
    , sms_failed : Elm.Expression
    , support_agent : Elm.Expression
    , sync : Elm.Expression
    , sync_disabled : Elm.Expression
    , sync_lock : Elm.Expression
    , sync_problem : Elm.Expression
    , system_update : Elm.Expression
    , tap_and_play : Elm.Expression
    , time_to_leave : Elm.Expression
    , tv_off : Elm.Expression
    , vibration : Elm.Expression
    , video_chat : Elm.Expression
    , voice_chat : Elm.Expression
    , vpn_lock : Elm.Expression
    , wc : Elm.Expression
    , wifi : Elm.Expression
    , wifi_off : Elm.Expression
    , ac_unit : Elm.Expression
    , airport_shuttle : Elm.Expression
    , all_inclusive : Elm.Expression
    , apartment : Elm.Expression
    , baby_changing_station : Elm.Expression
    , backpack : Elm.Expression
    , balcony : Elm.Expression
    , bathtub : Elm.Expression
    , beach_access : Elm.Expression
    , bento : Elm.Expression
    , bungalow : Elm.Expression
    , business_center : Elm.Expression
    , cabin : Elm.Expression
    , carpenter : Elm.Expression
    , casino : Elm.Expression
    , chalet : Elm.Expression
    , charging_station : Elm.Expression
    , checkroom : Elm.Expression
    , child_care : Elm.Expression
    , child_friendly : Elm.Expression
    , corporate_fare : Elm.Expression
    , cottage : Elm.Expression
    , countertops : Elm.Expression
    , crib : Elm.Expression
    , desk : Elm.Expression
    , do_not_step : Elm.Expression
    , do_not_touch : Elm.Expression
    , dry : Elm.Expression
    , elevator : Elm.Expression
    , escalator : Elm.Expression
    , escalator_warning : Elm.Expression
    , family_restroom : Elm.Expression
    , fence : Elm.Expression
    , fire_extinguisher : Elm.Expression
    , fitness_center : Elm.Expression
    , food_bank : Elm.Expression
    , foundation : Elm.Expression
    , free_breakfast : Elm.Expression
    , gite : Elm.Expression
    , golf_course : Elm.Expression
    , grass : Elm.Expression
    , holiday_village : Elm.Expression
    , hot_tub : Elm.Expression
    , house : Elm.Expression
    , house_siding : Elm.Expression
    , houseboat : Elm.Expression
    , iron : Elm.Expression
    , kitchen : Elm.Expression
    , meeting_room : Elm.Expression
    , microwave : Elm.Expression
    , night_shelter : Elm.Expression
    , no_backpack : Elm.Expression
    , no_cell : Elm.Expression
    , no_drinks : Elm.Expression
    , no_flash : Elm.Expression
    , no_food : Elm.Expression
    , no_meeting_room : Elm.Expression
    , no_photography : Elm.Expression
    , no_stroller : Elm.Expression
    , other_houses : Elm.Expression
    , pool : Elm.Expression
    , rice_bowl : Elm.Expression
    , roofing : Elm.Expression
    , room_preferences : Elm.Expression
    , room_service : Elm.Expression
    , rv_hookup : Elm.Expression
    , smoke_free : Elm.Expression
    , smoking_rooms : Elm.Expression
    , soap : Elm.Expression
    , spa : Elm.Expression
    , sports_bar : Elm.Expression
    , stairs : Elm.Expression
    , storefront : Elm.Expression
    , stroller : Elm.Expression
    , tapas : Elm.Expression
    , tty : Elm.Expression
    , umbrella : Elm.Expression
    , vape_free : Elm.Expression
    , vaping_rooms : Elm.Expression
    , villa : Elm.Expression
    , wash : Elm.Expression
    , water_damage : Elm.Expression
    , wheelchair_pickup : Elm.Expression
    , bathroom : Elm.Expression
    , bed : Elm.Expression
    , bedroom_baby : Elm.Expression
    , bedroom_child : Elm.Expression
    , bedroom_parent : Elm.Expression
    , blender : Elm.Expression
    , camera_indoor : Elm.Expression
    , camera_outdoor : Elm.Expression
    , chair : Elm.Expression
    , chair_alt : Elm.Expression
    , coffee : Elm.Expression
    , coffee_maker : Elm.Expression
    , dining : Elm.Expression
    , door_back : Elm.Expression
    , door_front : Elm.Expression
    , door_sliding : Elm.Expression
    , doorbell : Elm.Expression
    , feed : Elm.Expression
    , flatware : Elm.Expression
    , garage : Elm.Expression
    , light : Elm.Expression
    , living : Elm.Expression
    , manage_search : Elm.Expression
    , podcasts : Elm.Expression
    , shower : Elm.Expression
    , table_bar : Elm.Expression
    , table_restaurant : Elm.Expression
    , window : Elm.Expression
    , yard : Elm.Expression
    , eighteen_up_rating : Elm.Expression
    , six_ft_apart : Elm.Expression
    , add_moderator : Elm.Expression
    , add_reaction : Elm.Expression
    , architecture : Elm.Expression
    , assist_walker : Elm.Expression
    , back_hand : Elm.Expression
    , blind : Elm.Expression
    , boy : Elm.Expression
    , cake : Elm.Expression
    , catching_pokemon : Elm.Expression
    , clean_hands : Elm.Expression
    , co2 : Elm.Expression
    , compost : Elm.Expression
    , connect_without_contact : Elm.Expression
    , construction : Elm.Expression
    , cookie : Elm.Expression
    , coronavirus : Elm.Expression
    , cruelty_free : Elm.Expression
    , cyclone : Elm.Expression
    , deck : Elm.Expression
    , diversity_1 : Elm.Expression
    , diversity_2 : Elm.Expression
    , diversity_3 : Elm.Expression
    , domain : Elm.Expression
    , domain_add : Elm.Expression
    , downhill_skiing : Elm.Expression
    , edit_notifications : Elm.Expression
    , elderly : Elm.Expression
    , elderly_woman : Elm.Expression
    , emoji_emotions : Elm.Expression
    , emoji_events : Elm.Expression
    , emoji_food_beverage : Elm.Expression
    , emoji_nature : Elm.Expression
    , emoji_objects : Elm.Expression
    , emoji_people : Elm.Expression
    , emoji_symbols : Elm.Expression
    , emoji_transportation : Elm.Expression
    , engineering : Elm.Expression
    , face_2 : Elm.Expression
    , face_3 : Elm.Expression
    , face_4 : Elm.Expression
    , face_5 : Elm.Expression
    , face_6 : Elm.Expression
    , female : Elm.Expression
    , fireplace : Elm.Expression
    , fitbit : Elm.Expression
    , flood : Elm.Expression
    , follow_the_signs : Elm.Expression
    , front_hand : Elm.Expression
    , girl : Elm.Expression
    , group : Elm.Expression
    , group_add : Elm.Expression
    , group_off : Elm.Expression
    , group_remove : Elm.Expression
    , groups : Elm.Expression
    , groups_2 : Elm.Expression
    , groups_3 : Elm.Expression
    , handshake : Elm.Expression
    , health_and_safety : Elm.Expression
    , heart_broken : Elm.Expression
    , hiking : Elm.Expression
    , history_edu : Elm.Expression
    , hive : Elm.Expression
    , ice_skating : Elm.Expression
    , interests : Elm.Expression
    , ios_share : Elm.Expression
    , kayaking : Elm.Expression
    , king_bed : Elm.Expression
    , kitesurfing : Elm.Expression
    , landslide : Elm.Expression
    , location_city : Elm.Expression
    , luggage : Elm.Expression
    , male : Elm.Expression
    , man : Elm.Expression
    , man_2 : Elm.Expression
    , man_3 : Elm.Expression
    , man_4 : Elm.Expression
    , masks : Elm.Expression
    , military_tech : Elm.Expression
    , mood : Elm.Expression
    , mood_bad : Elm.Expression
    , nights_stay : Elm.Expression
    , no_adult_content : Elm.Expression
    , no_luggage : Elm.Expression
    , nordic_walking : Elm.Expression
    , notification_add : Elm.Expression
    , notifications : Elm.Expression
    , notifications_active : Elm.Expression
    , notifications_none : Elm.Expression
    , notifications_off : Elm.Expression
    , notifications_paused : Elm.Expression
    , outdoor_grill : Elm.Expression
    , pages : Elm.Expression
    , paragliding : Elm.Expression
    , party_mode : Elm.Expression
    , people : Elm.Expression
    , people_alt : Elm.Expression
    , people_outline : Elm.Expression
    , person : Elm.Expression
    , person_2 : Elm.Expression
    , person_3 : Elm.Expression
    , person_4 : Elm.Expression
    , person_add : Elm.Expression
    , person_add_alt : Elm.Expression
    , person_add_alt_1 : Elm.Expression
    , person_off : Elm.Expression
    , person_outline : Elm.Expression
    , person_remove : Elm.Expression
    , person_remove_alt_1 : Elm.Expression
    , personal_injury : Elm.Expression
    , piano : Elm.Expression
    , piano_off : Elm.Expression
    , pix : Elm.Expression
    , plus_one : Elm.Expression
    , poll : Elm.Expression
    , precision_manufacturing : Elm.Expression
    , psychology : Elm.Expression
    , psychology_alt : Elm.Expression
    , public : Elm.Expression
    , public_off : Elm.Expression
    , real_estate_agent : Elm.Expression
    , recommend : Elm.Expression
    , recycling : Elm.Expression
    , reduce_capacity : Elm.Expression
    , remove_moderator : Elm.Expression
    , roller_skating : Elm.Expression
    , safety_divider : Elm.Expression
    , sanitizer : Elm.Expression
    , scale : Elm.Expression
    , school : Elm.Expression
    , science : Elm.Expression
    , scoreboard : Elm.Expression
    , scuba_diving : Elm.Expression
    , self_improvement : Elm.Expression
    , sentiment_dissatisfied : Elm.Expression
    , sentiment_neutral : Elm.Expression
    , sentiment_satisfied : Elm.Expression
    , sentiment_very_dissatisfied : Elm.Expression
    , sentiment_very_satisfied : Elm.Expression
    , severe_cold : Elm.Expression
    , share : Elm.Expression
    , sick : Elm.Expression
    , sign_language : Elm.Expression
    , single_bed : Elm.Expression
    , skateboarding : Elm.Expression
    , sledding : Elm.Expression
    , snowboarding : Elm.Expression
    , snowshoeing : Elm.Expression
    , social_distance : Elm.Expression
    , south_america : Elm.Expression
    , sports : Elm.Expression
    , sports_baseball : Elm.Expression
    , sports_basketball : Elm.Expression
    , sports_cricket : Elm.Expression
    , sports_esports : Elm.Expression
    , sports_football : Elm.Expression
    , sports_golf : Elm.Expression
    , sports_gymnastics : Elm.Expression
    , sports_handball : Elm.Expression
    , sports_hockey : Elm.Expression
    , sports_kabaddi : Elm.Expression
    , sports_martial_arts : Elm.Expression
    , sports_mma : Elm.Expression
    , sports_motorsports : Elm.Expression
    , sports_rugby : Elm.Expression
    , sports_soccer : Elm.Expression
    , sports_tennis : Elm.Expression
    , sports_volleyball : Elm.Expression
    , surfing : Elm.Expression
    , switch_account : Elm.Expression
    , thumb_down_alt : Elm.Expression
    , thumb_up_alt : Elm.Expression
    , thunderstorm : Elm.Expression
    , tornado : Elm.Expression
    , transgender : Elm.Expression
    , travel_explore : Elm.Expression
    , tsunami : Elm.Expression
    , vaccines : Elm.Expression
    , volcano : Elm.Expression
    , wallet : Elm.Expression
    , water_drop : Elm.Expression
    , waving_hand : Elm.Expression
    , whatshot : Elm.Expression
    , woman : Elm.Expression
    , woman_2 : Elm.Expression
    , workspace_premium : Elm.Expression
    , check_box : Elm.Expression
    , check_box_outline_blank : Elm.Expression
    , indeterminate_check_box : Elm.Expression
    , radio_button_checked : Elm.Expression
    , radio_button_unchecked : Elm.Expression
    , star : Elm.Expression
    , star_border : Elm.Expression
    , star_border_purple500 : Elm.Expression
    , star_half : Elm.Expression
    , star_outline : Elm.Expression
    , star_purple500 : Elm.Expression
    , toggle_off : Elm.Expression
    , toggle_on : Elm.Expression
    }
values_ =
    { one_two_three =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "one_two_three"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_d_rotation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_d_rotation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , abc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "abc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , accessibility =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "accessibility"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , accessibility_new =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "accessibility_new"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , accessible =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "accessible"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , accessible_forward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "accessible_forward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , account_balance =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "account_balance"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , account_balance_wallet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "account_balance_wallet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , account_box =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "account_box"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , account_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "account_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_card =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_card"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_home =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_home"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_shopping_cart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_shopping_cart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_task =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_task"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_to_drive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_to_drive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , addchart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "addchart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , admin_panel_settings =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "admin_panel_settings"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ads_click =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ads_click"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alarm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alarm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alarm_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alarm_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alarm_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alarm_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alarm_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alarm_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , all_inbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "all_inbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , all_out =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "all_out"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , analytics =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "analytics"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , anchor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "anchor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , android =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "android"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , announcement =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "announcement"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , api =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "api"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , app_blocking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "app_blocking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , app_shortcut =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "app_shortcut"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_circle_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_circle_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_circle_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_circle_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_circle_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_circle_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_circle_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_circle_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_outward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_outward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_right_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_right_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , article =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "article"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , aspect_ratio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "aspect_ratio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assessment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assessment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment_ind =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment_ind"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment_late =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment_late"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment_return =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment_return"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment_returned =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment_returned"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assignment_turned_in =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assignment_turned_in"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assured_workload =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assured_workload"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , autorenew =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "autorenew"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , backup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "backup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , backup_table =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "backup_table"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , balance =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "balance"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , batch_prediction =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "batch_prediction"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , book =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "book"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , book_online =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "book_online"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmark =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmark"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmark_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmark_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmark_added =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmark_added"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmark_border =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmark_border"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmark_remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmark_remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bookmarks =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bookmarks"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , browse_gallery =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "browse_gallery"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bug_report =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bug_report"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , build =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "build"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , build_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "build_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cached =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cached"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calendar_month =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calendar_month"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calendar_today =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calendar_today"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calendar_view_day =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calendar_view_day"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calendar_view_month =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calendar_view_month"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calendar_view_week =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calendar_view_week"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_enhance =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_enhance"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cancel_schedule_send =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cancel_schedule_send"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , card_giftcard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "card_giftcard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , card_membership =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "card_membership"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , card_travel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "card_travel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , change_history =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "change_history"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , check_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "check_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , check_circle_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "check_circle_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chrome_reader_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chrome_reader_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , circle_notifications =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "circle_notifications"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , class =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "class"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , close_fullscreen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "close_fullscreen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , code =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "code"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , code_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "code_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , comment_bank =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "comment_bank"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , commit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "commit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , commute =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "commute"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , compare_arrows =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "compare_arrows"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , compress =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "compress"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contact_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contact_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contact_support =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contact_support"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contactless =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contactless"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , copyright =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "copyright"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , credit_card =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "credit_card"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , credit_card_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "credit_card_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , css =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "css"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_exchange =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_exchange"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dangerous =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dangerous"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dashboard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dashboard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dashboard_customize =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dashboard_customize"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_exploration =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_exploration"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_thresholding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_thresholding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , date_range =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "date_range"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , delete =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "delete"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , delete_forever =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "delete_forever"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , delete_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "delete_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , density_large =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "density_large"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , density_medium =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "density_medium"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , density_small =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "density_small"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , description =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "description"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , disabled_by_default =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "disabled_by_default"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , disabled_visible =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "disabled_visible"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , display_settings =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "display_settings"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dns =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dns"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , done =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "done"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , done_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "done_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , done_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "done_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , donut_large =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "donut_large"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , donut_small =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "donut_small"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drag_indicator =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drag_indicator"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dynamic_form =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dynamic_form"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_calendar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_calendar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eject =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eject"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , euro_symbol =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "euro_symbol"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event_repeat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event_repeat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event_seat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event_seat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exit_to_app =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exit_to_app"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , expand =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "expand"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , explore =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "explore"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , explore_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "explore_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , extension =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "extension"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , extension_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "extension_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fact_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fact_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , favorite =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "favorite"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , favorite_border =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "favorite_border"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fax =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fax"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , feedback =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "feedback"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_present =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_present"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_alt_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_alt_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , find_in_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "find_in_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , find_replace =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "find_replace"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fingerprint =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fingerprint"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fit_screen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fit_screen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flaky =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flaky"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flight_land =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flight_land"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flight_takeoff =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flight_takeoff"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flip_to_back =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flip_to_back"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flip_to_front =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flip_to_front"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flutter_dash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flutter_dash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , free_cancellation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "free_cancellation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , g_translate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "g_translate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gavel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gavel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , generating_tokens =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "generating_tokens"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , get_app =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "get_app"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gif =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gif"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gif_box =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gif_box"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grade =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grade"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grading =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grading"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , group_work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "group_work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , help =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "help"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , help_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "help_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , help_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "help_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hide_source =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hide_source"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , highlight_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "highlight_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , highlight_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "highlight_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , history =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "history"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , history_toggle_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "history_toggle_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hls =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hls"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hls_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hls_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , home =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "home"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , horizontal_split =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "horizontal_split"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hotel_class =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hotel_class"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hourglass_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hourglass_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hourglass_empty =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hourglass_empty"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hourglass_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hourglass_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , html =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "html"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , http =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "http"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , https =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "https"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , important_devices =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "important_devices"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , info =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "info"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , input =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "input"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , install_desktop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "install_desktop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , install_mobile =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "install_mobile"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , integration_instructions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "integration_instructions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , invert_colors =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "invert_colors"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , javascript =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "javascript"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , join_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "join_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , join_inner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "join_inner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , join_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "join_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , join_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "join_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , label =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "label"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , label_important =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "label_important"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , label_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "label_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , language =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "language"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , launch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "launch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , leaderboard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "leaderboard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lightbulb =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lightbulb"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lightbulb_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lightbulb_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , line_style =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "line_style"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , line_weight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "line_weight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , list =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "list"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lock_clock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lock_clock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lock_open =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lock_open"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lock_person =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lock_person"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lock_reset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lock_reset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , login =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "login"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , logout =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "logout"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , loyalty =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "loyalty"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , manage_accounts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "manage_accounts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , manage_history =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "manage_history"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_as_unread =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_as_unread"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , markunread_mailbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "markunread_mailbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , maximize =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "maximize"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mediation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mediation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , minimize =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "minimize"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , model_training =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "model_training"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_ping =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_ping"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , new_label =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "new_label"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , next_plan =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "next_plan"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nightlight_round =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nightlight_round"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_accounts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_accounts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , noise_aware =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "noise_aware"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , noise_control_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "noise_control_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , not_accessible =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "not_accessible"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , not_started =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "not_started"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , note_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "note_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , offline_bolt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "offline_bolt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , offline_pin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "offline_pin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , on_device_training =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "on_device_training"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , online_prediction =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "online_prediction"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , opacity =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "opacity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , open_in_browser =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "open_in_browser"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , open_in_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "open_in_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , open_in_new =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "open_in_new"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , open_in_new_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "open_in_new_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , open_with =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "open_with"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , outbound =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "outbound"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , outbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "outbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , outlet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "outlet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , output =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "output"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pageview =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pageview"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , paid =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "paid"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pan_tool =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pan_tool"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pan_tool_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pan_tool_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , payment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "payment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pending =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pending"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pending_actions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pending_actions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , percent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "percent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_camera_mic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_camera_mic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_contact_calendar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_contact_calendar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_data_setting =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_data_setting"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_device_information =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_device_information"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_identity =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_identity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_media =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_media"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_phone_msg =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_phone_msg"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , perm_scan_wifi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "perm_scan_wifi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pets =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pets"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , php =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "php"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , picture_in_picture =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "picture_in_picture"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , picture_in_picture_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "picture_in_picture_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pin_end =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pin_end"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pin_invoke =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pin_invoke"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pinch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pinch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , plagiarism =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "plagiarism"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_for_work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_for_work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , polymer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "polymer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , power_settings_new =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "power_settings_new"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pregnant_woman =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pregnant_woman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , preview =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "preview"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , print =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "print"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , privacy_tip =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "privacy_tip"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , private_connectivity =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "private_connectivity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , production_quantity_limits =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "production_quantity_limits"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , published_with_changes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "published_with_changes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , query_builder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "query_builder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , question_answer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "question_answer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , question_mark =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "question_mark"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , quickreply =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "quickreply"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , receipt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "receipt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , record_voice_over =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "record_voice_over"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , redeem =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "redeem"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_done =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_done"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_shopping_cart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_shopping_cart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reorder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reorder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , repartition =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "repartition"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , report_problem =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "report_problem"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , request_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "request_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restore =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restore"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restore_from_trash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restore_from_trash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restore_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restore_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rocket =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rocket"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rocket_launch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rocket_launch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , room =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "room"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rounded_corner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rounded_corner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rowing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rowing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rule =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rule"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , satellite_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "satellite_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , saved_search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "saved_search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , savings =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "savings"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , schedule =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "schedule"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , schedule_send =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "schedule_send"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , search_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "search_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , segment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "segment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , send_and_archive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "send_and_archive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sensors =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sensors"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sensors_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sensors_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_accessibility =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_accessibility"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_applications =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_applications"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_backup_restore =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_backup_restore"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_bluetooth =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_bluetooth"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_brightness =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_brightness"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_cell =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_cell"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_ethernet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_ethernet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_input_antenna =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_input_antenna"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_input_component =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_input_component"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_input_composite =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_input_composite"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_input_hdmi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_input_hdmi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_input_svideo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_input_svideo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_overscan =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_overscan"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_phone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_phone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_power =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_power"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_remote =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_remote"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_voice =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_voice"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shop_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shop_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shop_two =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shop_two"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shopping_bag =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shopping_bag"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shopping_basket =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shopping_basket"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shopping_cart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shopping_cart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shopping_cart_checkout =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shopping_cart_checkout"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smart_button =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smart_button"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , source =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "source"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , space_dashboard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "space_dashboard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spatial_audio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spatial_audio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spatial_audio_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spatial_audio_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spatial_tracking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spatial_tracking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speaker_notes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speaker_notes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speaker_notes_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speaker_notes_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spellcheck =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spellcheck"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_rate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_rate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stars =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stars"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sticky_note_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sticky_note_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , store =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "store"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subject =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subject"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subtitles_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subtitles_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , supervised_user_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "supervised_user_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , supervisor_account =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "supervisor_account"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , support =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "support"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swap_horiz =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swap_horiz"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swap_horizontal_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swap_horizontal_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swap_vert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swap_vert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swap_vertical_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swap_vertical_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_down_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_down_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_left_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_left_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_right_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_right_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_up_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_up_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swipe_vertical =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swipe_vertical"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_access_shortcut =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_access_shortcut"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_access_shortcut_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_access_shortcut_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sync_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sync_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , system_update_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "system_update_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tab =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tab"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tab_unselected =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tab_unselected"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , table_view =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "table_view"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , task_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "task_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , terminal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "terminal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotate_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotate_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotate_vertical =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotate_vertical"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotation_angledown =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotation_angledown"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotation_angleup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotation_angleup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotation_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotation_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_rotation_none =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_rotation_none"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , theaters =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "theaters"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_down_off_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_down_off_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_up_off_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_up_off_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumbs_up_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumbs_up_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timeline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timeline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tips_and_updates =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tips_and_updates"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , toc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "toc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , today =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "today"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , token =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "token"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , toll =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "toll"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , touch_app =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "touch_app"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tour =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tour"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , track_changes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "track_changes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , transcribe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "transcribe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , translate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "translate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , trending_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "trending_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , trending_flat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "trending_flat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , trending_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "trending_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , troubleshoot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "troubleshoot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , try =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "try"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turned_in =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turned_in"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turned_in_not =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turned_in_not"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unfold_less_double =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unfold_less_double"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unfold_more_double =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unfold_more_double"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unpublished =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unpublished"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , update =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "update"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , update_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "update_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , upgrade =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "upgrade"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , verified =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "verified"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , verified_user =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "verified_user"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_split =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_split"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_agenda =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_agenda"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_array =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_array"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_carousel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_carousel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_column =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_column"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_comfy_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_comfy_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_compact_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_compact_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_cozy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_cozy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_day =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_day"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_headline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_headline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_in_ar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_in_ar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_kanban =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_kanban"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_list =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_list"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_module =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_module"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_quilt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_quilt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_sidebar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_sidebar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_stream =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_stream"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_timeline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_timeline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_week =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_week"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , visibility =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "visibility"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , visibility_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "visibility_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , voice_over_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "voice_over_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , watch_later =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "watch_later"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , webhook =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "webhook"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , width_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "width_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , width_normal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "width_normal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , width_wide =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "width_wide"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_protected_setup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_protected_setup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , work_history =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "work_history"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , work_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "work_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , work_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "work_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wysiwyg =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wysiwyg"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , youtube_searched_for =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "youtube_searched_for"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , zoom_in =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "zoom_in"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , zoom_out =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "zoom_out"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_delete =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_delete"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , error =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "error"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , error_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "error_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notification_important =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notification_important"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , warning =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "warning"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , warning_amber =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "warning_amber"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ten_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ten_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , one_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "one_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , one_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "one_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , two_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "two_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , two_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "two_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , four_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "four_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , four_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "four_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , five_g =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "five_g"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , five_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "five_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , five_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "five_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , six_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "six_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , six_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "six_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , seven_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "seven_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , seven_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "seven_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eight_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eight_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eight_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eight_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nine_k =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nine_k"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nine_k_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nine_k_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_to_queue =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_to_queue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airplay =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airplay"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , album =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "album"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , art_track =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "art_track"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , audio_file =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "audio_file"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , av_timer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "av_timer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , branding_watermark =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "branding_watermark"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_to_action =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_to_action"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , closed_caption =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "closed_caption"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , closed_caption_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "closed_caption_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , closed_caption_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "closed_caption_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , control_camera =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "control_camera"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , equalizer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "equalizer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , explicit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "explicit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fast_forward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fast_forward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fast_rewind =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fast_rewind"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , featured_play_list =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "featured_play_list"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , featured_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "featured_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fiber_dvr =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fiber_dvr"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fiber_manual_record =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fiber_manual_record"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fiber_new =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fiber_new"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fiber_pin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fiber_pin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fiber_smart_record =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fiber_smart_record"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forward_10 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forward_10"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forward_30 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forward_30"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forward_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forward_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , games =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "games"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hd =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hd"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hearing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hearing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hearing_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hearing_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , high_quality =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "high_quality"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , interpreter_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "interpreter_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , library_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "library_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , library_add_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "library_add_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , library_books =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "library_books"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , library_music =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "library_music"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , loop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "loop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lyrics =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lyrics"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mic_none =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mic_none"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mic_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mic_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , missed_video_call =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "missed_video_call"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , movie =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "movie"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , music_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "music_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , new_releases =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "new_releases"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , not_interested =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "not_interested"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , note =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "note"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pause =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pause"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pause_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pause_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pause_circle_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pause_circle_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pause_circle_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pause_circle_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_arrow =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_arrow"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_circle_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_circle_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_circle_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_circle_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_add_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_add_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_add_check_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_add_check_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_add_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_add_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_play =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_play"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , playlist_remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "playlist_remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , queue =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "queue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , queue_music =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "queue_music"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , queue_play_next =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "queue_play_next"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , radio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "radio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , recent_actors =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "recent_actors"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_from_queue =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_from_queue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , repeat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "repeat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , repeat_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "repeat_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , repeat_one =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "repeat_one"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , repeat_one_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "repeat_one_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , replay =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "replay"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , replay_10 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "replay_10"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , replay_30 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "replay_30"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , replay_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "replay_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , replay_circle_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "replay_circle_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sd =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sd"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shuffle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shuffle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shuffle_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shuffle_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , skip_next =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "skip_next"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , skip_previous =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "skip_previous"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , slow_motion_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "slow_motion_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , snooze =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "snooze"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sort_by_alpha =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sort_by_alpha"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stop_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stop_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subscriptions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subscriptions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subtitles =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subtitles"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , surround_sound =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "surround_sound"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_call =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_call"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_file =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_file"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_label =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_label"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_library =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_library"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_settings =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_settings"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , videocam =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "videocam"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , videocam_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "videocam_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volume_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volume_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volume_mute =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volume_mute"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volume_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volume_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volume_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volume_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , web =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "web"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , web_asset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "web_asset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , web_asset_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "web_asset_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_p =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_p"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_ic_call =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_ic_call"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alternate_email =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alternate_email"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , app_registration =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "app_registration"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , business =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "business"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_end =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_end"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_made =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_made"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_merge =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_merge"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_missed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_missed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_missed_outgoing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_missed_outgoing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_received =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_received"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , call_split =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "call_split"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cancel_presentation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cancel_presentation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cell_tower =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cell_tower"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cell_wifi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cell_wifi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chat_bubble =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chat_bubble"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chat_bubble_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chat_bubble_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , clear_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "clear_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , co_present =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "co_present"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , comment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "comment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , comments_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "comments_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contact_emergency =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contact_emergency"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contact_mail =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contact_mail"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contact_phone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contact_phone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contacts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contacts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , desktop_access_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "desktop_access_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dialer_sip =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dialer_sip"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dialpad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dialpad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , document_scanner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "document_scanner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , domain_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "domain_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , domain_verification =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "domain_verification"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , duo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "duo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , email =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "email"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forum =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forum"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forward_to_inbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forward_to_inbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hourglass_bottom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hourglass_bottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hourglass_top =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hourglass_top"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hub =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hub"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , import_contacts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "import_contacts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , import_export =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "import_export"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , invert_colors_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "invert_colors_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , key =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "key"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , key_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "key_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , list_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "list_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , live_help =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "live_help"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , location_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "location_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , location_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "location_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mail_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mail_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mail_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mail_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_chat_read =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_chat_read"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_chat_unread =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_chat_unread"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_email_read =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_email_read"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_email_unread =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_email_unread"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mark_unread_chat_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mark_unread_chat_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , message =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "message"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mobile_screen_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mobile_screen_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , more_time =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "more_time"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_sim =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_sim"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pause_presentation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pause_presentation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_add_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_add_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_enabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_enabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink_erase =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink_erase"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink_ring =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink_ring"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink_setup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink_setup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , portable_wifi_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "portable_wifi_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , present_to_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "present_to_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , print_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "print_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , qr_code =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "qr_code"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , qr_code_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "qr_code_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , qr_code_scanner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "qr_code_scanner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , read_more =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "read_more"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ring_volume =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ring_volume"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rss_feed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rss_feed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rtt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rtt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , send_time_extension =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "send_time_extension"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_satisfied_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_satisfied_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sip =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sip"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speaker_phone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speaker_phone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spoke =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spoke"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stay_current_landscape =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stay_current_landscape"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stay_current_portrait =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stay_current_portrait"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stay_primary_landscape =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stay_primary_landscape"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stay_primary_portrait =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stay_primary_portrait"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stop_screen_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stop_screen_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , swap_calls =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "swap_calls"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , textsms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "textsms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unsubscribe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unsubscribe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , voicemail =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "voicemail"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vpn_key =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vpn_key"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vpn_key_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vpn_key_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_calling =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_calling"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_box =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_box"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_circle_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_circle_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_link =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_link"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , archive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "archive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attribution =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attribution"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , backspace =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "backspace"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ballot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ballot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , biotech =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "biotech"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , block =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "block"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bolt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bolt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , calculate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "calculate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , change_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "change_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , clear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "clear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_copy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_copy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_cut =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_cut"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_paste =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_paste"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_paste_go =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_paste_go"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_paste_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_paste_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , content_paste_search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "content_paste_search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , copy_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "copy_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , create =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "create"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , delete_sweep =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "delete_sweep"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , deselect =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "deselect"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drafts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drafts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dynamic_feed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dynamic_feed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_copy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_copy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_list =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_list"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_list_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_list_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flag =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flag"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flag_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flag_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , font_download =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "font_download"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , font_download_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "font_download_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gesture =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gesture"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , how_to_reg =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "how_to_reg"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , how_to_vote =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "how_to_vote"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , inbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "inbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insights =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insights"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , inventory =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "inventory"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , inventory_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "inventory_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , link =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "link"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , link_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "link_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , low_priority =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "low_priority"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mail =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mail"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , markunread =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "markunread"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , move_to_inbox =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "move_to_inbox"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , next_week =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "next_week"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , outlined_flag =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "outlined_flag"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , policy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "policy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , push_pin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "push_pin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , redo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "redo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_circle_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_circle_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reply =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reply"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reply_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reply_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , report =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "report"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , report_gmailerrorred =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "report_gmailerrorred"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , report_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "report_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , save =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "save"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , save_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "save_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , save_as =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "save_as"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , select_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "select_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , send =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "send"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shield =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shield"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sort =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sort"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , square_foot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "square_foot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stacked_bar_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stacked_bar_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stream =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stream"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tag =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tag"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_format =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_format"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unarchive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unarchive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , undo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "undo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , upcoming =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "upcoming"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , waves =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "waves"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , web_stories =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "web_stories"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , weekend =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "weekend"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , where_to_vote =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "where_to_vote"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , one_x_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "one_x_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thirty_fps =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thirty_fps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_g_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_g_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , four_g_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "four_g_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , four_g_plus_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "four_g_plus_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sixty_fps =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sixty_fps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , access_alarm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "access_alarm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , access_alarms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "access_alarms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , access_time =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "access_time"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , access_time_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "access_time_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ad_units =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ad_units"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_alarm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_alarm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_to_home_screen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_to_home_screen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , air =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "air"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airplane_ticket =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airplane_ticket"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airplanemode_active =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airplanemode_active"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airplanemode_inactive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airplanemode_inactive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , aod =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "aod"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_0_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_0_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_1_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_1_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_2_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_2_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_3_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_3_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_4_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_4_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_5_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_5_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_6_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_6_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_charging_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_charging_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_saver =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_saver"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_std =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_std"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , battery_unknown =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "battery_unknown"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bloodtype =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bloodtype"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth_connected =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth_connected"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth_drive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth_drive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth_searching =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth_searching"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_high =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_high"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_low =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_low"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_medium =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_medium"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cable =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cable"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cameraswitch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cameraswitch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , credit_score =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "credit_score"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dark_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dark_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_saver_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_saver_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_saver_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_saver_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_usage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_usage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dataset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dataset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dataset_linked =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dataset_linked"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , developer_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "developer_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , device_thermostat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "device_thermostat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , devices =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "devices"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , devices_fold =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "devices_fold"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , discount =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "discount"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_disturb_on_total_silence =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_disturb_on_total_silence"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dvr =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dvr"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , e_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "e_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edgesensor_high =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edgesensor_high"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edgesensor_low =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edgesensor_low"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flashlight_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flashlight_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flashlight_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flashlight_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fluorescent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fluorescent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fmd_bad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fmd_bad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fmd_good =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fmd_good"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , g_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "g_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gpp_bad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gpp_bad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gpp_good =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gpp_good"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gpp_maybe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gpp_maybe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gps_fixed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gps_fixed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gps_not_fixed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gps_not_fixed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gps_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gps_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , graphic_eq =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "graphic_eq"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_3x3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_3x3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_4x4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_4x4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_goldenratio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_goldenratio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , h_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "h_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , h_plus_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "h_plus_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_auto_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_auto_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_off_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_off_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_on_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_on_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lan =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lan"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lens_blur =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lens_blur"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , light_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "light_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , location_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "location_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , location_searching =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "location_searching"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lte_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lte_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lte_plus_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lte_plus_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , macro_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "macro_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , media_bluetooth_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "media_bluetooth_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , media_bluetooth_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "media_bluetooth_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , medication =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "medication"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , medication_liquid =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "medication_liquid"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mobile_friendly =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mobile_friendly"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mobile_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mobile_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mobiledata_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mobiledata_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_night =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_night"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_standby =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_standby"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , monitor_heart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "monitor_heart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , monitor_weight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "monitor_weight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nearby_error =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nearby_error"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nearby_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nearby_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_cell =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_cell"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_wifi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_wifi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_wifi_1_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_wifi_1_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_wifi_2_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_wifi_2_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_wifi_3_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_wifi_3_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nfc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nfc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nightlight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nightlight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , note_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "note_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , password =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "password"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pattern =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pattern"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phishing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phishing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , play_lesson =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "play_lesson"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , price_change =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "price_change"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , price_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "price_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , punch_clock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "punch_clock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , quiz =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "quiz"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , r_mobiledata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "r_mobiledata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , radar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "radar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remember_me =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remember_me"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reset_tv =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reset_tv"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restart_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restart_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reviews =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reviews"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rsvp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rsvp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_lock_landscape =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_lock_landscape"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_lock_portrait =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_lock_portrait"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_lock_rotation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_lock_rotation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_rotation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_rotation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_search_desktop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_search_desktop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screenshot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screenshot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screenshot_monitor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screenshot_monitor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sd_storage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sd_storage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , security_update =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "security_update"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , security_update_good =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "security_update_good"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , security_update_warning =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "security_update_warning"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sell =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sell"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , send_to_mobile =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "send_to_mobile"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_suggest =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_suggest"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , settings_system_daydream =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "settings_system_daydream"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , share_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "share_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shortcut =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shortcut"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_0_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_0_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_4_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_4_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_alt_1_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_alt_1_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_alt_2_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_alt_2_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_connected_no_internet_0_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_connected_no_internet_0_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_connected_no_internet_4_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_connected_no_internet_4_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_no_sim =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_no_sim"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_nodata =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_nodata"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_null =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_null"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_cellular_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_cellular_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_0_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_0_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_4_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_4_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_4_bar_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_4_bar_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_bad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_bad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_connected_no_internet_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_connected_no_internet_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_statusbar_4_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_statusbar_4_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_statusbar_connected_no_internet_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_statusbar_connected_no_internet_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signal_wifi_statusbar_null =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signal_wifi_statusbar_null"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sim_card_download =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sim_card_download"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , splitscreen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "splitscreen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_score =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_score"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ssid_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ssid_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , storage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "storage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , storm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "storm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , summarize =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "summarize"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , system_security_update =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "system_security_update"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , system_security_update_good =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "system_security_update_good"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , system_security_update_warning =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "system_security_update_warning"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , task =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "task"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thermostat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thermostat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer_10_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer_10_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer_3_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer_3_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tungsten =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tungsten"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , usb =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "usb"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , usb_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "usb_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wallpaper =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wallpaper"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , water =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "water"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , widgets =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "widgets"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_1_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_1_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_2_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_2_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_calling_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_calling_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_channel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_channel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_find =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_find"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_password =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_password"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_tethering =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_tethering"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_tethering_error =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_tethering_error"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_tethering_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_tethering_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_comment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_comment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_horizontal_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_horizontal_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_horizontal_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_horizontal_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_horizontal_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_horizontal_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_vertical_bottom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_vertical_bottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_vertical_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_vertical_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , align_vertical_top =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "align_vertical_top"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , area_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "area_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attach_file =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attach_file"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attach_money =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attach_money"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_graph =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_graph"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bar_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bar_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_all =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_all"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_bottom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_bottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_clear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_clear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_color =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_color"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_horizontal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_horizontal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_inner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_inner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_outer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_outer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_style =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_style"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_top =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_top"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , border_vertical =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "border_vertical"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bubble_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bubble_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , candlestick_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "candlestick_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , checklist =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "checklist"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , checklist_rtl =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "checklist_rtl"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_array =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_array"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , data_object =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "data_object"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drag_handle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drag_handle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , draw =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "draw"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_note =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_note"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_align_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_align_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_align_justify =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_align_justify"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_align_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_align_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_align_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_align_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_bold =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_bold"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_clear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_clear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_color_fill =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_color_fill"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_color_reset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_color_reset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_color_text =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_color_text"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_indent_decrease =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_indent_decrease"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_indent_increase =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_indent_increase"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_italic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_italic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_line_spacing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_line_spacing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_list_bulleted =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_list_bulleted"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_list_numbered =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_list_numbered"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_list_numbered_rtl =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_list_numbered_rtl"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_paint =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_paint"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_quote =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_quote"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_shapes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_shapes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_size =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_size"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_strikethrough =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_strikethrough"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_textdirection_l_to_r =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_textdirection_l_to_r"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_textdirection_r_to_l =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_textdirection_r_to_l"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_underlined =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_underlined"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , functions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "functions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , height =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "height"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hexagon =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hexagon"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , highlight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "highlight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , horizontal_distribute =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "horizontal_distribute"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , horizontal_rule =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "horizontal_rule"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_chart_outlined =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_chart_outlined"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_comment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_comment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_drive_file =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_drive_file"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_emoticon =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_emoticon"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_invitation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_invitation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_link =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_link"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_page_break =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_page_break"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , insert_photo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "insert_photo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , line_axis =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "line_axis"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , linear_scale =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "linear_scale"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , margin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "margin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , merge_type =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "merge_type"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_comment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_comment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_edit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_edit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_edit_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_edit_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , monetization_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "monetization_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , money_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "money_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , money_off_csred =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "money_off_csred"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , move_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "move_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , move_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "move_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , multiline_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "multiline_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , numbers =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "numbers"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , padding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "padding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pentagon =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pentagon"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pie_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pie_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pie_chart_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pie_chart_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , polyline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "polyline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , post_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "post_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , publish =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "publish"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , query_stats =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "query_stats"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rectangle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rectangle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , scatter_plot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "scatter_plot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , schema =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "schema"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , score =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "score"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shape_line =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shape_line"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , short_text =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "short_text"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , show_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "show_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , space_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "space_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , square =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "square"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stacked_line_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stacked_line_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , strikethrough_s =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "strikethrough_s"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subscript =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subscript"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , superscript =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "superscript"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , table_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "table_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , table_rows =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "table_rows"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_decrease =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_decrease"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_fields =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_fields"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_increase =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_increase"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , title =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "title"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , type_specimen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "type_specimen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_align_bottom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_align_bottom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_align_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_align_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_align_top =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_align_top"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_distribute =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_distribute"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wrap_text =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wrap_text"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , approval =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "approval"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attach_email =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attach_email"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attachment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attachment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_done =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_done"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_download =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_download"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_queue =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_queue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_sync =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_sync"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cloud_upload =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cloud_upload"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , create_new_folder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "create_new_folder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , difference =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "difference"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , download =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "download"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , download_done =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "download_done"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , download_for_offline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "download_for_offline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , downloading =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "downloading"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drive_file_move =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drive_file_move"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drive_file_move_rtl =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drive_file_move_rtl"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drive_file_rename_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drive_file_rename_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drive_folder_upload =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drive_folder_upload"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_download =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_download"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_download_done =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_download_done"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_download_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_download_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_open =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_open"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , file_upload =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "file_upload"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_copy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_copy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_delete =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_delete"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_open =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_open"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_shared =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_shared"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_zip =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_zip"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , format_overline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "format_overline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_view =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_view"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , newspaper =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "newspaper"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , request_quote =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "request_quote"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rule_folder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rule_folder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , snippet_folder =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "snippet_folder"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , text_snippet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "text_snippet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , topic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "topic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , upload =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "upload"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , upload_file =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "upload_file"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , workspaces =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "workspaces"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , adf_scanner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "adf_scanner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , browser_not_supported =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "browser_not_supported"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , browser_updated =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "browser_updated"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cast =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cast"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cast_connected =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cast_connected"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cast_for_education =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cast_for_education"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , computer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "computer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , connected_tv =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "connected_tv"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , desktop_mac =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "desktop_mac"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , desktop_windows =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "desktop_windows"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , developer_board =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "developer_board"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , developer_board_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "developer_board_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , device_hub =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "device_hub"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , device_unknown =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "device_unknown"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , devices_other =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "devices_other"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , earbuds =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "earbuds"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , earbuds_battery =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "earbuds_battery"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gamepad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gamepad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , headphones =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "headphones"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , headphones_battery =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "headphones_battery"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , headset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "headset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , headset_mic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "headset_mic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , headset_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "headset_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , home_max =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "home_max"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , home_mini =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "home_mini"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_arrow_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_arrow_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_arrow_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_arrow_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_arrow_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_arrow_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_arrow_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_arrow_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_backspace =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_backspace"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_capslock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_capslock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_command_key =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_command_key"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_control_key =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_control_key"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_double_arrow_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_double_arrow_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_double_arrow_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_double_arrow_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_double_arrow_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_double_arrow_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_double_arrow_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_double_arrow_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_hide =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_hide"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_option_key =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_option_key"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_return =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_return"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_tab =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_tab"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , keyboard_voice =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "keyboard_voice"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , laptop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "laptop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , laptop_chromebook =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "laptop_chromebook"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , laptop_mac =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "laptop_mac"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , laptop_windows =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "laptop_windows"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , memory =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "memory"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , monitor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "monitor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mouse =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mouse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_android =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_android"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_iphone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_iphone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phonelink_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phonelink_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , point_of_sale =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "point_of_sale"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , power_input =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "power_input"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , router =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "router"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , scanner =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "scanner"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , security =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "security"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sim_card =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sim_card"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smart_display =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smart_display"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smart_screen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smart_screen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smart_toy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smart_toy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smartphone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smartphone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speaker =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speaker"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , speaker_group =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "speaker_group"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , start =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "start"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tablet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tablet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tablet_android =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tablet_android"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tablet_mac =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tablet_mac"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , toys =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "toys"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tv =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tv"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , videogame_asset =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "videogame_asset"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , videogame_asset_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "videogame_asset_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , watch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "watch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , watch_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "watch_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blinds =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blinds"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blinds_closed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blinds_closed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , broadcast_on_home =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "broadcast_on_home"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , broadcast_on_personal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "broadcast_on_personal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , curtains =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "curtains"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , curtains_closed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "curtains_closed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_bolt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_bolt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_meter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_meter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , energy_savings_leaf =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "energy_savings_leaf"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gas_meter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gas_meter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , heat_pump =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "heat_pump"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_fan_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_fan_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nest_cam_wired_stand =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nest_cam_wired_stand"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , oil_barrel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "oil_barrel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , propane =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "propane"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , propane_tank =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "propane_tank"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roller_shades =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roller_shades"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roller_shades_closed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roller_shades_closed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sensor_door =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sensor_door"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sensor_occupied =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sensor_occupied"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sensor_window =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sensor_window"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shield_moon =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shield_moon"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , solar_power =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "solar_power"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_shades =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_shades"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vertical_shades_closed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vertical_shades_closed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wind_power =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wind_power"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ten_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ten_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eleven_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eleven_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twelve_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twelve_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thirteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thirteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fourteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fourteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fifteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fifteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sixteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sixteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , seventeen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "seventeen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eighteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eighteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nineteen_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nineteen_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twenty_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twenty_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twenty_one_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twenty_one_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twenty_two_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twenty_two_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twenty_three_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twenty_three_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , twenty_four_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "twenty_four_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , two_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "two_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thirty_fps_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thirty_fps_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , four_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "four_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , five_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "five_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sixty_fps_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sixty_fps_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , six_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "six_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , seven_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "seven_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eight_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eight_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nine_mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nine_mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_a_photo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_a_photo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_photo_alternate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_photo_alternate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_to_photos =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_to_photos"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , adjust =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "adjust"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , animation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "animation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assistant =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assistant"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assistant_photo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assistant_photo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , audiotrack =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "audiotrack"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_awesome =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_awesome"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_awesome_mosaic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_awesome_mosaic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_awesome_motion =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_awesome_motion"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_fix_high =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_fix_high"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_fix_normal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_fix_normal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_fix_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_fix_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , auto_stories =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "auto_stories"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , autofps_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "autofps_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bedtime =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bedtime"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bedtime_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bedtime_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blur_circular =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blur_circular"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blur_linear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blur_linear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blur_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blur_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blur_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blur_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_6 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_6"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brightness_7 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brightness_7"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , broken_image =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "broken_image"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brush =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brush"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , burst_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "burst_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_front =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_front"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_rear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_rear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_roll =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_roll"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cases =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cases"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , center_focus_strong =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "center_focus_strong"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , center_focus_weak =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "center_focus_weak"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , collections =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "collections"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , collections_bookmark =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "collections_bookmark"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , color_lens =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "color_lens"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , colorize =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "colorize"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , compare =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "compare"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , contrast =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "contrast"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , control_point =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "control_point"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , control_point_duplicate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "control_point_duplicate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_16_9 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_16_9"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_3_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_3_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_5_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_5_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_7_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_7_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_din =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_din"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_free =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_free"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_landscape =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_landscape"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_original =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_original"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_portrait =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_portrait"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_rotate =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_rotate"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crop_square =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crop_square"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_bitcoin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_bitcoin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_franc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_franc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_lira =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_lira"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_pound =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_pound"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_ruble =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_ruble"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_rupee =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_rupee"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_yen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_yen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , currency_yuan =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "currency_yuan"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , deblur =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "deblur"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dehaze =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dehaze"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , details =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "details"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dirty_lens =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dirty_lens"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , euro =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "euro"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure_neg_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure_neg_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure_neg_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure_neg_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure_plus_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure_plus_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure_plus_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure_plus_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , exposure_zero =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "exposure_zero"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_retouching_natural =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_retouching_natural"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_retouching_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_retouching_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_6 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_6"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_7 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_7"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_8 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_8"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_9 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_9"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_9_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_9_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_b_and_w =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_b_and_w"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_center_focus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_center_focus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_drama =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_drama"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_frames =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_frames"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_hdr =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_hdr"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_none =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_none"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_tilt_shift =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_tilt_shift"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , filter_vintage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "filter_vintage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flare =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flare"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flash_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flash_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flash_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flash_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flash_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flash_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flip =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flip"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flip_camera_android =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flip_camera_android"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flip_camera_ios =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flip_camera_ios"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gradient =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gradient"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grain =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grain"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grid_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grid_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_enhanced_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_enhanced_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_plus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_plus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_strong =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_strong"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hdr_weak =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hdr_weak"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , healing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "healing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hevc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hevc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hide_image =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hide_image"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , image =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "image"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , image_aspect_ratio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "image_aspect_ratio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , image_not_supported =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "image_not_supported"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , image_search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "image_search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , incomplete_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "incomplete_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , iso =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "iso"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , landscape =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "landscape"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , leak_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "leak_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , leak_remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "leak_remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lens =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lens"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , linked_camera =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "linked_camera"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , logo_dev =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "logo_dev"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_6 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_6"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_one =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_one"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , looks_two =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "looks_two"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , loupe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "loupe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mic_external_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mic_external_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mic_external_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mic_external_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , monochrome_photos =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "monochrome_photos"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , motion_photos_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "motion_photos_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , motion_photos_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "motion_photos_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , motion_photos_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "motion_photos_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , motion_photos_pause =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "motion_photos_pause"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , motion_photos_paused =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "motion_photos_paused"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , movie_creation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "movie_creation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , movie_filter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "movie_filter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mp =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mp"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , music_note =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "music_note"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , music_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "music_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nature =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nature"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nature_people =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nature_people"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , navigate_before =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "navigate_before"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , navigate_next =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "navigate_next"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , palette =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "palette"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_fish_eye =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_fish_eye"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_horizontal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_horizontal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_horizontal_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_horizontal_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_photosphere =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_photosphere"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_photosphere_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_photosphere_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_vertical =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_vertical"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_vertical_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_vertical_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_wide_angle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_wide_angle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , panorama_wide_angle_select =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "panorama_wide_angle_select"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_album =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_album"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_camera =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_camera"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_camera_back =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_camera_back"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_camera_front =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_camera_front"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_filter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_filter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_library =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_library"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_size_select_actual =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_size_select_actual"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_size_select_large =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_size_select_large"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , photo_size_select_small =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "photo_size_select_small"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , picture_as_pdf =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "picture_as_pdf"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , portrait =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "portrait"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , raw_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "raw_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , raw_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "raw_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , receipt_long =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "receipt_long"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_red_eye =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_red_eye"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rotate_90_degrees_ccw =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rotate_90_degrees_ccw"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rotate_90_degrees_cw =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rotate_90_degrees_cw"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rotate_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rotate_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rotate_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rotate_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shutter_speed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shutter_speed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , slideshow =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "slideshow"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , straighten =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "straighten"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , style =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "style"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_camera =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_camera"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tag_faces =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tag_faces"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , texture =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "texture"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thermostat_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thermostat_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timelapse =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timelapse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer_10 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer_10"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , timer_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "timer_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tonality =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tonality"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , transform =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "transform"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tune =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tune"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_camera_back =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_camera_back"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_camera_front =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_camera_front"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_stable =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_stable"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_comfy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_comfy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , view_compact =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "view_compact"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vignette =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vignette"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vrpano =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vrpano"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_auto =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_auto"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_cloudy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_cloudy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_incandescent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_incandescent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_iridescent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_iridescent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_shade =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_shade"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_sunny =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_sunny"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wb_twilight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wb_twilight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , three_sixty =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "three_sixty"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_business =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_business"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_location_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_location_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_road =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_road"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , agriculture =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "agriculture"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_stops =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_stops"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airlines =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airlines"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , alt_route =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "alt_route"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , atm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "atm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , attractions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "attractions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , badge =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "badge"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bakery_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bakery_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , beenhere =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "beenhere"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bike_scooter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bike_scooter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , breakfast_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "breakfast_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , brunch_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "brunch_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bus_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bus_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , car_crash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "car_crash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , car_rental =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "car_rental"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , car_repair =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "car_repair"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , castle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "castle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , category =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "category"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , celebration =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "celebration"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , church =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "church"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cleaning_services =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cleaning_services"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , compass_calibration =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "compass_calibration"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , connecting_airports =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "connecting_airports"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crisis_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crisis_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , delivery_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "delivery_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , departure_board =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "departure_board"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , design_services =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "design_services"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , diamond =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "diamond"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dinner_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dinner_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_bike =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_bike"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_boat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_boat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_boat_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_boat_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_bus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_bus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_bus_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_bus_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_car =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_car"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_car_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_car_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_railway =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_railway"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_railway_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_railway_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_run =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_run"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_subway =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_subway"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_subway_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_subway_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_transit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_transit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_transit_filled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_transit_filled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_walk =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_walk"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dry_cleaning =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dry_cleaning"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_attributes =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_attributes"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_location_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_location_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_road =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_road"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , egg =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "egg"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , egg_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "egg_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_bike =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_bike"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_car =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_car"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_moped =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_moped"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_rickshaw =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_rickshaw"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electric_scooter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electric_scooter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , electrical_services =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "electrical_services"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emergency =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emergency"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emergency_recording =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emergency_recording"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emergency_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emergency_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ev_station =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ev_station"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , factory =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "factory"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fastfood =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fastfood"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , festival =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "festival"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fire_hydrant_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fire_hydrant_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fire_truck =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fire_truck"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flight_class =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flight_class"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , forest =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "forest"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fork_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fork_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fork_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fork_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fort =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fort"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hail =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hail"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , handyman =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "handyman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hardware =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hardware"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , home_repair_service =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "home_repair_service"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hotel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hotel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hvac =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hvac"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , icecream =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "icecream"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , kebab_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "kebab_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , layers =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "layers"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , layers_clear =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "layers_clear"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , liquor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "liquor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_activity =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_activity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_airport =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_airport"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_atm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_atm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_cafe =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_cafe"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_car_wash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_car_wash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_convenience_store =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_convenience_store"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_drink =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_drink"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_fire_department =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_fire_department"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_florist =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_florist"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_gas_station =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_gas_station"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_grocery_store =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_grocery_store"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_hospital =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_hospital"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_hotel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_hotel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_laundry_service =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_laundry_service"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_library =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_library"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_mall =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_mall"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_movies =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_movies"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_offer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_offer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_parking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_parking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_pharmacy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_pharmacy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_phone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_phone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_pizza =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_pizza"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_play =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_play"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_police =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_police"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_post_office =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_post_office"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_printshop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_printshop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_see =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_see"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_shipping =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_shipping"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , local_taxi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "local_taxi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , lunch_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "lunch_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , map =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "map"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , maps_ugc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "maps_ugc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , medical_information =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "medical_information"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , medical_services =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "medical_services"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , menu_book =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "menu_book"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , merge =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "merge"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , minor_crash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "minor_crash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , miscellaneous_services =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "miscellaneous_services"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mode_of_travel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mode_of_travel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , money =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "money"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , moped =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "moped"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mosque =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mosque"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , moving =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "moving"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , multiple_stop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "multiple_stop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , museum =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "museum"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , my_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "my_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , navigation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "navigation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , near_me =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "near_me"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , near_me_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "near_me_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nightlife =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nightlife"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_crash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_crash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_meals =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_meals"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_transfer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_transfer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , not_listed_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "not_listed_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , park =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "park"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pedal_bike =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pedal_bike"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_pin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_pin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_pin_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_pin_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pest_control =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pest_control"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pest_control_rodent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pest_control_rodent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pin_drop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pin_drop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , place =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "place"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , plumbing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "plumbing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , railway_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "railway_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ramen_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ramen_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ramp_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ramp_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ramp_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ramp_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rate_review =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rate_review"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_road =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_road"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restaurant =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restaurant"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , restaurant_menu =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "restaurant_menu"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roundabout_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roundabout_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roundabout_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roundabout_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , route =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "route"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , run_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "run_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , safety_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "safety_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sailing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sailing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , satellite =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "satellite"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , screen_rotation_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "screen_rotation_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , set_meal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "set_meal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , signpost =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "signpost"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , snowmobile =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "snowmobile"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sos =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sos"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , soup_kitchen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "soup_kitchen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stadium =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stadium"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , store_mall_directory =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "store_mall_directory"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , straight =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "straight"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , streetview =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "streetview"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subway =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subway"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , synagogue =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "synagogue"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , takeout_dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "takeout_dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , taxi_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "taxi_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , temple_buddhist =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "temple_buddhist"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , temple_hindu =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "temple_hindu"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , terrain =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "terrain"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , theater_comedy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "theater_comedy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tire_repair =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tire_repair"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , traffic =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "traffic"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , train =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "train"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tram =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tram"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , transfer_within_a_station =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "transfer_within_a_station"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , transit_enterexit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "transit_enterexit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , trip_origin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "trip_origin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_sharp_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_sharp_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_sharp_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_sharp_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_slight_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_slight_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , turn_slight_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "turn_slight_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , two_wheeler =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "two_wheeler"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , u_turn_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "u_turn_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , u_turn_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "u_turn_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volunteer_activism =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volunteer_activism"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , warehouse =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "warehouse"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wine_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wine_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wrong_location =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wrong_location"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , zoom_in_map =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "zoom_in_map"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , zoom_out_map =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "zoom_out_map"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_home_work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_home_work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , app_settings_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "app_settings_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , apps =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "apps"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , apps_outage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "apps_outage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_back =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_back"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_back_ios =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_back_ios"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_back_ios_new =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_back_ios_new"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_downward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_downward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_drop_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_drop_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_drop_down_circle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_drop_down_circle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_drop_up =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_drop_up"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_forward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_forward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_forward_ios =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_forward_ios"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , arrow_upward =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "arrow_upward"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assistant_direction =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assistant_direction"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , campaign =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "campaign"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cancel =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cancel"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chevron_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chevron_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chevron_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chevron_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , close =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "close"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , double_arrow =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "double_arrow"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , east =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "east"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , expand_circle_down =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "expand_circle_down"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , expand_less =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "expand_less"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , expand_more =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "expand_more"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , first_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "first_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fullscreen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fullscreen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fullscreen_exit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fullscreen_exit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , home_work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "home_work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , last_page =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "last_page"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , legend_toggle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "legend_toggle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , maps_home_work =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "maps_home_work"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , menu =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "menu"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , menu_open =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "menu_open"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , more_horiz =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "more_horiz"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , more_vert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "more_vert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , north =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "north"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , north_east =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "north_east"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , north_west =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "north_west"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , offline_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "offline_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , payments =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "payments"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pivot_table_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pivot_table_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , refresh =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "refresh"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , south =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "south"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , south_east =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "south_east"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , south_west =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "south_west"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subdirectory_arrow_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subdirectory_arrow_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , subdirectory_arrow_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "subdirectory_arrow_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_left =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_left"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_right =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_right"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unfold_less =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unfold_less"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , unfold_more =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "unfold_more"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , waterfall_chart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "waterfall_chart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , west =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "west"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , account_tree =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "account_tree"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , adb =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "adb"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_flat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_flat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_flat_angled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_flat_angled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_individual_suite =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_individual_suite"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_legroom_extra =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_legroom_extra"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_legroom_normal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_legroom_normal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_legroom_reduced =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_legroom_reduced"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_recline_extra =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_recline_extra"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airline_seat_recline_normal =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airline_seat_recline_normal"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bluetooth_audio =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bluetooth_audio"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , confirmation_number =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "confirmation_number"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , directions_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "directions_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , disc_full =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "disc_full"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_disturb =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_disturb"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_disturb_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_disturb_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_disturb_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_disturb_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_disturb_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_disturb_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_disturb =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_disturb"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_disturb_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_disturb_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_disturb_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_disturb_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_disturb_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_disturb_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , drive_eta =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "drive_eta"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , enhanced_encryption =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "enhanced_encryption"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event_available =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event_available"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event_busy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event_busy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , event_note =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "event_note"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , folder_special =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "folder_special"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , imagesearch_roller =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "imagesearch_roller"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , live_tv =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "live_tv"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , more =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "more"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_check =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_check"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , network_locked =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "network_locked"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_encryption =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_encryption"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_encryption_gmailerrorred =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_encryption_gmailerrorred"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ondemand_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ondemand_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , personal_video =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "personal_video"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_bluetooth_speaker =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_bluetooth_speaker"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_callback =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_callback"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_forwarded =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_forwarded"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_locked =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_locked"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_missed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_missed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , phone_paused =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "phone_paused"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , power =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "power"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , power_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "power_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , priority_high =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "priority_high"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , running_with_errors =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "running_with_errors"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sd_card =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sd_card"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sd_card_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sd_card_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sim_card_alert =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sim_card_alert"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sms_failed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sms_failed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , support_agent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "support_agent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sync =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sync"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sync_disabled =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sync_disabled"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sync_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sync_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sync_problem =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sync_problem"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , system_update =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "system_update"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tap_and_play =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tap_and_play"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , time_to_leave =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "time_to_leave"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tv_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tv_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vibration =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vibration"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , video_chat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "video_chat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , voice_chat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "voice_chat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vpn_lock =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vpn_lock"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wc =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wc"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wifi_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wifi_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ac_unit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ac_unit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , airport_shuttle =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "airport_shuttle"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , all_inclusive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "all_inclusive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , apartment =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "apartment"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , baby_changing_station =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "baby_changing_station"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , backpack =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "backpack"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , balcony =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "balcony"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bathtub =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bathtub"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , beach_access =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "beach_access"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bento =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bento"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bungalow =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bungalow"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , business_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "business_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cabin =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cabin"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , carpenter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "carpenter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , casino =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "casino"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chalet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chalet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , charging_station =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "charging_station"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , checkroom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "checkroom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , child_care =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "child_care"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , child_friendly =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "child_friendly"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , corporate_fare =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "corporate_fare"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cottage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cottage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , countertops =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "countertops"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , crib =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "crib"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , desk =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "desk"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_step =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_step"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , do_not_touch =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "do_not_touch"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dry =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dry"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , elevator =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "elevator"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , escalator =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "escalator"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , escalator_warning =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "escalator_warning"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , family_restroom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "family_restroom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fence =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fence"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fire_extinguisher =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fire_extinguisher"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fitness_center =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fitness_center"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , food_bank =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "food_bank"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , foundation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "foundation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , free_breakfast =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "free_breakfast"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , gite =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "gite"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , golf_course =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "golf_course"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , grass =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "grass"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , holiday_village =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "holiday_village"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hot_tub =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hot_tub"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , house =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "house"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , house_siding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "house_siding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , houseboat =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "houseboat"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , iron =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "iron"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , kitchen =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "kitchen"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , meeting_room =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "meeting_room"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , microwave =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "microwave"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , night_shelter =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "night_shelter"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_backpack =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_backpack"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_cell =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_cell"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_drinks =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_drinks"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_flash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_flash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_food =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_food"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_meeting_room =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_meeting_room"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_photography =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_photography"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_stroller =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_stroller"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , other_houses =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "other_houses"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pool =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pool"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rice_bowl =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rice_bowl"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roofing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roofing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , room_preferences =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "room_preferences"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , room_service =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "room_service"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , rv_hookup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "rv_hookup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smoke_free =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smoke_free"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , smoking_rooms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "smoking_rooms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , soap =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "soap"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , spa =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "spa"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stairs =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stairs"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , storefront =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "storefront"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , stroller =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "stroller"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tapas =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tapas"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tty =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tty"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , umbrella =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "umbrella"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vape_free =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vape_free"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vaping_rooms =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vaping_rooms"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , villa =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "villa"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wash =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wash"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , water_damage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "water_damage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wheelchair_pickup =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wheelchair_pickup"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bathroom =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bathroom"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bedroom_baby =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bedroom_baby"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bedroom_child =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bedroom_child"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , bedroom_parent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "bedroom_parent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blender =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blender"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_indoor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_indoor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , camera_outdoor =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "camera_outdoor"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chair =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chair"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , chair_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "chair_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , coffee =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "coffee"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , coffee_maker =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "coffee_maker"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , dining =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "dining"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , door_back =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "door_back"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , door_front =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "door_front"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , door_sliding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "door_sliding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , doorbell =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "doorbell"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , feed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "feed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flatware =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flatware"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , garage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "garage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , light =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "light"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , living =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "living"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , manage_search =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "manage_search"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , podcasts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "podcasts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , shower =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "shower"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , table_bar =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "table_bar"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , table_restaurant =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "table_restaurant"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , window =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "window"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , yard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "yard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , eighteen_up_rating =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "eighteen_up_rating"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , six_ft_apart =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "six_ft_apart"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_moderator =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_moderator"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , add_reaction =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "add_reaction"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , architecture =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "architecture"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , assist_walker =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "assist_walker"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , back_hand =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "back_hand"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , blind =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "blind"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , boy =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "boy"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cake =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cake"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , catching_pokemon =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "catching_pokemon"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , clean_hands =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "clean_hands"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , co2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "co2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , compost =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "compost"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , connect_without_contact =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "connect_without_contact"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , construction =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "construction"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cookie =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cookie"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , coronavirus =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "coronavirus"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cruelty_free =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cruelty_free"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , cyclone =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "cyclone"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , deck =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "deck"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , diversity_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "diversity_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , diversity_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "diversity_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , diversity_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "diversity_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , domain =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "domain"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , domain_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "domain_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , downhill_skiing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "downhill_skiing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , edit_notifications =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "edit_notifications"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , elderly =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "elderly"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , elderly_woman =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "elderly_woman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_emotions =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_emotions"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_events =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_events"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_food_beverage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_food_beverage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_nature =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_nature"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_objects =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_objects"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_people =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_people"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_symbols =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_symbols"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , emoji_transportation =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "emoji_transportation"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , engineering =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "engineering"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_5 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_5"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , face_6 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "face_6"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , female =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "female"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fireplace =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fireplace"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , fitbit =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "fitbit"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , flood =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "flood"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , follow_the_signs =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "follow_the_signs"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , front_hand =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "front_hand"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , girl =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "girl"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , group =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "group"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , group_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "group_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , group_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "group_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , group_remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "group_remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , groups =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "groups"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , groups_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "groups_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , groups_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "groups_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , handshake =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "handshake"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , health_and_safety =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "health_and_safety"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , heart_broken =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "heart_broken"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hiking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hiking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , history_edu =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "history_edu"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , hive =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "hive"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ice_skating =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ice_skating"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , interests =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "interests"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , ios_share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "ios_share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , kayaking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "kayaking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , king_bed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "king_bed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , kitesurfing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "kitesurfing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , landslide =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "landslide"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , location_city =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "location_city"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , luggage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "luggage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , male =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "male"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , man =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "man"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , man_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "man_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , man_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "man_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , man_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "man_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , masks =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "masks"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , military_tech =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "military_tech"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mood =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mood"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , mood_bad =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "mood_bad"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nights_stay =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nights_stay"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_adult_content =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_adult_content"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , no_luggage =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "no_luggage"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , nordic_walking =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "nordic_walking"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notification_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notification_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notifications =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notifications"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notifications_active =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notifications_active"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notifications_none =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notifications_none"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notifications_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notifications_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , notifications_paused =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "notifications_paused"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , outdoor_grill =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "outdoor_grill"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pages =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pages"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , paragliding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "paragliding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , party_mode =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "party_mode"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , people =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "people"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , people_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "people_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , people_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "people_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_3 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_3"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_4 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_4"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_add =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_add"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_add_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_add_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_add_alt_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_add_alt_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_remove =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_remove"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , person_remove_alt_1 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "person_remove_alt_1"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , personal_injury =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "personal_injury"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , piano =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "piano"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , piano_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "piano_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , pix =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "pix"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , plus_one =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "plus_one"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , poll =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "poll"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , precision_manufacturing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "precision_manufacturing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , psychology =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "psychology"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , psychology_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "psychology_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , public =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "public"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , public_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "public_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , real_estate_agent =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "real_estate_agent"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , recommend =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "recommend"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , recycling =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "recycling"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , reduce_capacity =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "reduce_capacity"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , remove_moderator =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "remove_moderator"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , roller_skating =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "roller_skating"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , safety_divider =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "safety_divider"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sanitizer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sanitizer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , scale =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "scale"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , school =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "school"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , science =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "science"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , scoreboard =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "scoreboard"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , scuba_diving =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "scuba_diving"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , self_improvement =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "self_improvement"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_dissatisfied =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_dissatisfied"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_neutral =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_neutral"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_satisfied =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_satisfied"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_very_dissatisfied =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_very_dissatisfied"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sentiment_very_satisfied =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sentiment_very_satisfied"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , severe_cold =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "severe_cold"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , share =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "share"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sick =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sick"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sign_language =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sign_language"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , single_bed =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "single_bed"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , skateboarding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "skateboarding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sledding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sledding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , snowboarding =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "snowboarding"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , snowshoeing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "snowshoeing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , social_distance =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "social_distance"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , south_america =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "south_america"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_baseball =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_baseball"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_basketball =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_basketball"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_cricket =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_cricket"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_esports =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_esports"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_football =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_football"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_golf =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_golf"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_gymnastics =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_gymnastics"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_handball =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_handball"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_hockey =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_hockey"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_kabaddi =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_kabaddi"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_martial_arts =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_martial_arts"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_mma =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_mma"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_motorsports =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_motorsports"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_rugby =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_rugby"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_soccer =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_soccer"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_tennis =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_tennis"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , sports_volleyball =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "sports_volleyball"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , surfing =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "surfing"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , switch_account =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "switch_account"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_down_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_down_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thumb_up_alt =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thumb_up_alt"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , thunderstorm =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "thunderstorm"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tornado =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tornado"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , transgender =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "transgender"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , travel_explore =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "travel_explore"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , tsunami =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "tsunami"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , vaccines =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "vaccines"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , volcano =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "volcano"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , wallet =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "wallet"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , water_drop =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "water_drop"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , waving_hand =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "waving_hand"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , whatshot =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "whatshot"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , woman =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "woman"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , woman_2 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "woman_2"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , workspace_premium =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "workspace_premium"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , check_box =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "check_box"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , check_box_outline_blank =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "check_box_outline_blank"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , indeterminate_check_box =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "indeterminate_check_box"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , radio_button_checked =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "radio_button_checked"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , radio_button_unchecked =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "radio_button_unchecked"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_border =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_border"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_border_purple500 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_border_purple500"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_half =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_half"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_outline =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_outline"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , star_purple500 =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "star_purple500"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , toggle_off =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "toggle_off"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    , toggle_on =
        Elm.value
            { importFrom = [ "Material", "Icons", "Outlined" ]
            , name = "toggle_on"
            , annotation =
                Just
                    (Type.namedWith
                        [ "Material", "Icons", "Types" ]
                        "Icon"
                        [ Type.var "msg" ]
                    )
            }
    }